
timestamps
{
	def jdk = 'openjdk-11'
	def isRelease = env.BRANCH_NAME.toString().equals("master")

	properties([
			gitLabConnection(env.GITLAB_CONNECTION),
			buildDiscarder(logRotator(
					numToKeepStr : isRelease ? '50' : '30'
			))
	])

	def database = '5.7.37'

	//noinspection GroovyAssignabilityCheck
	node('GitCloneExedio && docker')
	{
		try
		{
			abortable
			{
				echo("Delete working dir before build")
				deleteDir()

				def buildTag = makeBuildTag(checkout(scm))
				updateGitlabCommitStatus name: 'Mysql57', state: 'running'

				sh 'rm -f conf/environment/*.properties'

				writeEnv(
						'my57',
						'mysql-connector-java',
						''
				)
				writeEnv(
						'my57-compress',
						'mysql-connector-java',
						'dialect.rowFormat=COMPRESSED\n'
				)
				writeEnv(
						'my57-legacy',
						'mysql-connector-java',
						'disableSupport.nativeDate=true\n'
				)
				writeEnv(
						'my57-nprep',
						'mysql-connector-java',
						'disableSupport.preparedStatements=true\n'
				)
				writeEnv(
						'my57-nstmp',
						'mysql-connector-java',
						'cache.stamps=false\n'
				)
				writeEnv(
						'my57-nstmp-sq',
						'mysql-connector-java',
						'cache.stamps=false\n' +
						'schema.primaryKeyGenerator=sequence\n'
				)
				writeEnv(
						'my57-sq',
						'mysql-connector-java',
						'dialect.connection.compress=true\n' +
						'schema.primaryKeyGenerator=sequence\n'
				)
				writeEnv(
						'my57-sqb',
						'mysql-connector-java',
						'schema.primaryKeyGenerator=batchedSequence\n'
				)
				writeEnv(
						'my57-unique',
						'mysql-connector-java',
						'disableSupport.uniqueViolation=true\n'
				)
				writeEnv(
						'my57-vault',
						'mysql-connector-java',
						'vault=true\n' +
						'vault.service=com.exedio.cope.vaultmock.VaultMockService\n' +
						'vault.isAppliedToAllFields=true\n' +
						'schema.primaryKeyGenerator=sequence\n'
				)
				writeEnv(
						'my57m',
						'mariadb-java-client',
						''
				)
				writeEnv(
						'my57m-legacy',
						'mariadb-java-client',
						'disableSupport.nativeDate=true\n'
				)
				writeEnv(
						'my57m-nprep',
						'mariadb-java-client',
						'disableSupport.preparedStatements=true\n'
				)
				writeEnv(
						'my57m-nstmp',
						'mariadb-java-client',
						'cache.stamps=false\n'
				)
				writeEnv(
						'my57m-nstmp-sq',
						'mariadb-java-client',
						'cache.stamps=false\n' +
						'schema.primaryKeyGenerator=sequence\n'
				)
				writeEnv(
						'my57m-sq',
						'mariadb-java-client',
						'dialect.connection.compress=true\n' +
						'schema.primaryKeyGenerator=sequence\n'
				)
				writeEnv(
						'my57m-vault',
						'mariadb-java-client',
						'vault=true\n' +
						'vault.service=com.exedio.cope.vaultmock.VaultMockService\n' +
						'vault.isAppliedToAllFields=true\n' +
						'schema.primaryKeyGenerator=sequence\n'
				)

				def dockerName = env.JOB_NAME.replace("/", "-") + "-" + env.BUILD_NUMBER
				def dockerDate = new Date().format("yyyyMMdd")
				def mainImage = docker.build(
						'exedio-jenkins:' + dockerName + '-' + dockerDate,
						'--build-arg JDK=' + jdk + ' ' +
						'conf/main')
				def dbImage = docker.build(
						'exedio-jenkins:' + dockerName + '-' + dockerDate + '-db',
						'--build-arg VERSION=' + database + ' ' +
						'--build-arg CONF=my57.cnf ' +
						'conf/mysql')

				def dbBridge = sh ( script:
						"docker network create " +
								dockerName + "-db " +
								"--driver bridge " +
								"--internal",
						returnStdout: true).trim()
				try
				{
					dbImage.withRun(
							"--name '" + dockerName + "-db' " +
							"--cap-drop all " +
							"--cap-add CHOWN " +
							"--cap-add SETGID " +
							"--cap-add SETUID " +
							"--security-opt no-new-privileges " +
							"--tmpfs /var/lib/mysql:rw " +
							"--network " + dbBridge + " " +
							"--network-alias=test_db_host " +
							"--dns-opt timeout:1 --dns-opt attempts:1") // fail faster
					{ c ->
						mainImage.inside(
								"--name '" + dockerName + "' " +
								"--cap-drop all " +
								"--security-opt no-new-privileges " +
								"--hostname mydockerhostname " +
								"--network " + dbBridge + " " +
								"--dns-opt timeout:1 --dns-opt attempts:1") // fail faster
						{
							sh "ant/bin/ant -noinput clean testWithEnv" +
									' "-Dbuild.tag=' + buildTag + '"' +
									' -Dskip.instrument=true' + // already verified in Jenkinsfile
									' -Druntime.test.withEnv.setup.mysql.url=jdbc:mysql://test_db_host/' +
									' -Druntime.test.withEnv.setup.mysql.sql=conf/setup-mysql57.sql' +
									' -Ddisable-ansi-colors=true'
						}
						sh "docker logs " + c.id + " &> db.log"
						archiveArtifacts 'db.log'
					}
				}
				finally
				{
					sh "docker network rm " + dbBridge
				}
			}
		}
		catch(Exception e)
		{
			//todo handle script returned exit code 143
			throw e
		}
		finally
		{
			// because junit failure aborts ant
			junit(
					allowEmptyResults: false,
					testResults: 'build/testresults/**/*.xml',
			)
			archiveArtifacts(
					'build/testprotocol.*,' +
					'build/classes/runtime/src/com/exedio/cope/testprotocol.properties,' +
					'build/*.log,' +
					'build/testtmpdir'
			)
			def to = emailextrecipients([culprits(), requestor()])
			//TODO details
			step([$class: 'Mailer',
					recipients: to,
					attachLog: true,
					notifyEveryUnstableBuild: true])

			updateGitlabCommitStatus name: 'Mysql57', state: currentBuild.resultIsBetterOrEqualTo("SUCCESS") ? "success" : "failed" // https://docs.gitlab.com/ee/api/commits.html#post-the-build-status-to-a-commit
			echo("Delete working dir after build")
			deleteDir()
		}
	}
}

def abortable(Closure body)
{
	try
	{
		body.call()
	}
	catch(hudson.AbortException e)
	{
		if(e.getMessage().contains("exit code 143"))
			return
		throw e
	}
}

def makeBuildTag(scmResult)
{
	return 'build ' +
			env.BRANCH_NAME + ' ' +
			env.BUILD_NUMBER + ' ' +
			new Date().format("yyyy-MM-dd") + ' ' +
			scmResult.GIT_COMMIT + ' ' +
			sh (script: "git cat-file -p " + scmResult.GIT_COMMIT + " | grep '^tree ' | sed -e 's/^tree //'", returnStdout: true).trim()
}

def writeEnv(name, driver, text)
{
	writeFile(
			file: 'conf/environment/' + name + '.properties',
			text:
					'connection.url=jdbc:' + (driver=='mariadb-java-client' ? 'mariadb' : 'mysql') + '://test_db_host/test_db_schema\n' +
					'connection.username=test_db_user\n' +
					'connection.password=test_db_password\n' +
					'x-build.schemasavepoint=' +
							'OK:' +
							' SHOW MASTER STATUS' +
							/ Gtid=\\p{XDigit}{8}-\\p{XDigit}{4}-\\p{XDigit}{4}-\\p{XDigit}{4}-\\p{XDigit}{12}:\\d+-\\d+/ +
							/ mysql-bin.\\d{6}:\\d+/ +
							' doDB=binlogtest' +
							'\n' +
					'x-build.dialect=mysql\n' +
					'x-build.driver=' + driver + '.jar\n' +
					text
		)
}
