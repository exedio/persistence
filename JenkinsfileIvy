
timestamps
{
	def jdk = 'openjdk-8-deb9'
	def isRelease = env.BRANCH_NAME.toString().equals("master")

	properties([
			buildDiscarder(logRotator(
					numToKeepStr         : isRelease ? '1000' : '30',
					artifactNumToKeepStr : isRelease ? '1000' :  '2'
			))
	])

	//noinspection GroovyAssignabilityCheck
	lock('ivy-cache') { node('GitCloneExedio && ' + jdk)
	{
		try
		{
			abortable
			{
				echo("Delete working dir before build")
				deleteDir()

				checkout scm

				env.JAVA_HOME = tool jdk
				env.PATH = "${env.JAVA_HOME}/bin:${env.PATH}"

				sh "ant/bin/ant -noinput -buildfile ivy"
				archiveArtifacts 'ivy/artifacts/report/**'

				sh "git status --porcelain --untracked-files=normal > git-status.txt"
				def gitStatus = readFile('git-status.txt')
				if(gitStatus!='?? git-status.txt\n')
				{
					echo 'FAILURE because fetching dependencies produces git diff, see git-status.txt'
					archiveArtifacts 'git-status.txt'
					currentBuild.result = 'FAILURE'
				}
			}
		}
		catch(Exception e)
		{
			//todo handle script returned exit code 143
			throw e
		}
		finally
		{
			def to = emailextrecipients([culprits(), requestor()])
			//TODO details
			step([$class: 'Mailer',
					recipients: to,
					attachLog: true,
					notifyEveryUnstableBuild: true])

			echo("Delete working dir after build")
			deleteDir()
		}
	}}
}

def abortable(Closure body)
{
	try
	{
		body.call()
	}
	catch(hudson.AbortException e)
	{
		if(e.getMessage().contains("exit code 143"))
			return
		throw e
	}
}
