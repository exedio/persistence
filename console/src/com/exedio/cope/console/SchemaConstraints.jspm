<%
/*
 * Copyright (C) 2004-2009  exedio GmbH (www.exedio.com)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package com.exedio.cope.console;

import static com.exedio.cops.Cop.isPost;

import java.util.EnumSet;

import javax.servlet.http.HttpServletRequest;

import com.exedio.cope.Model;
import com.exedio.dsmf.Constraint;

final class SchemaConstraints_Jspm extends Console_Jspm
{
	private static final String type(final Constraint.Type type)
	{
		switch(type)
		{
			case PrimaryKey: return "pk";
			case ForeignKey: return "fk";
			case Unique:     return "unique";
			case Check:      return "check";
			default:
				throw new RuntimeException(type.name());
		}
	}
	
	private static final String TYPE = "constraint.type";
	private static final String CREATE = "constraint.create";
	private static final String TEARDOWN = "constraint.teardown";
	private static final String DROP = "constraint.drop";
	
	final static void writeBody(
			final SchemaCop cop,
			final Out out,
			final Model model,
			final HttpServletRequest request)
	{
		%>
		<hr>
		<h4>Constraints</h4>
		<form action="<%=cop%>#overall" method="POST"><%
			
			for(final Constraint.Type type : Constraint.Type.values())
			{
			%>
			<input type="checkbox" name="<%=TYPE%>" value="<%=type.name()%>" checked="checked" /><%=type(type)%><%
			}
			%>
			<br>
			<input type="submit" name="<%=CREATE  %>" value="create" />
			<input type="submit" name="<%=TEARDOWN%>" value="tear down"/>
			<input type="submit" name="<%=DROP    %>" value="drop"/><%
			
			if(isPost(request))
			{
				final EnumSet<Constraint.Type> constraintTypes = EnumSet.noneOf(Constraint.Type.class);
				final String[] constraintTypeParameterValues = request.getParameterValues(TYPE);
				if(constraintTypeParameterValues!=null)
					for(String s : constraintTypeParameterValues)
						constraintTypes.add(Constraint.Type.valueOf(s));
					
				if(request.getParameter(CREATE)!=null)
				{
					model.createSchemaConstraints(constraintTypes);
					%><div class="message">Schema constraints successfully created!</div><%
				}
				else if(request.getParameter(TEARDOWN)!=null)
				{
					model.tearDownSchemaConstraints(constraintTypes);
					%><div class="message">Schema constraints successfully torn down!</div><%
				}
				else if(request.getParameter(DROP)!=null)
				{
					model.dropSchemaConstraints(constraintTypes);
					%><div class="message">Schema constraints successfully dropped!</div><%
				}
			}
			%>
			<br>
			supports check constraints: <i><%if(model.supportsCheckConstraints()){%>yes<%}else{%>no<%}%></i>
			<br>
			supports sequences: <i><%if(model.supportsSequences()){%>yes<%}else{%>no<%}%></i>
			<br>
			supports empty strings: <i><%if(model.supportsEmptyStrings()){%>yes<%}else{%>no<%}%></i>
		</form><%
	}
}
%>