<%
/*
 * Copyright (C) 2004-2007  exedio GmbH (www.exedio.com)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package com.exedio.cope.console;

import java.io.PrintStream;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Iterator;

import javax.servlet.http.HttpServletRequest;

import com.exedio.cope.Model;
import com.exedio.dsmf.CheckConstraint;
import com.exedio.dsmf.Column;
import com.exedio.dsmf.Constraint;
import com.exedio.dsmf.ForeignKeyConstraint;
import com.exedio.dsmf.LastAnalyzed;
import com.exedio.dsmf.PrimaryKeyConstraint;
import com.exedio.dsmf.Schema;
import com.exedio.dsmf.Table;
import com.exedio.dsmf.UniqueConstraint;

final class Schema_Jspm extends Console_Jspm
{
	private static final String type(final Constraint constraint)
	{
		if(constraint instanceof CheckConstraint)
			return "check";
		else if(constraint instanceof PrimaryKeyConstraint)
			return "pk";
		else if(constraint instanceof ForeignKeyConstraint)
			return "fk";
		else if(constraint instanceof UniqueConstraint)
			return "unique";
		else
			throw new RuntimeException(constraint.getClass().getName());
	}
	
	final static void writeBody(
			final SchemaCop cop,
			final PrintStream out,
			final Model model,
			final HttpServletRequest request)
	{
		%>
		<form action="<%=cop%>" method="POST">
			<h4>Schema</h4>
			<input type="submit" name="CREATE" value="create" />
			<input type="submit" name="TEARDOWN" value="tear down"/>
			<input type="submit" name="DROP" value="drop"/>
			<hr>
			<h4>Constraints</h4>
			<input type="checkbox" name="CONSTRAINT_MASK" value="<%= Constraint.MASK_PK     %>" checked="true" />pk
			<input type="checkbox" name="CONSTRAINT_MASK" value="<%= Constraint.MASK_FK     %>" checked="true" />fk
			<input type="checkbox" name="CONSTRAINT_MASK" value="<%= Constraint.MASK_UNIQUE %>" checked="true" />unique
			<input type="checkbox" name="CONSTRAINT_MASK" value="<%= Constraint.MASK_CHECK  %>" checked="true" />check
			<br>
			<input type="submit" name="CREATE_CONSTRAINTS" value="create" />
			<input type="submit" name="TEARDOWN_CONSTRAINTS" value="tear down"/>
			<input type="submit" name="DROP_CONSTRAINTS" value="drop"/>
			<input type="submit" name="CHECK_UNSUPPORTED_CONSTRAINTS" value="check unsupported"/>
			<br>
			supports check constraints: <i><%if(model.supportsCheckConstraints()){%>yes<%}else{%>no<%}%></i>
			<br>
			supports empty strings: <i><%if(model.supportsEmptyStrings()){%>yes<%}else{%>no<%}%></i>
			<hr>
			<h4>Details</h4>
			<%
			if("POST".equals(request.getMethod()))
			{
				int mask = 0;
				final String[] constraintMaskParameterValues = request.getParameterValues("CONSTRAINT_MASK");
				if(constraintMaskParameterValues!=null)
					for(String s : constraintMaskParameterValues)
						mask = mask | Integer.parseInt(s);
					
				if(request.getParameter("CREATE")!=null)
				{
					model.createDatabase();
					%><div class="message">Database successfully created!</div><%
				}
				else if(request.getParameter("TEARDOWN")!= null)
				{
					model.tearDownDatabase();
					%><div class="message">Database successfully torn down!</div><%
				}
				else if(request.getParameter("DROP")!=null)
				{
					model.dropDatabase();
					%><div class="message">Database successfully dropped!</div><%
				}
				else if(request.getParameter("CREATE_CONSTRAINTS")!=null)
				{
					model.createDatabaseConstraints(mask);
					%><div class="message">Database constraints successfully created!</div><%
				}
				else if(request.getParameter("TEARDOWN_CONSTRAINTS")!=null)
				{
					model.tearDownDatabaseConstraints(mask);
					%><div class="message">Database constraints successfully torn down!</div><%
				}
				else if(request.getParameter("DROP_CONSTRAINTS")!=null)
				{
					model.dropDatabaseConstraints(mask);
					%><div class="message">Database constraints successfully dropped!</div><%
				}
				else if(request.getParameter("CHECK_UNSUPPORTED_CONSTRAINTS")!=null)
				{
	%>
	<ol><%
					SchemaCop.writeCheckUnsupportedConstraints(out, model);
	%>
	</ol><%
				}
				else if(request.getParameter("APPLY")!=null)
				{
					%><hr>
					<a href="<%=cop%>">flush log</a><%
	%>
	<ol><%
					SchemaCop.writeApply(out, request, model);
	%>
	</ol><%
					%>
					<a href="<%=cop%>">flush log</a>
					<hr><%
				}
			}

		final Schema schema = model.getVerifiedSchema();
		final String schemaColor = schema.getCumulativeColor().toString();

%>
check all:
<input type="button" value="analyze" onClick="checkAll(&quot;ANALYZE_TABLE&quot;)">
<input type="button" value="drop table" onClick="checkAll(&quot;DROP_TABLE&quot;)">
<input type="button" value="drop column" onClick="checkAll(&quot;DROP_COLUMN&quot;)">
<br>
<span class="<%=schemaColor%>">Schema</span>
<input type="submit" name="APPLY" value="apply"/>
<ul class="<%=schemaColor%>"><%

int tableCount = 1;
for(final Table table : schema.getTables())
{
	final String tableName = table.getName();
	%>
	<li class="<%=table.getCumulativeColor()%>"><%
	%><img id="tableSwitch<%=tableName%>" class="check" onClick="toggleTable(&quot;<%=tableName%>&quot;)" src="<%=ConsoleServlet.checkFalse.url(request)%>"> <%
	
	%><small>tab<%=tableCount++%></small> <%
	%><%=tableName%><%
	if(table.exists())
	{
		%>
		<input id="tableRename<%=tableName%>" style="display:none;" name="RENAME_TABLE_<%=tableName%>" size="<%=tableName.length()%>"/><%
	}
	
	final String tableError = table.getError();
	if(tableError!=null)
	{
		%> <span class="<%=table.getParticularColor()
										%>"><%=tableError%></span><%
	}
	if(table.exists())
	{
			%>,
		<span id="tableDrop<%=tableName%>" style="display:none;"><input type="checkbox" name="DROP_TABLE" value="<%=tableName%>"/>drop</span><%
	}
	else if(table.required())
	{
		%>,
		<input type="checkbox" name="CREATE_TABLE" value="<%=tableName%>"/>create<%
	}
	
	final LastAnalyzed lastAnalyzed = table.getLastAnalyzed();

	%>
		<ul id="tableBody<%=tableName%>" style="display:none;"><%
		if(lastAnalyzed!=null)
		{
			final Date date = lastAnalyzed.getDate();
			final String lastAnalyzedString = date!=null ? (new SimpleDateFormat("dd.MM.yyyy HH:mm:ss")).format(date) : "NEVER";
			%>
			<li class="<%=lastAnalyzed.getCumulativeColor()%>">
				last analyzed: <%=lastAnalyzedString%>
				<input type="checkbox" name="ANALYZE_TABLE" value="<%=tableName%>"/>analyze
			</li><%
		}
		
		final String options = table.getOptions();
		if(options!=null)
		{
			%>
			<li class="<%=Schema.Color.OK%>">
				options: <pre><%=options%></pre>
			</li><%
		}
		
		int columnCount = 1;
		for(final Column column : table.getColumns())
		{
			final String columnName = column.getName();
			%>
			<li class="<%=column.getCumulativeColor()%>">
				<img id="columnSwitch<%=tableName%>#<%=columnName%>" class="check" onClick="toggleColumn(&quot;<%=tableName%>#<%=columnName%>&quot;)" src="<%=ConsoleServlet.checkFalse.url(request)%>">
				<small>col<%=columnCount++%></small> <%=columnName%><%
			
			if(column.exists())
			{
				%>
				<input id="columnRename<%=tableName%>#<%=columnName%>" style="display:none;" name="RENAME_COLUMN_<%=
					tableName%>#<%=columnName%>" size="<%=
					columnName.length()%>"/><%
			}
			
			final String columnType = column.getType();
			%>
				<small><%=columnType%></small><%
			
			if(column.exists())
			{
				%>
				<input id="columnModify<%=tableName%>#<%=columnName%>" style="display:none;" name="MODIFY_COLUMN_<%=
					tableName%>#<%=columnName%>" size="<%=
					columnType.length()%>"/><%
			}
			
			final String error = column.getError();
			if(error!=null)
			{
				%>
				<span class="<%=column.getParticularColor()%>"><%=error%></span><%
			}
			if(column.exists())
			{
					%>,
				<span id="columnDrop<%=tableName%>#<%=columnName%>" style="display:none;"><input type="checkbox" name="DROP_COLUMN" value="<%=tableName%>#<%=columnName%>"/>drop</span><%
			}
			else if(column.required() &&
						column.getTable().exists() )
			{
				%>,
				<input type="checkbox" name="CREATE_COLUMN" value="<%=tableName%>#<%=columnName%>"/>create<%
			}
			%>
			</li><%
		}
		
		int constraintCount = 1;
		for(final Constraint constraint : table.getConstraints())
		{
			final String constraintName = constraint.getName();
			%>
			<li class="<%=constraint.getCumulativeColor()%>">
				<img id="constraintSwitch<%=tableName%>#<%=constraintName%>" class="check" onClick="toggleConstraint(&quot;<%=tableName%>#<%=constraintName%>&quot;)" src="<%=ConsoleServlet.checkFalse.url(request)%>">
				<small><%=type(constraint)%><%=constraintCount++%></small> <%=constraintName%><%
			
			final String constraintCondition = constraint.getRequiredCondition();
			if(constraintCondition!=null)
			{
				%> <small><%=constraintCondition%></small><%
			}
			
			final String constraintError = constraint.getError();
			if(constraintError!=null)
			{
				%>
				<span class="<%=constraint.getParticularColor()%>"><%=constraintError%></span><%
			}
			if(constraint.exists())
			{
					%>
				<span id="constraintDrop<%=tableName%>#<%=constraintName%>" style="display:none;"><input type="checkbox" name="<%=SchemaCop.DROP_CONSTRAINT%>" value="<%=tableName%>#<%=constraintName%>"/>drop</span><%
			}
			else if( constraint.required() &&
						constraint.isSupported() &&
						constraint.getTable().exists() )
			{
				%>
				<input type="checkbox" name="<%=SchemaCop.CREATE_CONSTRAINT%>" value="<%=tableName%>#<%=constraintName%>"/>create<%
			}
			%>
			</li><%
		}
		%>
		</ul>
	</li><%
}
%>
</ul>
		</form><%
	}
	
	final static void writeHead(final HttpServletRequest request, final PrintStream out)
	{
		%>
		<script src="<%=ConsoleServlet.reportScript.url(request)%>" type="text/javascript"></script><%
	}
	
	final static void writeDoneCheck(final PrintStream out, final long startTime, final int count)
	{
		final long endTime = System.currentTimeMillis();
		%><li class="timelog"><%
		if(count==0)
		{
			%>ok<%
		}
		else
		{
			%><font color="#F00"><b>violated for <%=count%> tupels</b></font><%
		}
		%>, <%=endTime-startTime%>ms.</li><%
		out.flush();
	}
	
	final static void writeDoneCheckSum(final PrintStream out, final int count)
	{
		%><li class="timelog">Overall: <%
		if(count==0)
		{
			%>ok.<%
		}
		else
		{
			%><font color="#F00"><b>violated for <%=count%> tupels.</b></font><%
		}
		%></li><%
		out.flush();
	}
	
	final static void writeCheck(final PrintStream out, final Constraint constraint)
	{
		%>
		<li>schema.getTable(&quot;<b><%=
			constraint.getTable().getName()%></b>&quot;).getConstraint(&quot;<b><%=
			constraint.getName()%></b>&quot;).check(); // <%=
			constraint.getRequiredCondition()%></li><%
	}
}
%>