<%
/*
 * Copyright (C) 2004-2007  exedio GmbH (www.exedio.com)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package com.exedio.cope.console;

import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.TreeSet;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.exedio.cope.Item;
import com.exedio.cope.ItemFunction;
import com.exedio.cope.Migration;
import com.exedio.cope.Model;
import com.exedio.cope.Properties;
import com.exedio.cope.Type;
import com.exedio.cope.pattern.CachedMedia;
import com.exedio.cope.pattern.Media;
import com.exedio.cope.pattern.MediaFilter;
import com.exedio.cope.pattern.MediaPath;
import com.exedio.cope.pattern.MediaRedirect;
import com.exedio.cope.pattern.MediaThumbnail;
import com.exedio.cope.util.CacheInfo;
import com.exedio.cope.util.CacheQueryInfo;
import com.exedio.cope.util.ConnectionPoolInfo;
import com.exedio.cope.util.PoolCounter;

final class Console_Jspm
{
	static final void write(
				final PrintStream out,
				final HttpServletRequest request,
				final HttpServletResponse response,
				final Model model,
				final ConsoleCop cop)
	{
		try
		{
%><!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"  "http://www.w3.org/TR/html4/loose.dtd">
<html>
	<head>
		<meta http-equiv="content-type" content="text/html; charset=<%=ConsoleServlet.ENCODING%>">
		<title>COPE Console - <%=cop.name%></title>
		<link rel="STYLESHEET" type="text/css" href="<%=ConsoleServlet.stylesheet.url(request)%>"><%
		cop.writeHead(request, out);
		%>
	</head>
	<body>
		<a href="http://www.exedio.com/" target="_blank"><img src="<%=ConsoleServlet.logo.url(request)%>" width="200" height="66" align="right"></a>
		<h1><a href="http://cope.sourceforge.net/" target="_blank">COPE</a> Console</h1>
		<p><%
		
		final ConsoleCop[] tabs = cop.getTabs();
		for(int i = 0; i<tabs.length; i++)
		{
			final ConsoleCop tab = tabs[i];
			if(cop.name.equals(tab.name))
			{
			%>
			| <b><%=tab.name%></b><%
			}
			else
			{
			%>
			| <a href="<%=tab%>"><%=tab.name%></a><%
			}
		}
		%>
		</p>
		<hr><%
		cop.writeBody(out, model, request);
		%>
		<hr>
		<small>request: <%=cop.getStart()%> - <%=cop.getEnd()%> (<%=cop.getDuration()%>ms)</small>
	</body>
</html>
<%
		}
		catch(Throwable t)
		{
			// an exception occuring after writing to HttpResponse.getOutputStream
			// does not cause the stacktrace to be displayed in the web page,
			// so we do this here.
			response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
			%>
			<div class="message">Exception while writing response !!!</div>
			<pre><%
			t.printStackTrace(out);
			%>
			</pre><%
		}
		
	}

	final static void writeBody(
			final TypeColumnCop cop,
			final PrintStream out,
			final ArrayList<ItemFunction> functions,
			final boolean test)
	{
		int sumCount = 0;
		%>
		<form action="<%=cop%>#overall" method="POST">
			<input type="submit" name="<%=cop.TEST%>" value="test all" />
		</form>
		<ol><%
		for(final ItemFunction function : functions)
		{
			%>
			<li><%=function.toString()%><%
			if(test)
			{
				out.flush();
				final long startMillis = System.currentTimeMillis();
				final int count = function.checkTypeColumn();
				final long finishMillis = System.currentTimeMillis();
				sumCount += count;
				if(count!=0)
				{
					%>: <b>bad tupels: <%=count%>.</b><%
				}
				else
				{
					%>: ok.<%
				}
				%> (<%=(finishMillis-startMillis)%>ms)<%
			}
			%></li><%
		}
		%>
		</ol><%
		if(test)
		{
		%>
		<p>Overall: <a name="overall"><%
			if(sumCount!=0)
			{
				%><b>bad tupels: <%=sumCount%>.</b><%
			}
			else
			{
				%>ok.<%
			}
			%></a></p><%
		}
		%>
		<form action="<%=cop%>#overall" method="POST">
			<input type="submit" name="<%=cop.TEST%>" value="test all" />
		</form><%
	}
	
	final static void writeBodyDisabled(
			final MigrationCop cop,
			final PrintStream out)
	{
		%>
		Migrations are not enabled for this model.
		<br>
		Use <a
			href="http://cope.sourceforge.net/api/com/exedio/cope/Model.html#Model(com.exedio.cope.Migration[], com.exedio.cope.Type...)"
			target="_blank">migration constructor</a> to enable.<%
	}
	
	final static void writeBody(
			final MigrationCop cop,
			final PrintStream out,
			final int oldest, final int latest, final int current,
			Map<Integer, Migration> migrations,
			Map<Integer, String> logs)
	{
		%>
		<table>
			<tr><th class="caption" colspan="3">Migrations</th></tr>
			<tr><th>version</th><th>declared</th><th>logged</th></tr><%
			for(int v = latest; v>=oldest; v--)
			{
				final Migration migration = migrations.get(v);
				final String log = logs.get(v);
			%>
			<tr><td class="text"><%=v%><%
				if(v==current){%>X<%}
				%></td><td class="text"><%
				if(migration!=null){ %><%=migration.getComment()%><% } else { %>-<% }
				%></td><td class="text"><%
				if(log!=null){ %><%=log%><% } else { %>-<% }
				%></td></tr><%
			}
			%>
		</table><%
	}
	
	final static void writeBody(
			final ConnectionStatsCop cop,
			final PrintStream out,
			final ConnectionPoolInfo info)
	{
		final PoolCounter poolCounter = info.getCounter();
		final String[] names = {
			"Loss = 100 * Destroy / Get",
			"Idle",
			"Idle Max",
			"Create",
			"Destroy",
		};
		%>
		<table>
			<tr>
				<th class="caption" colspan="2">Connection Pool Statistics</th>
			</tr>
			<tr>
				<th>Since</th>
				<td><%=cop.format(poolCounter.getStart())%></td>
			</tr>
			<tr>
				<th>Idle</th>
				<td><%=info.getIdleCounter()%></td>
			</tr>
			<tr>
				<th>Get</th>
				<td><%=poolCounter.getGetCounter()%></td>
			</tr>
			<tr>
				<th>Put</th>
				<td><%=poolCounter.getPutCounter()%></td>
			</tr>
		</table>
		<hr>
		<table>
			<tr>
				<th class="caption" colspan="6">Hypothetical</th>
			</tr><%
			writeColouredHeader(out, names, 0, 1);
			%>
			<tr><%
				writeColouredHeaderSchnips(out, names);
				%>
				<th>maxIdle</th>
			</tr><%
			for(Iterator i = poolCounter.getPools().iterator(); i.hasNext(); )
			{
				final PoolCounter.Pool pool = (PoolCounter.Pool)i.next();
				final boolean inconsistent = !pool.isConsistent();
				final int destroyCounter = pool.getDestroyCounter();
				
				if(!inconsistent && (destroyCounter==0))
					continue;
				
				final int[] data = {
						pool.getLoss(),
						pool.getIdleCount(),
						pool.getIdleCountMax(),
						pool.getCreateCounter(),
						destroyCounter,
					};
			%>
			<tr<%if(inconsistent){%> class="inconsistent"<%}%>><%
				writeColouredData(out, data);
				%>
				<td><%=pool.getSize()%><%if(inconsistent){%>!<%}%></td>
			</tr><%
			}
		%>
		</table><%
	}

	final static void writeBody(
			final DatabaseLogCop cop,
			final PrintStream out,
			final boolean enable,
			final int threshold,
			final String sql)
	{
		%>
		<form action="<%=cop%>" method="POST">
			<input type="checkbox" name="<%=cop.ENABLE%>"<%if(enable){%> checked="checked"<%}%>> enable
			<br>
			<input type="text" name="<%=cop.THRESHOLD%>" value="<%=threshold%>"> threshold
			<br>
			<input type="text" name="<%=cop.SQL%>" value="<%=sql!=null?sql:""%>"> sql
			<br>
			<input type="submit" name="submit" value="submit">
		</form><%
	}
	
	final static void writeBody(
			final ItemCacheCop cop,
			final PrintStream out,
			final int allLimit,
			final int allLevel,
			final int allHits,
			final int allMisses,
			final long allAgeMinMillis,
			final long allAgeAverageMillis,
			final long allAgeMaxMillis,
			final CacheInfo[] infos)
	{
		final String[] names = {
			"Limit",
			"Level",
			"Hits",
			"Misses",
			"Age Min (s)",
			"Age Average (s)",
			"Age Max (s)",
		};
		%>
		<table>
			<tr><th class="caption" colspan="<%=names.length+1%>">Item Cache Statistics</th></tr><%
			writeColouredHeader(out, names, 0, 1);
			%>
			<tr><%
				writeColouredHeaderSchnips(out, names);
				%>
				<th>Type</th>
			</tr>
			<tr><%
				final int[] allData = {
						hide(0, allLimit),
						hide(0, allLevel),
						hide(0, allHits),
						hide(0, allMisses),
						hide(0, (int)(allAgeMinMillis/1000l)),
						hide(0, (int)(allAgeAverageMillis/1000l)),
						hide(0, (int)(allAgeMaxMillis/1000l)),
					};
				writeColouredData(out, allData);
				%>
				<td class="text">(all)</td>
			</tr><%
			for(int i = 0; i<infos.length; i++)
			{
				final CacheInfo info = infos[i];
				final int[] data = {
						hide(0, info.getLimit()),
						hide(0, info.getLevel()),
						hide(0, info.getHits()),
						hide(0, info.getMisses()),
						hide(0, info.getAgeMinMillis()!=Long.MAX_VALUE ? ((int)(info.getAgeMinMillis()/1000l)) : 0),
						hide(0, (int)(info.getAgeAverageMillis()/1000l)),
						hide(0, (int)(info.getAgeMaxMillis()/1000l)),
					};
			%>
			<tr><%
				writeColouredData(out, data);
				%>
				<td class="text"><%=info.getType().getID()%></td>
			</tr><%
			}
		%>
		</table><%
	}

	final static void writeBody(
			final QueryCacheCop cop,
			final PrintStream out,
			final int[] queryInfos,
			final CacheQueryInfo[] queryHistogram,
			final int sumKeyLength,
			final int maxKeyLength,
			final int minKeyLength,
			final int sumResultSize,
			final int maxResultSize,
			final int minResultSize,
			final int[] resultSizes,
			final boolean queryHistogramAccurate)
	{
		%>
		<table>
			<tr><th class="caption" colspan="3">Query Cache Statistics</th></tr>
			<tr><th colspan="2">Hits</th><td><%=queryInfos[0]%></td></tr>
			<tr><th colspan="2">Misses</th><td><%=queryInfos[1]%></td></tr>
			<tr><th colspan="2">Level</th><td><%=queryInfos[2]%></td></tr><%
			if(queryHistogram.length>0)
			{
			%>
			<tr><th rowspan="3">Key Length</th><th>Average</th><td><%=sumKeyLength/queryHistogram.length%></td></tr>
			<tr><th>Maximum</th><td><%=maxKeyLength%></td></tr>
			<tr><th>Minimum</th><td><%=minKeyLength%></td></tr>
			<tr><th rowspan="<%=resultSizes.length+3%>">Result Size</th><th>Average</th><td><%=sumResultSize/queryHistogram.length%></td></tr>
			<tr><th>Maximum</th><td><%=maxResultSize%></td></tr>
			<tr><th>Minimum</th><td><%=minResultSize%></td></tr><%
				for(int i = 0; i<resultSizes.length; i++)
				{
			%>
			<tr><th>Size <%=i%></th><td><%=resultSizes[i]%></td></tr><%
				}
			}
			%>
		</table><%

		if(!queryHistogramAccurate)
		{
		%>
		<div class="message">
			<b>Values not accurate:</b>
			Property <tt><%=Properties.CACHE_QUERY_HISTOGRAM%></tt> is not enabled.
			Therefore the column <b>Hits</b> counts queries only,
			for which <tt>Query#enableMakeStatementInfo()</tt> has been set.
		</div><%
		}
		final String[] names = {
			"Recent Usage (LRU)",
			"Result Size",
			"Cache Hits",
		};
		%>
		<table>
			<tr><th class="caption" colspan="4">Query Cache Histogram</th></tr><%
			writeColouredHeader(out, names, 0, 1);
			%>
			<tr><%
				writeColouredHeaderSchnips(out, names);
				%>
				<th>Query</th>
			</tr><%

		for(int i = 0; i<queryHistogram.length; i++)
		{
			final CacheQueryInfo info = queryHistogram[i];
			final int[] data = {
					i,
					info.getResultSize(),
					hide(0, info.getHits()),
				};
			%>
			<tr><% writeColouredData(out, data); %><td class="text"><%=info.getQuery()%></td></tr><%
		}
		%>
		</table><%
	}

	final static void writeBody(
			final PrimaryKeysCop cop,
			final PrintStream out,
			final Map<Type, int[]> primaryKeys)
	{
		%>
		<table>
			<tr>
				<th class="caption" colspan="2">Primary Keys</th>
			</tr>
			<tr><th>Type</th><th>Info</th></tr><%
			for(final Type type : primaryKeys.keySet())
			{
			%>
			<tr><td class="text"><%=type.getID()%></td><td><%
				final int[] info = primaryKeys.get(type);
				for(int i : info)
				{
					switch(i)
					{
						case Integer.MIN_VALUE: %>MIN <% break;
						case Integer.MAX_VALUE: %>MAX <% break;
						default:%><%=i%> <%
					}
				}
				%></td></tr><%
			}
		%>
		</table><%
	}

	final static void writeBody(
			final MediaStatsCop cop,
			final PrintStream out,
			final Collection<MediaPath> media)
	{
		final String[] names = {
			"Exception (500)",
			"Not An Item (404)",
			"No Such Item (404)",
			"Is Null (404)",
			"Not Computable (404)",
			"Not Modified (304)",
			"Delivered (200/301)",
		};
		%>
		<table>
			<tr><th class="caption" colspan="<%=names.length+2%>">Media Statistics</th></tr>
			<tr><th colspan="<%=names.length+1%>">No Such Path (404)</th><td><%=MediaPath.noSuchPath.get()%></td></tr><%
			writeColouredHeader(out, names, 0, 2);
			%>
			<tr><%
				writeColouredHeaderSchnips(out, names);
				%>
				<th>Type</th>
				<th>Media</th>
				<th>Since</th>
				<th>Class</th>
			</tr><%
	
			for(final MediaPath path : media)
			{
				final String type = path.getType().getID();
				final String name = path.getName();
				final int[] data = {
					hide(0, path.exception.get()),
					hide(0, path.notAnItem.get()),
					hide(0, path.noSuchItem.get()),
					hide(0, path.isNull.get()),
					hide(0, path.notComputable.get()),
					hide(0, path.notModified.get()),
					hide(0, path.delivered.get()),
				};
	
				%>
			<tr><%
				writeColouredData(out, data);
				%>
				<td class="text"><%=type%></td>
				<td class="text"><a href="<%=cop.toMedia(path)%>"><%=name%></a></td>
				<td class="text"><%=cop.format(path.getStart())%></td>
				<td class="text"><%
					final String className = path.getClass().getName();
					if(className.startsWith("com.exedio.cope.pattern."))
					{
						%><a href="http://cope.sourceforge.net/api/<%=
							className.replace('.', '/')%>.html" target="_blank"><%=
							path.getClass().getSimpleName()%></a><%
					}
					else
					{
						%><%=className%><%
					}
					if(path instanceof MediaRedirect)
					{
						final MediaRedirect redirect = (MediaRedirect)path;
						%>(<%=redirect.getTarget().getName()%>)<%
					}
					else if(path instanceof MediaThumbnail)
					{
						final MediaThumbnail thumbnail = (MediaThumbnail)path;
						%>(<%=thumbnail.getSource().getName()%>,<%=thumbnail.getBoundX()%>,<%=thumbnail.getBoundY()%>)<%
					}
					if(path instanceof MediaFilter)
					{
						final MediaFilter filter = (MediaFilter)path;
						final TreeSet contentTypes = new TreeSet<String>(filter.getSupportedSourceContentTypes());
						%><br>supports <%=contentTypes%><%
					}
				%></td>
			</tr><%
			}
		%>
		</table><%
	}

	final static void writeBody(
				final MediaCop cop,
				final PrintStream out,
				final List<? extends Item> items,
				final Media other)
	{
		final MediaPath media = cop.media;
		final CachedMedia mediaLastModified = media instanceof CachedMedia ? (CachedMedia)media : null;
		final Media mediaLength = media instanceof Media ? (Media)media : null;
		final boolean inlineMedia = cop.inlineMedia;
		final boolean inlineOther = cop.inlineOther;
		
		int columns = 3;
		if(mediaLastModified!=null)
			columns++;
		if(mediaLength!=null)
			columns++;
		if(other!=null)
			columns++;
		
		%>
		<table>
			<tr><th class="caption" colspan="<%=columns%>"><%=media.getID()%> (first 50)</th></tr>
			<tr>
				<th>Item</th>
				<th>URL <a href="<%=cop.toggleInlineMedia()%>">IN</a></th>
				<th>Content Type</th><%
				if(mediaLastModified!=null)
				{
				%>
				<th>Last Modified</th><%
				}
				if(mediaLength!=null)
				{
				%>
				<th>Length</th><%
				}
				if(other!=null)
				{
				%>
				<th><a href="<%=
					new MediaCop(other, inlineOther, false)%>"><%=other.getName()%></a> <a href="<%=
					cop.toggleInlineOther()%>">IN</a></th><%
				}
			%>
			</tr><%
	
			for(final Item item : items)
			{
				final String contentType = media.getContentType(item);
				%>
			<tr>
				<td class="text"><%=item.getCopeID()%></td>
				<td class="text"><% writeURL(out, media.getURL(item), contentType, inlineMedia); %></td>
				<td class="text"><%if(contentType!=null){%><%=contentType%><%}%></td><%
				if(mediaLastModified!=null)
				{
				%>
				<td><%=cop.format(mediaLastModified.getLastModified(item))%></td><%
				}
				if(mediaLength!=null)
				{
				%>
				<td><%=mediaLength.getLength(item)%></td><%
				}
				if(other!=null)
				{
				%>
				<td class="text"><% writeURL(out, other.getURL(item), other.getContentType(item), inlineOther); %></td><%
				}
				%>
			</tr><%
			}
		%>
		</table><%
	}
	
	private static final void writeURL(final PrintStream out, final String url, final String contentType, final boolean inline)
	{
		if(url!=null)
		{
			%><a href="<%=url%>"><%
			if(inline && contentType!=null && contentType.startsWith("image/"))
			{
				%><img src="<%=url%>"><%
			}
			else
			{
				%><%=MediaCop.fn(url)%><%
			}
			%></a><%
		}
	}
	
	private static final int COLORS = 2;
	
	private static final void writeColouredHeader(final PrintStream out, final String[] names, final int preColumns, final int postColumns)
	{
			%>
			<tr><%
				if(preColumns>0)
				{
				%>
				<th colspan="<%=preColumns%>" rowspan="<%=names.length%>"></th><%
				}
				%>
				<th colspan="<%= names.length + postColumns %>" class="color0"><%=names[0]%></th>
			</tr><%
	
			for(int i = 1; i<names.length; i++)
			{
			%>
			<tr>
				<th rowspan="<%= names.length - i + 1 %>" class="color<%= (i-1)%COLORS %>"></th>
				<th colspan="<%= names.length - i + postColumns %>" class="color<%= i%COLORS %>"><%=names[i]%></th>
			</tr><%
			}
	}

	private static final void writeColouredHeaderSchnips(final PrintStream out, final String[] names)
	{
				%>
				<th class="color<%= (names.length-1)%COLORS %>"></th><%
	}
	
	private static final int EMPTY = -91872356;
	
	private static final int hide(final int emptyNumber, final int number)
	{
		return (number==emptyNumber) ? EMPTY : number;
	}
	
	private static final void writeColouredData(final PrintStream out, final int[] data)
	{
			for(int i = 0; i<data.length; i++)
			{
			%>
				<td class="color<%= i%COLORS %>"><%
				switch(data[i])
				{
				case EMPTY:
					%>&nbsp;<%
					break;
				default:
					%><%=data[i]%><%
					break;
				}
				%></td><%
			}
	}
}%>