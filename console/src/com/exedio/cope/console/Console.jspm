<%
/*
 * Copyright (C) 2004-2006  exedio GmbH (www.exedio.com)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package com.exedio.cope.console;

import java.io.IOException;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.TreeSet;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.exedio.cope.Item;
import com.exedio.cope.ItemFunction;
import com.exedio.cope.Migration;
import com.exedio.cope.Model;
import com.exedio.cope.Properties;
import com.exedio.cope.Type;
import com.exedio.cope.pattern.CachedMedia;
import com.exedio.cope.pattern.Media;
import com.exedio.cope.pattern.MediaFilter;
import com.exedio.cope.pattern.MediaPath;
import com.exedio.cope.pattern.MediaRedirect;
import com.exedio.cope.pattern.MediaThumbnail;
import com.exedio.cope.util.CacheInfo;
import com.exedio.cope.util.CacheQueryInfo;
import com.exedio.cope.util.ConnectionPoolInfo;
import com.exedio.cope.util.PoolCounter;

final class Console_Jspm
{
	static final void write(
				final PrintStream out,
				final HttpServletRequest request,
				final HttpServletResponse response,
				final Model model,
				final ConsoleCop cop)
		throws IOException
	{
		try
		{
%><!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"  "http://www.w3.org/TR/html4/loose.dtd">
<html>
	<head>
		<meta http-equiv="content-type" content="text/html; charset=<%=ConsoleServlet.ENCODING%>">
		<title>COPE Console - <%=cop.name%></title>
		<link rel="STYLESHEET" type="text/css" href="<%=ConsoleServlet.stylesheet.url(request)%>"><%
		cop.writeHead(request, out);
		%>
	</head>
	<body>
		<a href="http://www.exedio.com/" target="_blank"><img src="<%=ConsoleServlet.logo.url(request)%>" width="200" height="66" align="right"></a>
		<h1><a href="http://cope.sourceforge.net/" target="_blank">COPE</a> Console</h1>
		<p><%
		
		final ConsoleCop[] tabs = cop.getTabs();
		for(int i = 0; i<tabs.length; i++)
		{
			final ConsoleCop tab = tabs[i];
			if(cop.name.equals(tab.name))
			{
			%>
			| <b><%=tab.name%></b><%
			}
			else
			{
			%>
			| <a href="<%=tab%>"><%=tab.name%></a><%
			}
		}
		%>
		</p>
		<hr><%
		cop.writeBody(out, model, request);
		%>
		<hr>
		<small>request: <%=cop.getStart()%> - <%=cop.getEnd()%> (<%=cop.getDuration()%>ms)</small>
	</body>
</html>
<%
		}
		catch(Throwable t)
		{
			// an exception occuring after writing to HttpResponse.getOutputStream
			// does not cause the stacktrace to be displayed in the web page,
			// so we do this here.
			response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
			%>
			<div class="message">Exception while writing response !!!</div>
			<pre><%
			t.printStackTrace(out);
			%>
			</pre><%
		}
		
	}

	final static void writeBody(
			final TypeColumnCop cop,
			final PrintStream out,
			final ArrayList<ItemFunction> functions,
			final boolean test)
		throws IOException
	{
		int sumCount = 0;
		%>
		<ol><%
		for(final ItemFunction function : functions)
		{
			%>
			<li><%=function.toString()%><%
			if(test)
			{
				out.flush();
				final long startMillis = System.currentTimeMillis();
				final int count = function.checkTypeColumn();
				final long finishMillis = System.currentTimeMillis();
				sumCount += count;
				if(count!=0)
				{
					%>: <b>bad tupels: <%=count%>.</b><%
				}
				else
				{
					%>: ok.<%
				}
				%> (<%=(finishMillis-startMillis)%>ms)<%
			}
			%></li><%
		}
		%>
		</ol><%
		if(test)
		{
		%>
		<p>Overall: <%
			if(sumCount!=0)
			{
				%><b>bad tupels: <%=sumCount%>.</b><%
			}
			else
			{
				%>ok.<%
			}
			%></p><%
		}
		%>
		<form action="<%=cop%>" method="POST">
			<input type="submit" name="<%=cop.TEST%>" value="test all" />
		</form><%
	}
	
	final static void writeBodyDisabled(
			final MigrationCop cop,
			final PrintStream out)
		throws IOException
	{
		%>
		Migrations are not enabled for this model.
		<br>
		Use <a
			href="home/api/com/exedio/cope/Model.html#Model(com.exedio.cope.Migration[],com.exedio.cope.Type[])"
			target="_top">migration constructor</a> to enable.<%
	}
	
	final static void writeBody(
			final MigrationCop cop,
			final PrintStream out,
			final int oldest, final int latest, final int current,
			Map<Integer, Migration> migrations,
			Map<Integer, String> logs)
		throws IOException
	{
		%>
		<table class="properties">
			<tr><th colspan="3">Migrations</th></tr>
			<tr><th>version</th><th>declared</th><th>logged</th></tr><%
			for(int v = latest; v>=oldest; v--)
			{
				final Migration migration = migrations.get(v);
				final String log = logs.get(v);
			%>
			<tr><td><%=v%><%
				if(v==current){%>X<%}
				%></td><td><%
				if(migration!=null){ %><%=migration.getComment()%><% } else { %>-<% }
				%></td><td><%
				if(log!=null){ %><%=log%><% } else { %>-<% }
				%></td></tr><%
			}
			%>
		</table><%
	}
	
	final static void writeBody(
			final ConnectionStatsCop cop,
			final PrintStream out,
			final ConnectionPoolInfo info)
		throws IOException
	{
		final PoolCounter poolCounter = info.getCounter();
		final String[] names = {
			"Loss = 100 * Destroy / Get",
			"Idle",
			"Idle Max",
			"Create",
			"Destroy",
		};
		%>
		<table class="statistics">
			<tr>
				<th colspan="7">Connection Pool Statistics</th>
			</tr>
			<tr>
				<th>Since</th>
				<td colspan="6"><%=cop.format(poolCounter.getStart())%></td>
			</tr>
			<tr>
				<th>Idle</th>
				<td colspan="6"><%=info.getIdleCounter()%></td>
			</tr>
			<tr>
				<th>Get</th>
				<td colspan="6"><%=poolCounter.getGetCounter()%></td>
			</tr>
			<tr>
				<th>Put</th>
				<td colspan="6"><%=poolCounter.getPutCounter()%></td>
			</tr><%
			writeColouredHeader(out, names, 1);
			%>
			<tr>
				<th>maxIdle</th><%
				writeColouredHeaderSchnips(out, names);
				%>
				<th>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</th>
			</tr><%
			for(Iterator i = poolCounter.getPools().iterator(); i.hasNext(); )
			{
				final PoolCounter.Pool pool = (PoolCounter.Pool)i.next();
				final boolean inconsistent = !pool.isConsistent();
				final int[] data = {
						pool.getLoss(),
						pool.getIdleCount(),
						pool.getIdleCountMax(),
						pool.getCreateCounter(),
						pool.getDestroyCounter(),
					};
			%>
			<tr<%if(inconsistent){%> class="inconsistent"<%}%>>
				<td><%=pool.getSize()%><%if(inconsistent){%>!<%}%></td><%
				writeColouredData(out, data);
				%>
			</tr><%
			}
		%>
		</table><%
	}

	final static void writeBody(
			final CacheStatsCop cop,
			final PrintStream out,
			final CacheInfo[] infos)
		throws IOException
	{
		final String[] names = {
			"Max Number Of Items In Cache",
			"Number Of Items In Cache",
			"Hits",
			"Misses",
			"Age Min (s)",
			"Age Average (s)",
			"Age Max (s)",
		};
		final Runtime rt = Runtime.getRuntime();
		%>
		<table class="statistics">
			<tr>
				<th colspan="<%=names.length+2%>">Cache Statistics</th>
			</tr>
			<tr><th>Max Memory</th><td colspan="<%=names.length+1%>"><%=rt.maxMemory()%></td></tr>
			<tr><th>Total Memory</th><td colspan="<%=names.length+1%>"><%=rt.totalMemory()%></td></tr>
			<tr><th>Free Memory</th><td colspan="<%=names.length+1%>"><%=rt.freeMemory()%></td></tr><%
			writeColouredHeader(out, names, 1);
			%>
			<tr>
				<th>Type</th><%
				writeColouredHeaderSchnips(out, names);
				%>
				<th>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</th>
			</tr><%
			for(int i = 0; i<infos.length; i++)
			{
				final CacheInfo info = infos[i];
				final int[] data = {
						info.getMapSizeLimit(),
						info.getNumberOfItemsInCache(),
						info.getHits(),
						info.getMisses(),
						(int)(info.getAgeMinMillis()/1000l),
						(int)(info.getAgeAverageMillis()/1000l),
						(int)(info.getAgeMaxMillis()/1000l),
					};
			%>
			<tr>
				<td><%=info.getType().getID()%></td><%
				writeColouredData(out, data);
				%>
				<td></td>
			</tr><%
			}
		%>
		</table><%
	}

	final static void writeBody(
			final QueryCacheStatsCop cop,
			final PrintStream out,
			final int[] queryInfos,
			final CacheQueryInfo[] queryHistogram,
			final boolean queryHistogramAccurate)
		throws IOException
	{
		final Runtime rt = Runtime.getRuntime();
		%>
		<table class="statistics">
			<tr>
				<th colspan="2">Query Cache Statistics</th>
			</tr>
			<tr><th>Hits</th><td><%=queryInfos[0]%></td></tr>
			<tr><th>Misses</th><td><%=queryInfos[1]%></td></tr>
			<tr><th>Queries in Cache</th><td><%=queryInfos[2]%></td></tr>
			<tr><th>Max Memory</th><td><%=rt.maxMemory()%></td></tr>
			<tr><th>Total Memory</th><td><%=rt.totalMemory()%></td></tr>
			<tr><th>Free Memory</th><td><%=rt.freeMemory()%></td></tr>
		</table><%

		if(!queryHistogramAccurate)
		{
		%>
		<div class="message">
			<b>Values not accurate:</b>
			Property <tt><%=Properties.CACHE_QUERY_HISTOGRAM%></tt> is not enabled.
			Therefore the column <b>Hits</b> counts queries only,
			for which <tt>Query#enableMakeStatementInfo()</tt> has been set.
		</div><%
		}

		%>
		<table class="statistics">
			<tr><th colspan="2">Query Cache Histogram</th></tr>
			<tr><th>Hits</th><th>Query</th></tr><%

		for(int i = 0; i<queryHistogram.length; i++)
		{
			final CacheQueryInfo info = queryHistogram[i];
			%>
			<tr><th><%=info.getHits()%></th><td><%=info.getQuery()%></td></tr><%
		}
		%>
		</table><%
	}

	final static void writeBody(
			final PrimaryKeysCop cop,
			final PrintStream out,
			final Map<Type, int[]> primaryKeys)
		throws IOException
	{
		%>
		<table class="properties">
			<tr>
				<th colspan="2">Primary Keys</th>
			</tr>
			<tr><th>Type</th><th>Info</th></tr><%
			for(final Type type : primaryKeys.keySet())
			{
			%>
			<tr><td><%=type.getID()%></td><td><%
				final int[] info = primaryKeys.get(type);
				for(int i : info)
				{
					switch(i)
					{
						case Integer.MIN_VALUE: %>MIN <% break;
						case Integer.MAX_VALUE: %>MAX <% break;
						default:%><%=i%> <%
					}
				}
				%></td></tr><%
			}
		%>
		</table><%
	}

	final static void writeBody(
			final MediaStatsCop cop,
			final PrintStream out,
			final Collection<MediaPath> media)
		throws IOException
	{
		final String[] names = {
			"Exception (500)",
			"Not An Item (404)",
			"No Such Item (404)",
			"Is Null (404)",
			"Not Computable (404)",
			"Not Modified (304)",
			"Delivered (200/301)",
		};
		%>
		<table class="statistics">
			<tr><th colspan="<%=names.length+3%>">Media Statistics</th></tr>
			<tr><th>No Such Path (404)</th><td colspan="<%=names.length+2%>"><%=MediaPath.noSuchPath.get()%></td></tr><%
			writeColouredHeader(out, names, 2);
			%>
			<tr>
				<th>Type</th>
				<th>Media</th><%
				writeColouredHeaderSchnips(out, names);
				%>
				<th>Since</th>
				<th>Class</th>
			</tr><%
	
			for(final MediaPath path : media)
			{
				final String type = path.getType().getID();
				final String name = path.getName();
				final int[] data = {
					path.exception.get(),
					path.notAnItem.get(),
					path.noSuchItem.get(),
					path.isNull.get(),
					path.notComputable.get(),
					path.notModified.get(),
					path.delivered.get(),
				};
	
				%>
			<tr>
				<td><%=type%></td>
				<td><a href="<%=cop.toMedia(path)%>"><%=name%></a></td><%
				writeColouredData(out, data);
				%>
				<td><%=cop.format(path.getStart())%></td>
				<td><%
					final String className = path.getClass().getName();
					if(className.startsWith("com.exedio.cope.pattern."))
					{
						%><a href="http://cope.sourceforge.net/api/<%=
							className.replace('.', '/')%>.html" target="_blank"><%=
							path.getClass().getSimpleName()%></a><%
					}
					else
					{
						%><%=className%><%
					}
					if(path instanceof MediaRedirect)
					{
						final MediaRedirect redirect = (MediaRedirect)path;
						%>(<%=redirect.getTarget().getName()%>)<%
					}
					else if(path instanceof MediaThumbnail)
					{
						final MediaThumbnail thumbnail = (MediaThumbnail)path;
						%>(<%=thumbnail.getSource().getName()%>,<%=thumbnail.getBoundX()%>,<%=thumbnail.getBoundY()%>)<%
					}
					if(path instanceof MediaFilter)
					{
						final MediaFilter filter = (MediaFilter)path;
						final TreeSet contentTypes = new TreeSet<String>(filter.getSupportedSourceContentTypes());
						%><br>supports <%=contentTypes%><%
					}
				%></td>
			</tr><%
			}
		%>
		</table><%
	}

	final static void writeBody(
				final MediaCop cop,
				final PrintStream out,
				final List<? extends Item> items,
				final Media other)
		throws IOException
	{
		final MediaPath media = cop.media;
		final CachedMedia mediaLastModified = media instanceof CachedMedia ? (CachedMedia)media : null;
		final Media mediaLength = media instanceof Media ? (Media)media : null;
		final boolean inlineMedia = cop.inlineMedia;
		final boolean inlineOther = cop.inlineOther;
		
		int columns = 3;
		if(mediaLastModified!=null)
			columns++;
		if(mediaLength!=null)
			columns++;
		if(other!=null)
			columns++;
		
		%>
		<table class="properties">
			<tr><th colspan="<%=columns%>"><%=media.getID()%> (first 50)</th></tr>
			<tr>
				<th>Item</th>
				<th>URL <a href="<%=cop.toggleInlineMedia()%>">IN</a></th>
				<th>Content Type</th><%
				if(mediaLastModified!=null)
				{
				%>
				<th>Last Modified</th><%
				}
				if(mediaLength!=null)
				{
				%>
				<th>Length</th><%
				}
				if(other!=null)
				{
				%>
				<th><a href="<%=
					new MediaCop(other, inlineOther, false)%>"><%=other.getName()%></a> <a href="<%=
					cop.toggleInlineOther()%>">IN</a></th><%
				}
			%>
			</tr><%
	
			for(final Item item : items)
			{
				final String contentType = media.getContentType(item);
				%>
			<tr>
				<td><%=item.getCopeID()%></td>
				<td><% writeURL(out, media.getURL(item), contentType, inlineMedia); %></td>
				<td><%if(contentType!=null){%><%=contentType%><%}%></td><%
				if(mediaLastModified!=null)
				{
				%>
				<td><%=cop.format(mediaLastModified.getLastModified(item))%></td><%
				}
				if(mediaLength!=null)
				{
				%>
				<td><%=mediaLength.getLength(item)%></td><%
				}
				if(other!=null)
				{
				%>
				<td><% writeURL(out, other.getURL(item), other.getContentType(item), inlineOther); %></td><%
				}
				%>
			</tr><%
			}
		%>
		</table><%
	}
	
	private static final void writeURL(final PrintStream out, final String url, final String contentType, final boolean inline)
	{
		if(url!=null)
		{
			%><a href="<%=url%>"><%
			if(inline && contentType!=null && contentType.startsWith("image/"))
			{
				%><img src="<%=url%>"><%
			}
			else
			{
				%><%=MediaCop.fn(url)%><%
			}
			%></a><%
		}
	}
	
	private static final void writeColouredHeader(final PrintStream out, final String[] names, final int preColumns)
	{
			%>
			<tr>
				<th colspan="<%=preColumns%>" rowspan="<%=names.length%>"></th>
				<th colspan="<%=names.length + 1%>" class="colored1"><%=names[0]%></th>
			</tr><%
	
			for(int i = 1; i<names.length; i++)
			{
			%>
			<tr>
				<th rowspan="<%=names.length-i+1%>" class="colored<%=i%>"></th>
				<th colspan="<%=names.length-i+1%>" class="colored<%=i+1%>"><%=names[i]%></th>
			</tr><%
			}
	}

	private static final void writeColouredHeaderSchnips(final PrintStream out, final String[] names)
	{
				%>
				<th class="colored<%=names.length%>"></th><%
	}

	private static final void writeColouredData(final PrintStream out, final int[] data)
	{
			for(int j = 0; j<data.length; j++)
			{
			%>
				<td class="colored<%=j+1%>"><%
				switch(data[j])
				{
				case 0:
					%>&nbsp;<%
					break;
				case Integer.MIN_VALUE:
					%>-<%
					break;
				default:
					%><%=data[j]%><%
					break;
				}
				%></td><%
			}
	}

}%>