<%
/*
 * Copyright (C) 2004-2009  exedio GmbH (www.exedio.com)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package com.exedio.cope.console;

import static com.exedio.cope.console.Format.format;

import java.io.File;
import java.net.MalformedURLException;

import com.exedio.cope.ConnectProperties;
import com.exedio.cope.Model;
import com.exedio.cope.misc.ConnectToken;

final class Connect_Jspm extends Console_Jspm
{
	final static void writeHead(final Out out)
	{
	%>
		<script>
			function toggleUnspecified(image)
			{
				var imageSrc = image.src;
				if(imageSrc.substring(imageSrc.length-8)=="true.png")
				{
					image.src = imageSrc.substring(0, imageSrc.length-8) + "false.png";
					var rows = document.body.getElementsByTagName("tr");
					for(i=0; i<rows.length; i++)
					{
						var row = rows[i];
						if(row.className=="unspecified")
							row.style.display = "none";
					}
				}
				else
				{
					image.src = imageSrc.substring(0, imageSrc.length-9) + "true.png";
					var rows = document.body.getElementsByTagName("tr");
					for(i=0; i<rows.length; i++)
					{
						var row = rows[i];
						if(row.className=="unspecified")
							row.style.display = "table-row";
					}
				}
			}
		</script><%
	}
	
	final static void writeBody(
				final Out out,
				final ConnectCop cop,
				final ConnectProperties properties,
				final Model model,
				final String sourceContent)
	{
		%>
		<table>
			<caption>Connect Properties</caption>
			<tr>
				<th>Initialized</th>
				<td class="text"><%=model.getInitializeDate()%></td>
			</tr>
			<tr>
				<th>Connected</th>
				<td class="text"><%=model.getConnectDate()%></td>
			</tr>
			<tr>
				<th colspan="2"><img class="check" onClick="toggleUnspecified(this)" src="<%=ConsoleServlet.checkFalse%>"> show unspecified</th>
			</tr><%
			for(final ConnectProperties.Field field : properties.getFields())
			{
				final boolean fieldSpecified = field.isSpecified();
				if(!field.hasHiddenValue())
				{
			%>
			<tr<%
				if(!fieldSpecified)
				{
					%> class="unspecified"<%
				}
				%>>
				<th><%=field.getKey()%></th>
				<td class="text"><%
					final Object defaultValue = field.getDefaultValue();
					if(defaultValue!=null && fieldSpecified)
					{
						%><%=
							cop.formatObject(field.getValue())
							%> <span style="font-size:8pt;">(<%=
							cop.formatObject(defaultValue)
							%>)</span><%
					}
					else if(field instanceof ConnectProperties.FileField)
					{
						final File file = ((ConnectProperties.FileField)field).getFileValue();
						if(file!=null)
						{
							try
							{
								final String fileURL = file.toURI().toURL().toString();
								%><a href="<%=
									fileURL
									%>"><%=
									file.getAbsolutePath()
									%></a><br><span style="font-size:8pt;">(link works only if the server is running locally).</span><%
							}
							catch(MalformedURLException e)
							{
								%><b>n/a</b><%
							}
						}
						else
						{
							%><b>n/a</b><%
						}
					}
					else
					{
						%><%=cop.formatObject(field.getValue())%><%
					}
				%></td>
			</tr><%
				}
			}
			%>
		</table>
		<hr>
		<table>
			<caption>Capabilities</caption>
			<tr>
				<th>Supports Check Constraints</th>
				<td class="text"><%if(model.supportsCheckConstraints()){%>yes<%}else{%>no<%}%></td>
			</tr>
			<tr>
				<th>Supports Sequences</th>
				<td class="text"><%if(model.supportsSequences()){%>yes<%}else{%>no<%}%></td>
			</tr>
			<tr>
				<th>Supports Empty Strings</th>
				<td class="text"><%if(model.supportsEmptyStrings()){%>yes<%}else{%>no<%}%></td>
			</tr>
			<tr>
				<th>Nulls Are Sorted</th>
				<td class="text"><%if(model.nullsAreSortedLow()){%>low<%}else{%>high<%}%></td>
			</tr>
		</table>
		<hr>
		<table>
			<caption>Open Connect Tokens</caption>
			<tr>
				<th>#</th>
				<th>ID</th>
				<th>Issue Date</th>
				<th>Name</th>
			</tr><%
			int number = 0;
			for(final ConnectToken token : ConnectToken.getTokens(model))
			{
				final String name = token.getName();
			%>
			<tr>
				<td><%=format(number++)%></td>
				<td><% if(token.didConnect()){%>&#187;&nbsp;<%} %><%=format(token.getID())%></td>
				<td class="text"><%=token.getIssueDate()%></td>
				<td class="text"><% if(name!=null) { %><%=name%><% } %></td>
			</tr><%
			}
		%>
		</table>
		<hr>
		<table>
			<caption>Connect Properties Source</caption>
			<tr>
				<td class="text"><%=properties.getSource()%></td>
			</tr><%

			if(sourceContent!=null)
			{
			%>
			<tr>
				<td class="text">
					<pre><%=sourceContent%></pre>
				</td>
			</tr><%
			}
		%>
		</table><%
	}
}
%>