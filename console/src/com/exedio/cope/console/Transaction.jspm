<%
/*
 * Copyright (C) 2004-2008  exedio GmbH (www.exedio.com)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package com.exedio.cope.console;

import java.io.PrintStream;
import java.util.Date;

import com.exedio.cope.Transaction;
import com.exedio.cope.TransactionCounters;

import static com.exedio.cops.XMLEncoder.encode;

final class Transaction_Jspm extends Console_Jspm
{
	final static void writeHead(final PrintStream out)
	{
	%>
		<style>
			span.expand
			{
				font-size:80%;
			}
			input
			{
				font-size:7pt;
			}
		</style>
		<script>
			function toggleStacktrace(image,more)
			{
				var imageSrc = image.src;
				var moreElement = document.getElementById(more);
				if(imageSrc.substring(imageSrc.length-8)=="true.png")
				{
					image.src = imageSrc.substring(0, imageSrc.length-8) + "false.png";
					moreElement.style.display = "none";
				}
				else
				{
					image.src = imageSrc.substring(0, imageSrc.length-9) + "true.png";
					moreElement.style.display = "inline";
				}
			}
		</script><%
	}
	
	final static void writeBody(
			final PrintStream out,
			final TransactionCop cop,
			final long nextId,
			final Date lastStartDate,
			final TransactionCounters transactionCounters,
			final Transaction[] openTransactions,
			final Thread[] threads,
			final long[] threadIds,
			final String[] threadNames,
			final int[] threadPriorities,
			final Thread.State[] threadStates,
			final StackTraceElement[][] stacktraces,
			final boolean recordCommits,
			final Commit[] commits)
	{
		assert openTransactions.length==threads.length;
		assert openTransactions.length==threadIds.length;
		assert openTransactions.length==threadNames.length;
		assert openTransactions.length==threadPriorities.length;
		assert openTransactions.length==threadStates.length;
		assert openTransactions.length==stacktraces.length;
		%>
		<table style="float:left;">
			<caption>Transaction Statistics</caption>
			<tr><th>Next ID</th><td><%=cop.format(nextId)%></td></tr>
			<tr><th>Last Start Date</th><td><%
				if(lastStartDate!=null)
				{
					%><%=cop.format(lastStartDate)%><%
				}
				else
				{
					%>none started yet<%
				}
				%></td></tr>
		</table>
		<table>
			<caption>Transaction Counters</caption>
			<tr>
				<td rowspan="2"></td>
				<th rowspan="2">All</th>
				<th colspan="2">Connection</th>
			</tr>
			<tr>
				<th>Without</th>
				<th>With</th>
			</tr>
			<tr>
				<th>Commit</th>
				<td><%=cop.format(transactionCounters.getCommit())%></td>
				<td><%=cop.format(transactionCounters.getCommitWithoutConnection())%></td>
				<td><%=cop.format(transactionCounters.getCommitWithConnection())%></td>
			</tr>
			<tr>
				<th>Rollback</th>
				<td><%=cop.format(transactionCounters.getRollback())%></td>
				<td><%=cop.format(transactionCounters.getRollbackWithoutConnection())%></td>
				<td><%=cop.format(transactionCounters.getRollbackWithConnection())%></td>
			</tr>
		</table>
		<hr>
		<table>
			<caption>Open Transactions</caption><%
			
		if(openTransactions.length==0)
		{
			%>
			<tr><td class="text">There are no transactions currently running.</td></tr><%
		}
		else
		{
			%>
			<tr>
				<th colspan="4">Transaction</th>
				<th colspan="5">Bound Thread</th>
			</tr>
			<tr>
				<th>#</th>
				<th>ID</th>
				<th>Started</th>
				<th>Name</th>
				<th>ID</th>
				<th>Name</th>
				<th>Prio</th>
				<th>State</th>
				<th>Stacktrace</th>
			</tr><%
			
			for(int n = 0; n<openTransactions.length; n++)
			{
				final Transaction t = openTransactions[n];
				final Thread thread = threads[n];
			%>
			<tr>
				<td><%=cop.format(n)%></td>
				<td><%=cop.format(t.getID())%></td>
				<td><%=cop.format(t.getStartDate())%></td>
				<td class="text"><%=encode(t.getName())%></td>
				<%
				if(thread!=null)
				{
				%><td><%=cop.format(threadIds[n])%></td>
				<td class="text"><%=encode(threadNames[n])%></td>
				<td><%=threadPriorities[n]%></td>
				<td class="text"><%=threadStates[n].name().toLowerCase()%></td>
				<td class="text"><%
					final StackTraceElement[] sts = stacktraces[n];
					if(sts!=null && sts.length>0)
					{
					%>
					<img class="node" onClick="toggleStacktrace(this,'more<%=n%>')" src="<%=ConsoleServlet.nodeFalse%>">
					<%=sts[0].toString()%>
					<span id="more<%=n%>" class="expand"><%
						
						for(int i = 1; i<sts.length; i++)
						{
							final StackTraceElement st = sts[i];
						%>
						<br><%=st.toString()%><%
						}
						%>
					</span>
				<%
					}
				}
				else
				{
					%><td class="text" colspan="5">none<%
				}
				%></td>
			</tr><%
			}
		}
		%>
		</table>
		<hr><%
		writeRecordingForm(out, cop, recordCommits);
		%>
		<table>
			<caption>Modifying Committed Transactions</caption><%
		
		if(commits.length==0)
		{
			%>
			<tr><td class="text">There are no recorded modifying committed transactions.</td></tr><%
		}
		else
		{
			%>
			<tr>
				<th>#</th>
				<th>ID</th>
				<th>Started</th>
				<th>Elpsd.</th>
				<th>Name</th>
				<th>Modified Items</th>
			</tr><%
			
			for(int n = 0; n<commits.length; n++)
			{
				final Commit commit = commits[n];
			%>
			<tr>
				<td><%=cop.format(n)%></td>
				<td><%=cop.format(commit.id)%></td>
				<td><%=cop.format(commit.getStartDate())%></td>
				<td><%=cop.format(commit.elapsed)%></td>
				<td class="text"><%=encode(commit.name)%></td>
				<td class="text"><%=encode(commit.modifiedItems)%></td>
			</tr><%
			}
		}
		%>
		</table><%
		
		if(commits.length!=0)
			writeRecordingForm(out, cop, recordCommits);
	}
	
	private static final void writeRecordingForm(
					final PrintStream out,
					final TransactionCop cop,
					final boolean recordCommits)
	{
		%>
		<form action="<%=cop%>" method="POST">
			recording: <% if(recordCommits){%>enabled<%}else{%>disabled<%}%>
			<input type="submit" name="<%=cop.ENABLE%>"  value="enable" />
			<input type="submit" name="<%=cop.DISABLE%>" value="disable" />
			<input type="submit" name="<%=cop.CLEAR%>"   value="clear" />
		</form><%
	}
}%>