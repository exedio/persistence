/*
 * Copyright (C) 2004-2011  exedio GmbH (www.exedio.com)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package com.exedio.cope.instrument;

import static java.lang.reflect.Modifier.FINAL;
import static java.lang.reflect.Modifier.PRIVATE;
import static java.lang.reflect.Modifier.PROTECTED;
import static java.lang.reflect.Modifier.PUBLIC;
import static java.lang.reflect.Modifier.STATIC;
import static java.text.MessageFormat.format;

import java.lang.reflect.Modifier;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.SortedSet;

import com.exedio.cope.ActivationParameters;
import com.exedio.cope.BooleanField;
import com.exedio.cope.Feature;
import com.exedio.cope.Item;
import com.exedio.cope.SetValue;
import com.exedio.cope.Type;
import com.exedio.cope.TypesBound;

final class Generator
{
	private static final String SET_VALUE = SetValue.class.getName();
	private static final String ITEM = Item.class.getName();
	private static final String TYPE_NAME = Type.class.getName();
	private static final String TYPES_BOUND_NAME = TypesBound.class.getName();
	private static final String ACTIVATION = ActivationParameters.class.getName();

	private static final String CONSTRUCTOR_INITIAL = "Creates a new {0} with all the fields initially needed.";
	private static final String CONSTRUCTOR_INITIAL_PARAMETER = "the initial value for field {0}.";
	private static final String CONSTRUCTOR_INITIAL_CUSTOMIZE = "It can be customized with the tags " +
																					"<tt>@" + CopeType.TAG_INITIAL_CONSTRUCTOR + ' ' +
																					Option.TEXT_VISIBILITY_PUBLIC + '|' +
																					Option.TEXT_VISIBILITY_PACKAGE + '|' +
																					Option.TEXT_VISIBILITY_PROTECTED + '|' +
																					Option.TEXT_VISIBILITY_PRIVATE + '|' +
																					Option.TEXT_NONE +
																					"</tt> " +
																					"in the class comment and " +
																					"<tt>@" + CopeFeature.TAG_INITIAL + "</tt> in the comment of fields.";
	private static final String CONSTRUCTOR_GENERIC = "Creates a new {0} and sets the given fields initially.";
	private static final String CONSTRUCTOR_GENERIC_CUSTOMIZE = "It can be customized with the tag " +
																					"<tt>@" + CopeType.TAG_GENERIC_CONSTRUCTOR + ' ' +
																					Option.TEXT_VISIBILITY_PUBLIC + '|' +
																					Option.TEXT_VISIBILITY_PACKAGE + '|' +
																					Option.TEXT_VISIBILITY_PROTECTED + '|' +
																					Option.TEXT_VISIBILITY_PRIVATE + '|' +
																					Option.TEXT_NONE +
																					"</tt> " +
																					"in the class comment.";
	private static final String CONSTRUCTOR_ACTIVATION = "Activation constructor. Used for internal purposes only.";
	private static final String FINDER_UNIQUE = "Finds a {0} by it''s unique fields.";
	private static final String FINDER_UNIQUE_PARAMETER = "shall be equal to field {0}.";
	private static final String FINDER_UNIQUE_RETURN = "null if there is no matching item.";
	private static final String TYPE = "The persistent type information for {0}.";
	private static final String TYPE_CUSTOMIZE = "It can be customized with the tag " +
																"<tt>@" + CopeType.TAG_TYPE + ' ' +
																Option.TEXT_VISIBILITY_PUBLIC + '|' +
																Option.TEXT_VISIBILITY_PACKAGE + '|' +
																Option.TEXT_VISIBILITY_PROTECTED + '|' +
																Option.TEXT_VISIBILITY_PRIVATE + '|' +
																Option.TEXT_NONE +
																"</tt> " +
																"in the class comment.";
	private static final String GENERATED = "This feature has been generated by the cope instrumentor and will be overwritten by the build process.";

	/**
	 * All generated class features get this doccomment tag.
	 */
	static final String TAG_GENERATED = CopeFeature.TAG_PREFIX + "generated";


	private final JavaFile javaFile;
	private final StringBuilder output;
	private final String lineSeparator;
	private final boolean longJavadoc;
	private final String finalArgPrefix;
	private final boolean suppressUnusedWarningOnPrivateActivationConstructor;
	private final boolean serialVersionUID;


	Generator(final JavaFile javaFile, final StringBuilder output, final Params params)
	{
		this.javaFile = javaFile;
		this.output = output;

		final String systemLineSeparator = System.getProperty("line.separator");
		if(systemLineSeparator==null)
		{
			System.out.println("warning: property \"line.separator\" is null, using LF (unix style).");
			lineSeparator = "\n";
		}
		else
			lineSeparator = systemLineSeparator;

		this.longJavadoc = params.longJavadoc;
		this.finalArgPrefix = params.finalArgs ? "final " : "";
		this.suppressUnusedWarningOnPrivateActivationConstructor = params.suppressUnusedWarningOnPrivateActivationConstructor;
		this.serialVersionUID = params.serialVersionUID;
	}

	private static final String toCamelCase(final String name)
	{
		final char first = name.charAt(0);
		if (Character.isUpperCase(first))
			return name;
		else
			return Character.toUpperCase(first) + name.substring(1);
	}

	private static final String lowerCamelCase(final String s)
	{
		final char first = s.charAt(0);
		if(Character.isLowerCase(first))
			return s;
		else
			return Character.toLowerCase(first) + s.substring(1);
	}

	private void writeThrowsClause(final Collection<Class<? extends Throwable>> exceptions)
	{
		if(!exceptions.isEmpty())
		{
			write("\t\t\tthrows");
			final CharSeparator comma = new CharSeparator(',');
			for(final Class e : exceptions)
			{
				comma.appendTo(output);
				write(lineSeparator);
				write("\t\t\t\t");
				write(e.getCanonicalName());
			}
			write(lineSeparator);
		}
	}

	private void writeCommentHeader()
	{
		write("/**");
		write(lineSeparator);
		if(longJavadoc)
		{
			write(lineSeparator);
			write("\t **");
			write(lineSeparator);
		}
	}

	private void writeCommentFooter()
	{
		writeCommentFooter(null);
	}

	private void writeCommentFooter(final String extraComment)
	{
		write("\t * @" + TAG_GENERATED + ' ');
		write(GENERATED);
		write(lineSeparator);
		if(extraComment!=null)
		{
			write("\t *       ");
			write(extraComment);
			write(lineSeparator);
		}
		write("\t */");
		write(lineSeparator);
	}

	private static final String link(final String target)
	{
		return "{@link #" + target + '}';
	}

	private void writeInitialConstructor(final CopeType type)
	{
		if(!type.hasInitialConstructor())
			return;

		final List<CopeFeature> initialFeatures = type.getInitialFeatures();
		final SortedSet<Class<? extends Throwable>> constructorExceptions = type.getConstructorExceptions();

		writeCommentHeader();
		write("\t * ");
		write(format(CONSTRUCTOR_INITIAL, type.name));
		write(lineSeparator);
		for(final CopeFeature feature : initialFeatures)
		{
			write("\t * @param ");
			write(feature.name);
			write(' ');
			write(format(CONSTRUCTOR_INITIAL_PARAMETER, link(feature.name)));
			write(lineSeparator);
		}
		for(final Class<?> constructorException : constructorExceptions)
		{
			final ConstructorComment a = constructorException.getAnnotation(ConstructorComment.class);
			if(a==null)
				continue;

			write("\t * @throws ");
			write(constructorException.getCanonicalName());
			write(' ');

			final StringSeparator comma = new StringSeparator(", ");
			final StringBuilder fields = new StringBuilder();
			for(final CopeFeature feature : initialFeatures)
			{
				if(!feature.getInitialExceptions().contains(constructorException))
					continue;

				comma.appendTo(fields);
				fields.append(feature.name);
			}

			final String pattern = a.value();
			write(format(pattern, fields.toString()));
			write(lineSeparator);
		}
		writeCommentFooter(CONSTRUCTOR_INITIAL_CUSTOMIZE);

		write('\t');
		writeModifier(type.getInitialConstructorModifier());
		write(type.name);
		write('(');

		final CharSeparator comma = new CharSeparator(',');
		for(final CopeFeature feature : initialFeatures)
		{
			comma.appendTo(output);
			write(lineSeparator);
			write("\t\t\t\t");
			write(finalArgPrefix);
			write(new Context(feature, feature.parent!=type).write(feature.getInitialType()));
			write(' ');
			write(feature.name);
		}

		write(')');
		write(lineSeparator);
		writeThrowsClause(constructorExceptions);
		write("\t{");
		write(lineSeparator);
		write("\t\tthis(new " + SET_VALUE + "[]{");
		write(lineSeparator);
		for(final CopeFeature feature : initialFeatures)
		{
			write("\t\t\t");
			final CopeType parent = feature.parent;
			if(parent==type)
				write(type.name);
			else
				write(parent.javaClass.getFullName());
			write('.');
			write(feature.name);
			write(".map(");
			write(feature.name);
			write("),");
			write(lineSeparator);
		}
		write("\t\t});");
		write(lineSeparator);
		write("\t}");
	}

	private void writeGenericConstructor(final CopeType type)
	{
		final Option option = type.genericConstructorOption;
		if(!option.exists)
			return;

		writeCommentHeader();
		write("\t * ");
		write(format(CONSTRUCTOR_GENERIC, type.name));
		write(lineSeparator);
		writeCommentFooter(CONSTRUCTOR_GENERIC_CUSTOMIZE);

		write('\t');
		writeModifier(option.getModifier(type.allowSubtypes() ? PROTECTED : PRIVATE));
		write(type.name);
		write('(');
		write(finalArgPrefix);
		write(SET_VALUE + "<?>... setValues)");
		write(lineSeparator);
		write("\t{");
		write(lineSeparator);
		write("\t\tsuper(setValues);");
		write(lineSeparator);
		write("\t}");
	}

	private void writeActivationConstructor(final CopeType type)
	{
		if(type.isComposite)
			return;

		final Option option = type.activationConstructorOption;
		if(!option.exists)
			return;

		writeCommentHeader();
		write("\t * ");
		write(CONSTRUCTOR_ACTIVATION);
		write(lineSeparator);
		write("\t * @see " + ITEM + "#Item(" + ACTIVATION + ")");
		write(lineSeparator);
		writeCommentFooter();

		final boolean allowSubtypes = type.allowSubtypes();
		write('\t');
		if(suppressUnusedWarningOnPrivateActivationConstructor && !allowSubtypes)
			write("@SuppressWarnings(\"unused\") ");
		writeModifier(option.getModifier(allowSubtypes ? PROTECTED : PRIVATE));
		write(type.name);
		write('(');
		write(finalArgPrefix);
		write(ACTIVATION + " ap)");
		write(lineSeparator);
		write("\t{");
		write(lineSeparator);
		write("\t\tsuper(ap);");
		write(lineSeparator);
		write("\t}");
	}

	private void writeFeature(final CopeFeature feature)
	throws ParserException
	{
		final Feature instance = feature.getInstance();
		for(final Wrapper wrapper : instance.getWrappers())
		{
			final String pattern = wrapper.getMethodWrapperPattern();
			final String modifierTag = pattern!=null ? format(pattern, "", "") : wrapper.getName();
			final Option option =
				modifierTag!=null
				? new Option(Tags.getLine(
									feature.docComment,
									CopeFeature.TAG_PREFIX + modifierTag),
						true)
				: null;

			if(option!=null && !option.exists)
				continue;

			final Context ctx = new Context(feature, wrapper);
			final String methodName = wrapper.getName();
			final java.lang.reflect.Type methodReturnType = wrapper.getReturnType();
			final List<Wrapper.Parameter> parameters = wrapper.getParameters();
			final Map<Class<? extends Throwable>, String[]> throwsClause = wrapper.getThrowsClause();
			final String featureNameCamelCase = toCamelCase(feature.name);
			final boolean isStatic = wrapper.isStatic();
			final int modifier = feature.modifier;
			final boolean useIs = instance instanceof BooleanField && methodName.startsWith("get");

			final Object[] arguments = new String[]{
					link(feature.name),
					feature.name,
					lowerCamelCase(feature.parent.name),
					featureNameCamelCase};
			{
				writeCommentHeader();
				{
					// TODO use String[] from the beginning
					final List<String> comments = wrapper.getComments();
					writeCommentParagraph("", " ", comments.toArray(new String[comments.size()]), arguments);
				}

				for(final Wrapper.Parameter parameter : wrapper.getParameters())
				{
					writeCommentParagraph(
							"@param " + format(parameter.getName(), arguments),
							"        ",
							parameter.getComment(), arguments);
				}
				writeCommentParagraph(
						"@return",
						"         ",
						wrapper.getReturnComment(), arguments);

				for(final Map.Entry<Class<? extends Throwable>, String[]> e : throwsClause.entrySet())
				{
					writeCommentParagraph(
							"@throws " + e.getKey().getCanonicalName(),
							"         ",
							e.getValue(), arguments);
				}
				writeCommentFooter(
					modifierTag!=null
					?  "It can be customized with the tag " +
						"<tt>@" + CopeFeature.TAG_PREFIX + modifierTag + ' ' +
						Option.TEXT_VISIBILITY_PUBLIC + '|' +
						Option.TEXT_VISIBILITY_PACKAGE + '|' +
						Option.TEXT_VISIBILITY_PROTECTED + '|' +
						Option.TEXT_VISIBILITY_PRIVATE + '|' +
						Option.TEXT_NONE + '|' +
						Option.TEXT_NON_FINAL +
						(useIs ? '|' + Option.TEXT_BOOLEAN_AS_IS : "") + "</tt> " +
						"in the comment of the field."
					: null);
			}

			if(wrapper.isMethodDeprecated())
			{
				write("\t@Deprecated");
				write(lineSeparator);
			}

			write('\t');
			writeModifier(
				(
					option!=null
					? option.getModifier(modifier)
					: ((modifier & (PUBLIC|PROTECTED|PRIVATE)) | FINAL)
				)
				|
				(isStatic ? STATIC : 0)
			);
			write(ctx.write(methodReturnType));
			if(option!=null && useIs && option.booleanAsIs)
			{
				write(" is");
				write(featureNameCamelCase);
			}
			else
			{
				write(' ');
				if(pattern!=null)
				{
					if(feature.isDefault())
					{
						final String x = format(pattern, "", "");
						if(!isKeyword(x))
							write(x);
						else
							write(format(pattern, featureNameCamelCase, feature.name));
					}
					else
						write(format(pattern, featureNameCamelCase, feature.name));
				}
				else
				{
					if(feature.isDefault() && !isKeyword(methodName))
						write(methodName);
					else
						writeName(methodName, featureNameCamelCase);
				}
			}
			if(option!=null)
				write(option.suffix);
			write('(');
			{
				final CharSeparator comma = new CharSeparator(',');
				for(final Wrapper.Parameter parameter : parameters)
				{
					comma.appendTo(output);
					write(finalArgPrefix);
					if(parameter.isVararg())
					{
						write(((Class)parameter.getType()).getComponentType().getCanonicalName());
						write("...");
					}
					else
					{
						write(ctx.write(parameter.getType()));
					}
					write(' ');
					write(format(parameter.getName(), arguments));
				}
			}
			write(')');
			write(lineSeparator);
			writeThrowsClause(throwsClause.keySet());
			write("\t{");
			write(lineSeparator);
			write("\t\t");
			if(!methodReturnType.equals(void.class))
				write("return ");
		if(feature.parent.isComposite)
		{
			write(methodName);
			write('(');
			{
				write(feature.parent.name);
				write('.');
				write(feature.name);
				for(final Wrapper.Parameter parameter : parameters)
				{
					write(',');
					write(format(parameter.getName(), arguments));
				}
			}
			write(')');
		}
		else
		{
			write(feature.parent.name);
			write('.');
			write(feature.name);
			write('.');
			write(methodName);
			write('(');
			{
				final CharSeparator comma = new CharSeparator(',');
				if(isStatic)
				{
					if(wrapper.hasStaticClassToken())
					{
						comma.appendTo(output);
						write(feature.parent.name);
						write(".class");
					}
				}
				else
				{
					comma.appendTo(output);
					write("this");
				}
				for(final Wrapper.Parameter parameter : parameters)
				{
					comma.appendTo(output);
					write(format(parameter.getName(), arguments));
				}
			}
			write(')');
		}
			write(';');
			write(lineSeparator);
			write("\t}");
		}
	}

	private void writeName(final String methodName, final String featureName)
	{
		for(int i = 0; i<methodName.length(); i++)
			if(Character.isUpperCase(methodName.charAt(i)))
			{
				write(methodName.substring(0, i));
				write(featureName);
				write(methodName.substring(i));
				return;
			}

		write(methodName);
		write(featureName);
	}

	private void writeCommentParagraph(
			final String prefix1, final String prefixN,
			final String[] lines,
			final Object[] arguments)
	{
		if(lines.length>0)
		{
			final String line = lines[0];
			write("\t *");
			if(!prefix1.isEmpty())
			{
				write(' ');
				write(prefix1);
			}
			if(!line.isEmpty())
			{
				write(' ');
				write(format(line, arguments));
			}
			write(lineSeparator);
		}
		for(int i = 1; i<lines.length; i++)
		{
			final String line = lines[i];
			write("\t *");
			if(!line.isEmpty())
			{
				write(prefixN);
				write(format(line, arguments));
			}
			write(lineSeparator);
		}
	}

	private void writeUniqueFinder(final CopeUniqueConstraint constraint)
	throws ParserException
	{
		final String optionTagname = CopeFeature.TAG_PREFIX + "finder";
		final Option option = new Option(
				Tags.getLine(constraint.docComment, optionTagname), true);
		if(!option.exists)
			return;

		final CopeAttribute[] attributes = constraint.getAttributes();
		final String className = attributes[0].getParent().name;

		writeCommentHeader();
		write("\t * ");
		write(format(FINDER_UNIQUE, lowerCamelCase(className)));
		write(lineSeparator);
		for(final CopeAttribute attribute : attributes)
		{
			write("\t * @param ");
			write(attribute.name);
			write(' ');
			write(format(FINDER_UNIQUE_PARAMETER, link(attribute.name)));
			write(lineSeparator);
		}
		write("\t * @return ");
		write(FINDER_UNIQUE_RETURN);
		write(lineSeparator);

		writeCommentFooter(
				"It can be customized with the tag " +
				"<tt>@" + optionTagname + ' ' +
				Option.TEXT_VISIBILITY_PUBLIC + '|' +
				Option.TEXT_VISIBILITY_PACKAGE + '|' +
				Option.TEXT_VISIBILITY_PROTECTED + '|' +
				Option.TEXT_VISIBILITY_PRIVATE + '|' +
				Option.TEXT_NONE + '|' +
				Option.TEXT_NON_FINAL + "</tt> " +
				"in the comment of the field."
		);

		write('\t');
		writeModifier(option.getModifier(constraint.modifier) | (STATIC|FINAL) );
		write(className);
		write(" for");
		write(toCamelCase(constraint.name));

		write('(');
		for(int i=0; i<attributes.length; i++)
		{
			if(i>0)
				write(',');
			final CopeAttribute attribute = attributes[i];
			write(finalArgPrefix);
			write(getBoxedType(attribute));
			write(' ');
			write(attribute.name);
		}
		write(')');
		write(lineSeparator);
		write("\t{");
		write(lineSeparator);
		write("\t\treturn ");

		write(attributes[0].parent.name);
		write('.');
		write(constraint.name);
		write(".search(");
		write(className);
		write(".class,");
		write(attributes[0].name);
		for(int i = 1; i<attributes.length; i++)
		{
			write(',');
			write(attributes[i].name);
		}
		write(");");
		write(lineSeparator);
		write("\t}");
	}

	@SuppressWarnings("deprecation")
	private String getBoxedType(final CopeAttribute a)
	{
		return a.getBoxedType();
	}

	private void writeSerialVersionUID()
	{
		if(serialVersionUID)
		{
			writeCommentHeader();
			writeCommentFooter();

			write('\t');
			writeModifier(PRIVATE|STATIC|FINAL);
			write("long serialVersionUID = 1l;");
		}
	}

	private void writeType(final CopeType type)
	{
		if(type.isComposite)
			return;

		final Option option = type.typeOption;
		if(option.exists)
		{
			writeCommentHeader();
			write("\t * ");
			write(format(TYPE, lowerCamelCase(type.name)));
			write(lineSeparator);
			writeCommentFooter(TYPE_CUSTOMIZE);

			write('\t');
			writeModifier(option.getModifier(type.javaClass.modifier) | (STATIC|FINAL));
			write(TYPE_NAME + '<');
			write(type.name);
			write("> TYPE = " + TYPES_BOUND_NAME + ".newType(");
			write(type.name);
			write(".class)");
			write(lineSeparator);

			write(';');
		}
	}

	void write() throws ParserException
	{
		final String buffer = javaFile.buffer.toString();
		int previousClassEndPosition = 0;
		for(final JavaClass javaClass : javaFile.getClasses())
		{
			final CopeType type = CopeType.getCopeType(javaClass);
			final int classEndPosition = javaClass.getClassEndPosition();
			if(type!=null)
			{
				assert previousClassEndPosition<=classEndPosition;
				if(previousClassEndPosition<classEndPosition)
					output.append(buffer, previousClassEndPosition, classEndPosition);

				writeClassFeatures(type);
				previousClassEndPosition = classEndPosition;
			}
		}
		output.append(buffer, previousClassEndPosition, buffer.length());
	}

	private void writeClassFeatures(final CopeType type)
			throws ParserException
	{
		if(!type.isInterface())
		{
			writeInitialConstructor(type);
			writeGenericConstructor(type);
			writeActivationConstructor(type);

			for(final CopeFeature feature : type.getFeatures())
			{
				writeFeature(feature);
				if(feature instanceof CopeUniqueConstraint)
					writeUniqueFinder((CopeUniqueConstraint)feature);
			}

			writeSerialVersionUID();
			writeType(type);
		}
	}

	private void writeModifier(final int modifier)
	{
		final String modifierString = Modifier.toString(modifier);
		if(!modifierString.isEmpty())
		{
			write(modifierString);
			write(' ');
		}
	}

	private static boolean isKeyword(final String s)
	{
		return "for".equals(s); // TODO
	}

	private void write(final String s)
	{
		output.append(s);
	}

	private void write(final char c)
	{
		output.append(c);
	}
}
