package com.exedio.cope.instrument.testlib;

import com.exedio.cope.Item;
import com.exedio.cope.instrument.WrapperInitial;
import com.exedio.cope.instrument.testfeature.OptionFeature;
import com.exedio.cope.instrument.testfeature.SimpleSettable;

public class LibItem extends Item
{
	@WrapperInitial
	public static final SimpleSettable a=new SimpleSettable();

	public static final OptionFeature option=new OptionFeature();

	/**

	 **
	 * Creates a new LibItem with all the fields initially needed.
	 * @param a the initial value for field {@link #a}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tags <tt>@cope.constructor public|package|protected|private|none</tt> in the class comment and <tt>@cope.initial</tt> in the comment of fields.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	public LibItem(
				@javax.annotation.Nullable final java.lang.String a)
	{
		this(new com.exedio.cope.SetValue<?>[]{
			LibItem.a.map(a),
		});
	}/**

	 **
	 * Creates a new LibItem and sets the given fields initially.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.generic.constructor public|package|protected|private|none</tt> in the class comment.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	protected LibItem(final com.exedio.cope.SetValue<?>... setValues)
	{
		super(setValues);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.one public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	public final java.lang.String oneA()
	{
		return LibItem.a.one(this);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.simple public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	public final void simpleOption()
	{
		LibItem.option.simple(this);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	private static final long serialVersionUID = 1l;/**

	 **
	 * The persistent type information for libItem.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.type public|package|protected|private|none</tt> in the class comment.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	public static final com.exedio.cope.Type<LibItem> TYPE = com.exedio.cope.TypesBound.newType(LibItem.class);/**

	 **
	 * Activation constructor. Used for internal purposes only.
	 * @see com.exedio.cope.Item#Item(com.exedio.cope.ActivationParameters)
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	protected LibItem(final com.exedio.cope.ActivationParameters ap){super(ap);
}}
