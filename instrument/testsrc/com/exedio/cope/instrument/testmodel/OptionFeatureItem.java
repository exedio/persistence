/*
 * Copyright (C) 2004-2015  exedio GmbH (www.exedio.com)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package com.exedio.cope.instrument.testmodel;

import com.exedio.cope.BooleanField;
import com.exedio.cope.instrument.Wrapper;
import com.exedio.cope.instrument.WrapperIgnore;
import com.exedio.cope.instrument.testfeature.FilterFeature;
import com.exedio.cope.instrument.testfeature.OptionFeature;
import com.exedio.cope.instrument.testfeature.OptionFeatureGet;

public final class OptionFeatureItem extends OptionFeatureSuperItem
{
	// default visibility

	private   static final OptionFeature barePrivate   = new OptionFeature();
             static final OptionFeature barePackage   = new OptionFeature();
	protected static final OptionFeature bareProtected = new OptionFeature();
	public    static final OptionFeature barePublic    = new OptionFeature();


	// override visibility

	/** @cope.simple none */
	static final OptionFeature none = new OptionFeature();

	/** @cope.simple internal */
	static final OptionFeature overrideInternal = new OptionFeature();

	/** @cope.simple private */
	static final OptionFeature overridePrivate = new OptionFeature();

	/** @cope.simple package */
	public static final OptionFeature overridePackage = new OptionFeature();

	/** @cope.simple protected */
	static final OptionFeature overrideProtected = new OptionFeature();

	/** @cope.simple public */
	static final OptionFeature overridePublic = new OptionFeature();


	// override visibility and internal

	/** @cope.simple internal none */
	static final OptionFeature internalNone = new OptionFeature();

	/** @cope.simple internal private */
	static final OptionFeature internalPrivate = new OptionFeature();

	/** @cope.simple internal package */
	public static final OptionFeature internalPackage = new OptionFeature();

	/** @cope.simple internal protected */
	static final OptionFeature internalProtected = new OptionFeature();

	/** @cope.simple internal public */
	static final OptionFeature internalPublic = new OptionFeature();


	// boolean-as-is

	/** @cope.get boolean-as-is */
	static final BooleanField booleanAs = new BooleanField();

	/** @cope.get boolean-as-is */
	static final OptionFeatureGet booleanAsIsNoField = new OptionFeatureGet();

	/** @cope.get boolean-as-is */
	static final OptionFeature booleanAsIsNotAplicable = new OptionFeature();


	// miscellaneous

	/** @cope.simple non-final */
	static final OptionFeature nonFinal = new OptionFeature();

	@Wrapper(wrap="simple", asFinal=false)
	static final OptionFeature nonFinalAnnotated = new OptionFeature();

	/** @cope.simple override */
	static final OptionFeature override = new OptionFeature();

	@Wrapper(wrap="simple", override=true)
	static final OptionFeature overrideAnnotated = new OptionFeature();

	/** @cope.ignore */
	static final OptionFeature ignore = new OptionFeature().fail();

	@WrapperIgnore
	static final OptionFeature ignoreAnnotated = new OptionFeature().fail();

	/** @cope.ignore */
	static final OptionFeature ignoreDontFail = new OptionFeature();

	static final FilterFeature wrapTheIgnored = new FilterFeature(ignoreDontFail).sourceNotNull();

	void suppressUnusedWarnings()
	{
		simpleBarePrivate();
		simpleOverrideInternalInternal();
		simpleOverridePrivate();
	}

   /**

	 **
	 * Creates a new OptionFeatureItem with all the fields initially needed.
	 * @param booleanAs the initial value for field {@link #booleanAs}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tags <tt>@cope.constructor public|package|protected|private|none</tt> in the class comment and <tt>@cope.initial</tt> in the comment of fields.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	OptionFeatureItem(
				final boolean booleanAs)
	{
		this(new com.exedio.cope.SetValue<?>[]{
			OptionFeatureItem.booleanAs.map(booleanAs),
		});
	}/**

	 **
	 * Creates a new OptionFeatureItem and sets the given fields initially.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.generic.constructor public|package|protected|private|none</tt> in the class comment.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	private OptionFeatureItem(final com.exedio.cope.SetValue<?>... setValues)
	{
		super(setValues);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.simple public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	private final void simpleBarePrivate()
	{
		OptionFeatureItem.barePrivate.simple(this);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.simple public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final void simpleBarePackage()
	{
		OptionFeatureItem.barePackage.simple(this);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.simple public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	protected final void simpleBareProtected()
	{
		OptionFeatureItem.bareProtected.simple(this);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.simple public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	public final void simpleBarePublic()
	{
		OptionFeatureItem.barePublic.simple(this);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.simple public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	private final void simpleOverrideInternalInternal()
	{
		OptionFeatureItem.overrideInternal.simple(this);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.simple public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	private final void simpleOverridePrivate()
	{
		OptionFeatureItem.overridePrivate.simple(this);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.simple public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final void simpleOverridePackage()
	{
		OptionFeatureItem.overridePackage.simple(this);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.simple public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	protected final void simpleOverrideProtected()
	{
		OptionFeatureItem.overrideProtected.simple(this);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.simple public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	public final void simpleOverridePublic()
	{
		OptionFeatureItem.overridePublic.simple(this);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.simple public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	private final void simpleInternalPrivateInternal()
	{
		OptionFeatureItem.internalPrivate.simple(this);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.simple public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final void simpleInternalPackageInternal()
	{
		OptionFeatureItem.internalPackage.simple(this);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.simple public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	protected final void simpleInternalProtectedInternal()
	{
		OptionFeatureItem.internalProtected.simple(this);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.simple public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	public final void simpleInternalPublicInternal()
	{
		OptionFeatureItem.internalPublic.simple(this);
	}/**

	 **
	 * Returns the value of {@link #booleanAs}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final|boolean-as-is</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final boolean isBooleanAs()
	{
		return OptionFeatureItem.booleanAs.getMandatory(this);
	}/**

	 **
	 * Sets a new value for {@link #booleanAs}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final void setBooleanAs(final boolean booleanAs)
	{
		OptionFeatureItem.booleanAs.set(this,booleanAs);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final void getBooleanAsIsNoField()
	{
		OptionFeatureItem.booleanAsIsNoField.get(this);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.simple public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final void simpleBooleanAsIsNotAplicable()
	{
		OptionFeatureItem.booleanAsIsNotAplicable.simple(this);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.simple public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	void simpleNonFinal()
	{
		OptionFeatureItem.nonFinal.simple(this);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.simple public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	void simpleNonFinalAnnotated()
	{
		OptionFeatureItem.nonFinalAnnotated.simple(this);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.simple public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	@java.lang.Override
	final void simpleOverride()
	{
		OptionFeatureItem.override.simple(this);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.simple public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	@java.lang.Override
	final void simpleOverrideAnnotated()
	{
		OptionFeatureItem.overrideAnnotated.simple(this);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.simple public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final void simpleWrapTheIgnored()
	{
		OptionFeatureItem.wrapTheIgnored.simple(this);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	private static final long serialVersionUID = 1l;/**

	 **
	 * The persistent type information for optionFeatureItem.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.type public|package|protected|private|none</tt> in the class comment.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	@SuppressWarnings("hiding")
	public static final com.exedio.cope.Type<OptionFeatureItem> TYPE = com.exedio.cope.TypesBound.newType(OptionFeatureItem.class);/**

	 **
	 * Activation constructor. Used for internal purposes only.
	 * @see com.exedio.cope.Item#Item(com.exedio.cope.ActivationParameters)
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	@SuppressWarnings("unused") private OptionFeatureItem(final com.exedio.cope.ActivationParameters ap){super(ap);
}}
