/*
 * Copyright (C) 2004-2012  exedio GmbH (www.exedio.com)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package com.exedio.cope.instrument.testmodel;

import com.exedio.cope.Item;
import com.exedio.cope.instrument.testfeature.GenericFeatureReference;
import java.util.Collection;

@SuppressWarnings("rawtypes") // TODO instrumentor generics
public class GenericComplexSuper<N extends Number, L extends Collection<String>> extends Item
{
	static final GenericFeatureReference<GenericComplexSub  > toSub   = GenericFeatureReference.create(GenericComplexSub  .class);
	static final GenericFeatureReference<GenericComplexSuper> toSuper = GenericFeatureReference.create(GenericComplexSuper.class);

	/**

	 **
	 * Creates a new GenericComplexSuper with all the fields initially needed.
	 * @param toSub the initial value for field {@link #toSub}.
	 * @param toSuper the initial value for field {@link #toSuper}.
	 * @throws com.exedio.cope.MandatoryViolationException if toSub, toSuper is null.
	 * @throws com.exedio.cope.UniqueViolationException if toSub, toSuper is not unique.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tags <tt>@cope.constructor public|package|protected|private|none</tt> in the class comment and <tt>@cope.initial</tt> in the comment of fields.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	GenericComplexSuper(
				final GenericComplexSub toSub,
				final GenericComplexSuper toSuper)
			throws
				com.exedio.cope.MandatoryViolationException,
				com.exedio.cope.UniqueViolationException
	{
		this(new com.exedio.cope.SetValue<?>[]{
			GenericComplexSuper.toSub.map(toSub),
			GenericComplexSuper.toSuper.map(toSuper),
		});
	}/**

	 **
	 * Creates a new GenericComplexSuper and sets the given fields initially.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.generic.constructor public|package|protected|private|none</tt> in the class comment.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	protected GenericComplexSuper(final com.exedio.cope.SetValue<?>... setValues)
	{
		super(setValues);
	}/**

	 **
	 * Returns the value of {@link #toSub}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final GenericComplexSub getToSub()
	{
		return GenericComplexSuper.toSub.get(this);
	}/**

	 **
	 * Sets a new value for {@link #toSub}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final void setToSub(final GenericComplexSub toSub)
	{
		GenericComplexSuper.toSub.set(this,toSub);
	}/**

	 **
	 * Finds a genericComplexSuper by it's {@link #toSub}.
	 * @param toSub shall be equal to field {@link #toSub}.
	 * @return null if there is no matching item.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.for public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	static final GenericComplexSuper forToSub(final GenericComplexSub toSub)
	{
		return GenericComplexSuper.toSub.searchUnique(GenericComplexSuper.class,toSub);
	}/**

	 **
	 * Returns the value of {@link #toSuper}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final GenericComplexSuper getToSuper()
	{
		return GenericComplexSuper.toSuper.get(this);
	}/**

	 **
	 * Sets a new value for {@link #toSuper}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final void setToSuper(final GenericComplexSuper toSuper)
	{
		GenericComplexSuper.toSuper.set(this,toSuper);
	}/**

	 **
	 * Finds a genericComplexSuper by it's {@link #toSuper}.
	 * @param toSuper shall be equal to field {@link #toSuper}.
	 * @return null if there is no matching item.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.for public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	static final GenericComplexSuper forToSuper(final GenericComplexSuper toSuper)
	{
		return GenericComplexSuper.toSuper.searchUnique(GenericComplexSuper.class,toSuper);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	private static final long serialVersionUID = 1l;/**

	 **
	 * The persistent type information for genericComplexSuper.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.type public|package|protected|private|none</tt> in the class comment.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	public static final com.exedio.cope.Type<GenericComplexSuper> TYPE = com.exedio.cope.TypesBound.newType(GenericComplexSuper.class);/**

	 **
	 * Activation constructor. Used for internal purposes only.
	 * @see com.exedio.cope.Item#Item(com.exedio.cope.ActivationParameters)
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	protected GenericComplexSuper(final com.exedio.cope.ActivationParameters ap){super(ap);
}}
