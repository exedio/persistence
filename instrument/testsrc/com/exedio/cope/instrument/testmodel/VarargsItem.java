/*
 * Copyright (C) 2004-2015  exedio GmbH (www.exedio.com)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package com.exedio.cope.instrument.testmodel;

import com.exedio.cope.Item;
import com.exedio.cope.instrument.testfeature.SettableVarargs;
import com.exedio.cope.instrument.testfeature.SettableVarargsInteger;
import com.exedio.cope.instrument.testfeature.WrapVarargs;

final class VarargsItem extends Item
{
	static final SettableVarargsInteger integerValue = new SettableVarargsInteger(false);
	static final SettableVarargsInteger integerMandatoryValue = new SettableVarargsInteger(true);
	static final SettableVarargs<Double> doubleValue = new SettableVarargs<>();

	static final WrapVarargs integerOnly = new WrapVarargs(integerValue);
	static final WrapVarargs integerAndDouble = new WrapVarargs(integerValue, doubleValue);
	static final WrapVarargs integerMandatoryOnly = new WrapVarargs(integerMandatoryValue);


	/**

	 **
	 * Creates a new VarargsItem with all the fields initially needed.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tags <tt>@cope.constructor public|package|protected|private|none</tt> in the class comment and <tt>@cope.initial</tt> in the comment of fields.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	VarargsItem()
	{
		this(new com.exedio.cope.SetValue<?>[]{
		});
	}/**

	 **
	 * Creates a new VarargsItem and sets the given fields initially.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.generic.constructor public|package|protected|private|none</tt> in the class comment.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	private VarargsItem(final com.exedio.cope.SetValue<?>... setValues)
	{
		super(setValues);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.simple public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	static final void simpleIntegerOnly(final java.lang.Integer integerValue)
	{
		VarargsItem.integerOnly.simple(integerValue);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.moreParameters public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	static final void moreIntegerOnlyParameters(final int integerOnly,final java.lang.Integer integerValue)
	{
		VarargsItem.integerOnly.moreParameters(integerOnly,integerValue);
	}/**

	 **
	 * @param integerValue myDoc/{@link #integerValue}/integerValue/varargsItem/
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.staticToken public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	static final VarargsItem staticIntegerOnlyToken(final java.lang.Integer integerValue)
	{
		return VarargsItem.integerOnly.staticToken(VarargsItem.class,integerValue);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.simple public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	static final void simpleIntegerAndDouble(final java.lang.Integer integerValue,final Double doubleValue)
	{
		VarargsItem.integerAndDouble.simple(integerValue,doubleValue);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.moreParameters public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	static final void moreIntegerAndDoubleParameters(final int integerAndDouble,final java.lang.Integer integerValue,final Double doubleValue)
	{
		VarargsItem.integerAndDouble.moreParameters(integerAndDouble,integerValue,doubleValue);
	}/**

	 **
	 * @param integerValue myDoc/{@link #integerValue}/integerValue/varargsItem/
	 * @param doubleValue myDoc/{@link #doubleValue}/doubleValue/varargsItem/
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.staticToken public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	static final VarargsItem staticIntegerAndDoubleToken(final java.lang.Integer integerValue,final Double doubleValue)
	{
		return VarargsItem.integerAndDouble.staticToken(VarargsItem.class,integerValue,doubleValue);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.simple public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	static final void simpleIntegerMandatoryOnly(final int integerMandatoryValue)
	{
		VarargsItem.integerMandatoryOnly.simple(integerMandatoryValue);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.moreParameters public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	static final void moreIntegerMandatoryOnlyParameters(final int integerMandatoryOnly,final int integerMandatoryValue)
	{
		VarargsItem.integerMandatoryOnly.moreParameters(integerMandatoryOnly,integerMandatoryValue);
	}/**

	 **
	 * @param integerMandatoryValue myDoc/{@link #integerMandatoryValue}/integerMandatoryValue/varargsItem/
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.staticToken public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	static final VarargsItem staticIntegerMandatoryOnlyToken(final int integerMandatoryValue)
	{
		return VarargsItem.integerMandatoryOnly.staticToken(VarargsItem.class,integerMandatoryValue);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	private static final long serialVersionUID = 1l;/**

	 **
	 * The persistent type information for varargsItem.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.type public|package|protected|private|none</tt> in the class comment.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	static final com.exedio.cope.Type<VarargsItem> TYPE = com.exedio.cope.TypesBound.newType(VarargsItem.class);/**

	 **
	 * Activation constructor. Used for internal purposes only.
	 * @see com.exedio.cope.Item#Item(com.exedio.cope.ActivationParameters)
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	@SuppressWarnings("unused") private VarargsItem(final com.exedio.cope.ActivationParameters ap){super(ap);
}}
