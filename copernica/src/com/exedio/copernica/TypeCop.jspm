<%
/*
 * Copyright (C) 2004-2007  exedio GmbH (www.exedio.com)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package com.exedio.copernica;

import java.io.PrintStream;
import java.text.SimpleDateFormat;
import java.util.Collection;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import com.exedio.cope.BooleanField;
import com.exedio.cope.DataField;
import com.exedio.cope.DateField;
import com.exedio.cope.EnumField;
import com.exedio.cope.Feature;
import com.exedio.cope.Function;
import com.exedio.cope.Item;
import com.exedio.cope.ItemField;
import com.exedio.cope.Pattern;
import com.exedio.cope.QueryInfo;
import com.exedio.cope.Type;
import com.exedio.cope.UniqueConstraint;
import com.exedio.cope.pattern.Media;
import com.exedio.cops.Pager;

final class TypeCop_Jspm
{
	private static void writeInfo(final PrintStream out, final QueryInfo info)
	{
		%><%=info.getText()%><%
		final Collection<QueryInfo> childs = info.getChilds();
		if(!childs.isEmpty())
		{
			%><ul><%
			for(final QueryInfo child : childs)
			{
				%>
				<li><%
				writeInfo(out, child);
				%></li><%
			}
			%>
				</ul><%
		}
	}

	private static final void writePagerButton(
			final PrintStream out,
			final TypeCop cop,
			final Pager href,
			final String text)
	{
				%>
				<a href="<%=cop.toPage(href)%>"<%
					if(href.isNeutral()){%> class="disabled"<%}%>><%=text%></a><%
	}

	private static final void writePager(final PrintStream out, final TypeCop cop)
	{
		final Pager pager = cop.pager;
		if(pager.isNeeded())
		{
			%>
			<div class="pager"><%
				writePagerButton(out, cop, pager.first(),    "&lt;&lt;");
				writePagerButton(out, cop, pager.previous(), "&lt;");
				writePagerButton(out, cop, pager.next(),     "&gt;");
				writePagerButton(out, cop, pager.last(),     "&gt;&gt;");
				%>
				<%=pager.getFrom()%> - <%=pager.getTo()%> / <%=pager.getTotal()%>
				(<%
				for(final Pager newLimit : pager.newLimits())
				{
				%>
				<a href="<%=cop.toPage(newLimit)%>"<%
					if(newLimit.isNeutral()){%> class="disabled"<%}%>><%=newLimit.getLimit()%></a><%
				}%>
				)
			</div><%
		}
	}
	
	static final void writeBody(final PrintStream out, final TypeCop cop)
	{
		final CopernicaProvider provider = cop.provider;
		final CopernicaLanguage language = cop.language;
		final Type type = cop.type;
		final List items = cop.getItems();
			
			%>
			<h1>
				<a href="<%=(cop.toType(type))%>"><%=provider.getDisplayName(language, type)%></a>
			</h1>
			<ul><%
			int numberOfSearchFeatures = 5;
			for(Iterator i = type.getFeatures().iterator();
					i.hasNext() && numberOfSearchFeatures>0;
					numberOfSearchFeatures--)
			{
				final Feature feature = (Feature)i.next();
				%>
				<li><%=provider.getDisplayName(language, feature)%></li><%
			}
			%>
			</ul><%
			writePager(out, cop);
			%>
			<table id="item">
				<tr>
					<th></th><%
				final List features = type.getFeatures();
				for(Iterator i = features.iterator(); i.hasNext(); )
				{
					final Feature feature = (Feature)i.next();
					%>
					<th><%=provider.getDisplayName(language, feature)%></th><%
				}
			%>
				</tr>
				<tr>
					<th></th><%
				for(Iterator i = features.iterator(); i.hasNext(); )
				{
					final Feature feature = (Feature)i.next();
					%>
					<th class="orderby"><%
					if(feature instanceof Function)
					{
						final Function function = (Function)feature;
						%>
						<a href="<%=cop.orderBy(function, true)%>"<%
						if(feature == cop.orderBy && cop.orderAscending)
						{
							%> class="disabled"<%
						}
						%>>a</a>
						<a href="<%=cop.orderBy(function, false)%>"<%
						if(feature == cop.orderBy && !cop.orderAscending)
						{
							%> class="disabled"<%
						}
						%>>d</a>
					<%
					}
					%></th><%
				}
			%>
				</tr><%
				if(cop.pager.isTotalEmpty())
				{
					%>
				<tr><td colspan="<%=features.size()+1%>">No Data Found.</td></tr><%
				}
				else
				{
				SimpleDateFormat df = null;
				
				for(Iterator i = items.iterator(); i.hasNext(); )
				{
					final Item item = (Item)i.next();
					%>
				<tr>
					<td><a href="<%=(cop.toItem(item))%>"><%=cop.getDisplayName(language, item)%></a></td><%
					for(Iterator j = features.iterator(); j.hasNext(); )
					{
						final Feature feature = (Feature)j.next();
						%>
					<td><%
						if(feature instanceof DataField)
						{
							final DataField dataAttribute = (DataField)feature;
							final Media media = Media.get(dataAttribute);
							final String url = media.getURL(item);
							if(url==null)
							{
								%><%=cop.getDisplayNameNull()%><%
							}
							else
							{
								%><a href="<%=url%>"><%
								if(media.getContentType(item).startsWith("image/"))
								{
									%><img src="<%=url%>" width="50"><%
								}
								else
								{
									%>download<%
								}
								%></a><%
							}
						}
						else if(feature instanceof ItemField)
						{
							final Item value = ((ItemField<?>)feature).get(item);
							if(value==null)
							{
								%><%=cop.getDisplayNameNull()%><%
							}
							else
							{
								%><a href="<%=(cop.toItem(value))%>"><%=cop.getDisplayName(language, value)%></a><%
							}
						}
						else if(feature instanceof DateField)
						{
							final Date value = ((DateField)feature).get(item);
							if(value==null)
							{
								%><%=cop.getDisplayNameNull()%><%
							}
							else
							{
								if(df==null)
									df = new SimpleDateFormat(com.exedio.cops.DateField.DATE_FORMAT_FULL);
								%><%=df.format(value)%><%
							}
						}
						else if(feature instanceof EnumField)
						{
							final Enum value = ((EnumField<?>)feature).get(item);
							if(value==null)
							{
								%><%=cop.getDisplayNameNull()%><%
							}
							else
							{
								%><%=cop.getDisplayName(value)%><%
							}
						}
						else if(feature instanceof BooleanField)
						{
							final Boolean value = ((BooleanField)feature).get(item);
							if(value==null)
							{
								%><%=cop.getDisplayNameNull()%><%
							}
							else
							{
								%><%=value.booleanValue()?cop.getDisplayNameOn():cop.getDisplayNameOff()%><%
							}
						}
						else if(feature instanceof Pattern)
							;
						else if(feature instanceof UniqueConstraint)
							;
						else
						{
							%><%=item.get((Function<?>)feature)%><%
						}
						%></td><%
					}
					%>
				</tr><%
				}
				}
			%>
			</table>

			<%
			if(items.size()>5)
				writePager(out, cop);
			
			final List<QueryInfo> infos = cop.getQueryInfos();
			for(final QueryInfo info : infos)
			{
				%><ul style="background-color:#ccc">
				<li><%
				writeInfo(out, info);
				%></li>
				</ul><%
			}
	}
}
%>