
timestamps
{
	def jdk = 'openjdk-11'
	def isRelease = env.BRANCH_NAME.toString().equals("master")

	properties([
			buildDiscarder(logRotator(
					numToKeepStr         : isRelease ? '1000' : '30',
					artifactNumToKeepStr : isRelease ?  '100' :  '2'
			))
	])

	//noinspection GroovyAssignabilityCheck
	node('GitCloneExedio && docker')
	{
		try
		{
			abortable
			{
				echo("Delete working dir before build")
				deleteDir()

				def buildTag = makeBuildTag(checkout(scm))

				def dockerName = env.JOB_NAME.replace("/", "-") + "-" + env.BUILD_NUMBER
				def dockerDate = new Date().format("yyyyMMdd")
				def mainImage = docker.build(
						'exedio-jenkins:' + dockerName + '-' + dockerDate,
						'--build-arg RELEASE=buster ' +
						'--build-arg JDK=' + jdk + ' ' +
						'--build-arg JAVAHOME=/usr/lib/jvm/java-11-openjdk-amd64 ' +
						'conf/main')

				def bridge = sh ( script:
						"docker network create " +
								dockerName + "-net " +
								"--driver bridge " +
								"--internal",
						returnStdout: true).trim()
				try
				{
					mainImage.inside(
							"--name '" + dockerName + "' " +
							"--cap-drop all " +
							"--security-opt no-new-privileges " +
							"--network " + bridge)
					{
						sh "ant/bin/ant -noinput clean jenkins" +
								' "-Dbuild.revision=${BUILD_NUMBER}"' +
								' "-Dbuild.tag=' + buildTag + '"' +
								' -Dbuild.status=' + (isRelease?'release':'integration') +
								' -Dinstrument.verify=true' +
								' -Ddisable-ansi-colors=true' +
								' -Druntime.test.ClusterNetworkTest.multicast=' + multicastAddress() +
								' -Druntime.test.ClusterNetworkTest.port.A=' + port(0) +
								' -Druntime.test.ClusterNetworkTest.port.B=' + port(1) +
								' -Druntime.test.ClusterNetworkTest.port.C=' + port(2)
					}
				}
				finally
				{
					sh "docker network rm " + bridge
				}

				recordIssues(
						failOnError: true,
						enabledForFailure: true,
						ignoreFailedBuilds: false,
						qualityGates: [[threshold: 1, type: 'TOTAL', unstable: true]],
						tools: [
							java(),
						],
				)
				plot(
						csvFileName: 'plots.csv',
						exclZero: false,
						keepRecords: false,
						group: 'Sizes',
						title: '1: exedio-cope.jar',
						numBuilds: '150',
						style: 'line',
						useDescr: false,
						propertiesSeries: [
							[ file: 'build/exedio-cope.jar-plot.properties',     label: 'exedio-cope.jar' ],
							[ file: 'build/exedio-cope-src.zip-plot.properties', label: 'exedio-cope-src.zip' ],
						],
				)
				plot(
						csvFileName: 'plots-dialect.csv',
						exclZero: false,
						keepRecords: false,
						group: 'Sizes',
						title: '2: exedio-cope-dialect.jar',
						numBuilds: '150',
						style: 'line',
						useDescr: false,
						propertiesSeries: [
							[ file: 'build/exedio-cope-hsqldb.jar-plot.properties',     label: 'exedio-cope-hsqldb.jar' ],
							[ file: 'build/exedio-cope-mysql.jar-plot.properties',      label: 'exedio-cope-mysql.jar' ],
							[ file: 'build/exedio-cope-postgresql.jar-plot.properties', label: 'exedio-cope-postgresql.jar' ],
						],
				)
				plot(
						csvFileName: 'plots-instrument.csv',
						exclZero: false,
						keepRecords: false,
						group: 'Sizes',
						title: '3: exedio-cope-instrument.jar',
						numBuilds: '150',
						style: 'line',
						useDescr: false,
						propertiesSeries: [[
							file: 'build/exedio-cope-instrument.jar-plot.properties',
							label:      'exedio-cope-instrument.jar',
						]],
				)
				plot(
						csvFileName: 'plots-instrument-annotations.csv',
						exclZero: false,
						keepRecords: false,
						group: 'Sizes',
						title: '4: exedio-cope-instrument-annotations.jar',
						numBuilds: '150',
						style: 'line',
						useDescr: false,
						propertiesSeries: [[
							file: 'build/exedio-cope-instrument-annotations.jar-plot.properties',
							label:      'exedio-cope-instrument-annotations.jar',
						]],
				)
				plot(
						csvFileName: 'plots-instrument-completion.csv',
						exclZero: false,
						keepRecords: false,
						group: 'Sizes',
						title: '5: exedio-cope-instrument-completion.jar',
						numBuilds: '150',
						style: 'line',
						useDescr: false,
						propertiesSeries: [[
							file: 'build/exedio-cope-instrument-completion.jar-plot.properties',
							label:      'exedio-cope-instrument-completion.jar',
						]],
				)
			}
		}
		catch(Exception e)
		{
			//todo handle script returned exit code 143
			throw e
		}
		finally
		{
			// because junit failure aborts ant
			junit(
					allowEmptyResults: false,
					testResults: 'build/testresults/**/*.xml',
			)
			archiveArtifacts(
					'build/ThumbnailTest/*,' +
					'build/testprotocol.*,' +
					'build/classes/runtime/src/com/exedio/cope/testprotocol.properties,' +
					'build/*.log,' +
					'tomcat/logs/*,' +
					'build/testtmpdir'
			)
			def to = emailextrecipients([culprits(), requestor()])
			//TODO details
			step([$class: 'Mailer',
					recipients: to,
					attachLog: true,
					notifyEveryUnstableBuild: true])

			echo("Delete working dir after build")
			deleteDir()
		}
	}
}

def abortable(Closure body)
{
	try
	{
		body.call()
	}
	catch(hudson.AbortException e)
	{
		if(e.getMessage().contains("exit code 143"))
			return
		throw e
	}
}

def makeBuildTag(scmResult)
{
	return 'build ' +
			env.BRANCH_NAME + ' ' +
			env.BUILD_NUMBER + ' ' +
			new Date().format("yyyy-MM-dd") + ' ' +
			scmResult.GIT_COMMIT + ' ' +
			sh (script: "git cat-file -p " + scmResult.GIT_COMMIT + " | grep '^tree ' | sed -e 's/^tree //'", returnStdout: true).trim()
}

def port(int offset)
{
	return 28000 + 10*env.EXECUTOR_NUMBER.toInteger() + offset
}

def multicastAddress()
{
	// Multicast address for Local subnetwork (Not routable, 224.0.0.0 to 224.0.0.255).
	// Not one of the "Notable addresses":
	// https://en.wikipedia.org/wiki/Multicast_address
	return "224.0.0." + (60 + env.EXECUTOR_NUMBER_HOST_OFFSET.toInteger() + env.EXECUTOR_NUMBER.toInteger())
}
