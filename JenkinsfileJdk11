
timestamps
{
	def jdk = 'openjdk-11'
	def isRelease = env.BRANCH_NAME.toString().equals("master")

	properties([
			gitLabConnection(env.GITLAB_CONNECTION),
			buildDiscarder(logRotator(
					numToKeepStr         : isRelease ?  '500' : '30',
					artifactNumToKeepStr : isRelease ?  '100' :  '2'
			))
	])

	//noinspection GroovyAssignabilityCheck
	node('GitCloneExedio && docker')
	{
		try
		{
			abortable
			{
				echo("Delete working dir before build")
				deleteDir()

				def buildTag = makeBuildTag(checkout(scm))
				updateGitlabCommitStatus name: 'Jdk11', state: 'running'

				def dockerName = env.JOB_NAME.replace("/", "-") + "-" + env.BUILD_NUMBER
				def dockerDate = new Date().format("yyyyMMdd")
				def mainImage = docker.build(
						'exedio-jenkins:' + dockerName + '-' + dockerDate,
						'--build-arg RELEASE=buster ' +
						'--build-arg JDK=' + jdk + ' ' +
						'--build-arg JAVAHOME=/usr/lib/jvm/java-11-openjdk-amd64 ' +
						'conf/main')
				def apacheImage = docker.build(
						'exedio-jenkins:' + dockerName + '-' + dockerDate + '-apache',
						'conf/apache')
				sh "mkdir VaultHttpServiceDocumentRoot"
				sh "mkdir VaultHttpServiceDocumentRoot/myContent"

				def bridge = sh ( script:
						"docker network create " +
								dockerName + "-net " +
								"--driver bridge " +
								"--internal",
						returnStdout: true).trim()
				try
				{
					apacheImage.withRun(
							"--name '" + dockerName + "-apache' " +
							"--cap-drop all " +
							"--cap-add SETGID " + // in apache.log get rid of: [unixd:alert] (1)Operation not permitted: AH02156: setgid: unable to set group id to Group 33
							"--cap-add SETUID " + // in apache.log fixes: [unixd:alert] (1)Operation not permitted: AH02162: setuid: unable to change to uid: 33
							"--security-opt no-new-privileges " +
							"--network " + bridge + " " +
							"--network-alias=test_apache_host " +
							"--mount type=bind,src=" + env.WORKSPACE + "/VaultHttpServiceDocumentRoot/myContent,target=/usr/local/apache2/htdocs " +
							"--dns-opt timeout:1 --dns-opt attempts:1") // fail faster
					{ a ->

					mainImage.inside(
							"--name '" + dockerName + "' " +
							"--group-add copevaultfilesv1 " + // VaultFileServicePosixGroupTest#testGroupFile
							"--group-add copevaultfilesv2 " + // VaultFileServicePosixGroupTest#testGroupDirectory
							"--cap-drop all " +
							"--security-opt no-new-privileges " +
							"--network " + bridge)
					{
						sh "ant/bin/ant -noinput clean jenkins" +
								' "-Dbuild.revision=${BUILD_NUMBER}"' +
								' "-Dbuild.tag=' + buildTag + '"' +
								' -Dbuild.status=' + (isRelease?'release':'integration') +
								' -Dinstrument.verify=true' +
								' -Ddisable-ansi-colors=true' +
								' -Druntime.test.ClusterNetworkTest.multicast=' + multicastAddress() +
								' -Druntime.test.ClusterNetworkTest.port.A=' + port(0) +
								' -Druntime.test.ClusterNetworkTest.port.B=' + port(1) +
								' -Druntime.test.ClusterNetworkTest.port.C=' + port(2) +
								' -Druntime.test.VaultHttpServiceTest.url=http://test_apache_host' +
								' -Druntime.test.VaultHttpServiceTest.dir=VaultHttpServiceDocumentRoot'
					}
						sh "docker logs " + a.id + " &> apache.log"
						archiveArtifacts 'apache.log'
					}
				}
				finally
				{
					sh "docker network rm " + bridge
				}

				recordIssues(
						failOnError: true,
						enabledForFailure: true,
						ignoreFailedBuilds: false,
						qualityGates: [[threshold: 1, type: 'TOTAL', unstable: true]],
						tools: [
							java(),
						],
				)
				plot(
						csvFileName: 'plots.csv',
						exclZero: false,
						keepRecords: false,
						group: 'Sizes',
						title: '1: exedio-cope.jar',
						numBuilds: '150',
						style: 'line',
						useDescr: false,
						propertiesSeries: [
							[ file: 'build/exedio-cope.jar-plot.properties',     label: 'exedio-cope.jar' ],
							[ file: 'build/exedio-cope-src.zip-plot.properties', label: 'exedio-cope-src.zip' ],
						],
				)
				plot(
						csvFileName: 'plots-dialect.csv',
						exclZero: false,
						keepRecords: false,
						group: 'Sizes',
						title: '2: exedio-cope-dialect.jar',
						numBuilds: '150',
						style: 'line',
						useDescr: false,
						propertiesSeries: [
							[ file: 'build/exedio-cope-hsqldb.jar-plot.properties',     label: 'exedio-cope-hsqldb.jar' ],
							[ file: 'build/exedio-cope-mysql.jar-plot.properties',      label: 'exedio-cope-mysql.jar' ],
							[ file: 'build/exedio-cope-postgresql.jar-plot.properties', label: 'exedio-cope-postgresql.jar' ],
						],
				)
				plot(
						csvFileName: 'plots-instrument.csv',
						exclZero: false,
						keepRecords: false,
						group: 'Sizes',
						title: '3: exedio-cope-instrument.jar',
						numBuilds: '150',
						style: 'line',
						useDescr: false,
						propertiesSeries: [[
							file: 'build/exedio-cope-instrument.jar-plot.properties',
							label:      'exedio-cope-instrument.jar',
						]],
				)
				plot(
						csvFileName: 'plots-instrument-annotations.csv',
						exclZero: false,
						keepRecords: false,
						group: 'Sizes',
						title: '4: exedio-cope-instrument-annotations.jar',
						numBuilds: '150',
						style: 'line',
						useDescr: false,
						propertiesSeries: [[
							file: 'build/exedio-cope-instrument-annotations.jar-plot.properties',
							label:      'exedio-cope-instrument-annotations.jar',
						]],
				)
				plot(
						csvFileName: 'plots-instrument-completion.csv',
						exclZero: false,
						keepRecords: false,
						group: 'Sizes',
						title: '5: exedio-cope-instrument-completion.jar',
						numBuilds: '150',
						style: 'line',
						useDescr: false,
						propertiesSeries: [[
							file: 'build/exedio-cope-instrument-completion.jar-plot.properties',
							label:      'exedio-cope-instrument-completion.jar',
						]],
				)
			}
		}
		catch(Exception e)
		{
			//todo handle script returned exit code 143
			throw e
		}
		finally
		{
			// because junit failure aborts ant
			junit(
					allowEmptyResults: false,
					testResults: 'build/testresults/**/*.xml',
			)
			archiveArtifacts(
					'build/ThumbnailTest/*,' +
					'build/testprotocol.*,' +
					'build/classes/runtime/src/com/exedio/cope/testprotocol.properties,' +
					'build/*.log,' +
					'tomcat/logs/*,' +
					'build/testtmpdir'
			)
			def to = emailextrecipients([culprits(), requestor()])
			//TODO details
			step([$class: 'Mailer',
					recipients: to,
					attachLog: true,
					notifyEveryUnstableBuild: true])

			updateGitlabCommitStatus name: 'Jdk11', state: currentBuild.resultIsBetterOrEqualTo("SUCCESS") ? "success" : "failed" // https://docs.gitlab.com/ee/api/commits.html#post-the-build-status-to-a-commit
			echo("Delete working dir after build")
			deleteDir()
		}
	}
}

def abortable(Closure body)
{
	try
	{
		body.call()
	}
	catch(hudson.AbortException e)
	{
		if(e.getMessage().contains("exit code 143"))
			return
		throw e
	}
}

def makeBuildTag(scmResult)
{
	return 'build ' +
			env.BRANCH_NAME + ' ' +
			env.BUILD_NUMBER + ' ' +
			new Date().format("yyyy-MM-dd") + ' ' +
			scmResult.GIT_COMMIT + ' ' +
			sh (script: "git cat-file -p " + scmResult.GIT_COMMIT + " | grep '^tree ' | sed -e 's/^tree //'", returnStdout: true).trim()
}

def port(int offset)
{
	return 28000 + 10*env.EXECUTOR_NUMBER.toInteger() + offset
}

def multicastAddress()
{
	// Multicast address for Local subnetwork (Not routable, 224.0.0.0 to 224.0.0.255).
	// Not one of the "Notable addresses":
	// https://en.wikipedia.org/wiki/Multicast_address
	return "224.0.0." + (60 + env.EXECUTOR_NUMBER_HOST_OFFSET.toInteger() + env.EXECUTOR_NUMBER.toInteger())
}
