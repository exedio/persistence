/*
 * Copyright (C) 2004-2015  exedio GmbH (www.exedio.com)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package com.exedio.cope;

public final class DatePrecisionItemInstrumented extends Item
{
	static final DateField millis  = new DateField();
	static final DateField seconds = new DateField().seconds();
	static final DateField minutes = new DateField().minutes();
	static final DateField hours   = new DateField().hours();

	static final DateField finalMillis  = new DateField().toFinal();
	static final DateField finalSeconds = new DateField().toFinal().seconds();
	static final DateField finalMinutes = new DateField().toFinal().minutes();
	static final DateField finalHours   = new DateField().toFinal().hours();


	/**

	 **
	 * Creates a new DatePrecisionItemInstrumented with all the fields initially needed.
	 * @param millis the initial value for field {@link #millis}.
	 * @param seconds the initial value for field {@link #seconds}.
	 * @param minutes the initial value for field {@link #minutes}.
	 * @param hours the initial value for field {@link #hours}.
	 * @param finalMillis the initial value for field {@link #finalMillis}.
	 * @param finalSeconds the initial value for field {@link #finalSeconds}.
	 * @param finalMinutes the initial value for field {@link #finalMinutes}.
	 * @param finalHours the initial value for field {@link #finalHours}.
	 * @throws com.exedio.cope.MandatoryViolationException if millis, seconds, minutes, hours, finalMillis, finalSeconds, finalMinutes, finalHours is null.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tags <tt>@cope.constructor public|package|protected|private|none</tt> in the class comment and <tt>@cope.initial</tt> in the comment of fields.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	DatePrecisionItemInstrumented(
				final java.util.Date millis,
				final java.util.Date seconds,
				final java.util.Date minutes,
				final java.util.Date hours,
				final java.util.Date finalMillis,
				final java.util.Date finalSeconds,
				final java.util.Date finalMinutes,
				final java.util.Date finalHours)
			throws
				com.exedio.cope.MandatoryViolationException
	{
		this(new com.exedio.cope.SetValue<?>[]{
			DatePrecisionItemInstrumented.millis.map(millis),
			DatePrecisionItemInstrumented.seconds.map(seconds),
			DatePrecisionItemInstrumented.minutes.map(minutes),
			DatePrecisionItemInstrumented.hours.map(hours),
			DatePrecisionItemInstrumented.finalMillis.map(finalMillis),
			DatePrecisionItemInstrumented.finalSeconds.map(finalSeconds),
			DatePrecisionItemInstrumented.finalMinutes.map(finalMinutes),
			DatePrecisionItemInstrumented.finalHours.map(finalHours),
		});
	}/**

	 **
	 * Creates a new DatePrecisionItemInstrumented and sets the given fields initially.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.generic.constructor public|package|protected|private|none</tt> in the class comment.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	private DatePrecisionItemInstrumented(final com.exedio.cope.SetValue<?>... setValues)
	{
		super(setValues);
	}/**

	 **
	 * Returns the value of {@link #millis}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final java.util.Date getMillis()
	{
		return DatePrecisionItemInstrumented.millis.get(this);
	}/**

	 **
	 * Sets a new value for {@link #millis}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final void setMillis(final java.util.Date millis)
			throws
				com.exedio.cope.MandatoryViolationException
	{
		DatePrecisionItemInstrumented.millis.set(this,millis);
	}/**

	 **
	 * Sets the current date for the date field {@link #millis}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.touch public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final void touchMillis()
	{
		DatePrecisionItemInstrumented.millis.touch(this);
	}/**

	 **
	 * Returns the value of {@link #seconds}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final java.util.Date getSeconds()
	{
		return DatePrecisionItemInstrumented.seconds.get(this);
	}/**

	 **
	 * Sets a new value for {@link #seconds}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final void setSeconds(final java.util.Date seconds)
			throws
				com.exedio.cope.MandatoryViolationException
	{
		DatePrecisionItemInstrumented.seconds.set(this,seconds);
	}/**

	 **
	 * Sets a new value for {@link #seconds}, but rounds it before according to precision of field.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.setAndRoundDown public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final void setSecondsAndRoundDown(final java.util.Date seconds)
			throws
				com.exedio.cope.MandatoryViolationException
	{
		DatePrecisionItemInstrumented.seconds.setAndRoundDown(this,seconds);
	}/**

	 **
	 * Sets a new value for {@link #seconds}, but rounds it before according to precision of field.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.setAndRoundUp public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final void setSecondsAndRoundUp(final java.util.Date seconds)
			throws
				com.exedio.cope.MandatoryViolationException
	{
		DatePrecisionItemInstrumented.seconds.setAndRoundUp(this,seconds);
	}/**

	 **
	 * Sets the current date for the date field {@link #seconds}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.touch public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final void touchSeconds()
	{
		DatePrecisionItemInstrumented.seconds.touch(this);
	}/**

	 **
	 * Returns the value of {@link #minutes}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final java.util.Date getMinutes()
	{
		return DatePrecisionItemInstrumented.minutes.get(this);
	}/**

	 **
	 * Sets a new value for {@link #minutes}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final void setMinutes(final java.util.Date minutes)
			throws
				com.exedio.cope.MandatoryViolationException
	{
		DatePrecisionItemInstrumented.minutes.set(this,minutes);
	}/**

	 **
	 * Sets a new value for {@link #minutes}, but rounds it before according to precision of field.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.setAndRoundDown public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final void setMinutesAndRoundDown(final java.util.Date minutes)
			throws
				com.exedio.cope.MandatoryViolationException
	{
		DatePrecisionItemInstrumented.minutes.setAndRoundDown(this,minutes);
	}/**

	 **
	 * Sets a new value for {@link #minutes}, but rounds it before according to precision of field.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.setAndRoundUp public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final void setMinutesAndRoundUp(final java.util.Date minutes)
			throws
				com.exedio.cope.MandatoryViolationException
	{
		DatePrecisionItemInstrumented.minutes.setAndRoundUp(this,minutes);
	}/**

	 **
	 * Sets the current date for the date field {@link #minutes}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.touch public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final void touchMinutes()
	{
		DatePrecisionItemInstrumented.minutes.touch(this);
	}/**

	 **
	 * Returns the value of {@link #hours}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final java.util.Date getHours()
	{
		return DatePrecisionItemInstrumented.hours.get(this);
	}/**

	 **
	 * Sets a new value for {@link #hours}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final void setHours(final java.util.Date hours)
			throws
				com.exedio.cope.MandatoryViolationException
	{
		DatePrecisionItemInstrumented.hours.set(this,hours);
	}/**

	 **
	 * Sets a new value for {@link #hours}, but rounds it before according to precision of field.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.setAndRoundDown public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final void setHoursAndRoundDown(final java.util.Date hours)
			throws
				com.exedio.cope.MandatoryViolationException
	{
		DatePrecisionItemInstrumented.hours.setAndRoundDown(this,hours);
	}/**

	 **
	 * Sets a new value for {@link #hours}, but rounds it before according to precision of field.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.setAndRoundUp public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final void setHoursAndRoundUp(final java.util.Date hours)
			throws
				com.exedio.cope.MandatoryViolationException
	{
		DatePrecisionItemInstrumented.hours.setAndRoundUp(this,hours);
	}/**

	 **
	 * Sets the current date for the date field {@link #hours}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.touch public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final void touchHours()
	{
		DatePrecisionItemInstrumented.hours.touch(this);
	}/**

	 **
	 * Returns the value of {@link #finalMillis}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final java.util.Date getFinalMillis()
	{
		return DatePrecisionItemInstrumented.finalMillis.get(this);
	}/**

	 **
	 * Returns the value of {@link #finalSeconds}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final java.util.Date getFinalSeconds()
	{
		return DatePrecisionItemInstrumented.finalSeconds.get(this);
	}/**

	 **
	 * Returns the value of {@link #finalMinutes}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final java.util.Date getFinalMinutes()
	{
		return DatePrecisionItemInstrumented.finalMinutes.get(this);
	}/**

	 **
	 * Returns the value of {@link #finalHours}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final java.util.Date getFinalHours()
	{
		return DatePrecisionItemInstrumented.finalHours.get(this);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	private static final long serialVersionUID = 1l;/**

	 **
	 * The persistent type information for datePrecisionItemInstrumented.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.type public|package|protected|private|none</tt> in the class comment.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	public static final com.exedio.cope.Type<DatePrecisionItemInstrumented> TYPE = com.exedio.cope.TypesBound.newType(DatePrecisionItemInstrumented.class);/**

	 **
	 * Activation constructor. Used for internal purposes only.
	 * @see com.exedio.cope.Item#Item(com.exedio.cope.ActivationParameters)
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	@SuppressWarnings("unused") private DatePrecisionItemInstrumented(final com.exedio.cope.ActivationParameters ap){super(ap);
}}
