/*
 * Copyright (C) 2004-2012  exedio GmbH (www.exedio.com)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package com.exedio.cope.pattern;

import static com.exedio.cope.pattern.BlockFieldMediaFilterTest.ABlock.filter;
import static com.exedio.cope.pattern.BlockFieldMediaFilterTest.ABlock.source;
import static com.exedio.cope.pattern.BlockFieldMediaFilterTest.AnItem.eins;
import static com.exedio.cope.pattern.BlockFieldMediaFilterTest.AnItem.zwei;

import com.exedio.cope.AbstractRuntimeModelTest;
import com.exedio.cope.Feature;
import com.exedio.cope.Model;
import com.exedio.cope.StringField;
import java.util.Arrays;

public class BlockFieldMediaFilterTest extends AbstractRuntimeModelTest
{
	static final Model MODEL = new Model(AnItem.TYPE);

	static
	{
		MODEL.enableSerialization(BlockFieldMediaFilterTest.class, "MODEL");
	}

	public BlockFieldMediaFilterTest()
	{
		super(MODEL);
	}

	public void testModel()
	{
		assertEqualsUnmodifiable(Arrays.asList(new Feature[]{
				AnItem.TYPE.getThis(),
				AnItem.code,
				eins,
				eins.of(source), eins.of(source).getBody(), eins.of(source).getLastModified(), eins.of(filter),
				zwei,
				zwei.of(source), zwei.of(source).getBody(), zwei.of(source).getLastModified(), zwei.of(filter),
			}), AnItem.TYPE.getDeclaredFeatures());


		assertEquals(AnItem.TYPE, eins.of(source ).getType());
		assertEquals(AnItem.TYPE, eins.of(filter).getType());
		assertEquals(AnItem.TYPE, eins.getType());
		assertEquals("eins-source", eins.of(source).getName());
		assertEquals("eins-filter", eins.of(filter).getName());
		assertEquals("eins", eins.getName());
		assertEquals(ABlock.class.getName() + "#source", source.toString());
		assertEquals(ABlock.class.getName() + "#filter", filter.toString());
		assertEquals("AnItem.eins-source", eins.of(source).toString());
		assertEquals("AnItem.eins-filter", eins.of(filter).toString());
		assertEquals("AnItem.eins", eins.toString());
		assertEquals(eins, eins.of(source).getPattern());
		assertEquals(eins, eins.of(filter).getPattern());
		assertEqualsUnmodifiable(list(
				eins.of(source), eins.of(filter)),
			eins.getSourceFeatures());

		assertEquals(eins.of(source), eins.of(filter).getSource());
		assertEquals(zwei.of(source), zwei.of(filter).getSource());
		assertEquals(source, filter.getSource());

		assertEquals(ABlock.TYPE, eins.getValueType());
		assertEquals(ABlock.class, eins.getValueClass());

		assertSame(source, eins.getTemplate(eins.of(source)));
		assertSame(source, zwei.getTemplate(zwei.of(source)));
		assertEqualsUnmodifiable(list(eins.of(source), eins.of(filter)), eins.getComponents());
		assertEqualsUnmodifiable(list(zwei.of(source), zwei.of(filter)), zwei.getComponents());
		assertEqualsUnmodifiable(list(source, filter), eins.getTemplates());
	}

	public void testPersistence()
	{
		final AnItem i1 = new AnItem("item1");
		assertEquals("item1", i1.getCode());

		final ABlock b1a = i1.eins();
		final ABlock b1b = i1.zwei();
		assertEquals(null, b1a.getSourceURL());
		assertEquals(null, b1a.getFilterURL());
		assertEquals(null, b1b.getSourceURL());
		assertEquals(null, b1b.getFilterURL());

		b1a.setSource(new byte[]{1,2,3}, MediaType.JPEG);
		assertEquals(mediaRootUrl + "AnItem/eins-source/"+i1+".jpg", b1a.getSourceURL());
		assertEquals(mediaRootUrl + "AnItem/eins-filter/"+i1+".jpg", b1a.getFilterURL());
		assertEquals(null, b1b.getSourceURL());
		assertEquals(null, b1b.getFilterURL());
	}

	static final class ABlock extends Block
	{
		static final Media source = new Media().optional().contentType(MediaType.JPEG);
		static final MediaImageMagickThumbnail filter = new MediaImageMagickThumbnail(source, 10, 20);


	/**

	 **
	 * Returns a URL the content of {@link #source} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getURL public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getSourceURL()
	{
		return field().of(ABlock.source).getURL(item());
	}/**

	 **
	 * Returns a Locator the content of {@link #source} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLocator public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final com.exedio.cope.pattern.MediaPath.Locator getSourceLocator()
	{
		return field().of(ABlock.source).getLocator(item());
	}/**

	 **
	 * Returns whether media {@link #source} is null.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.isNull public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final boolean isSourceNull()
	{
		return field().of(ABlock.source).isNull(item());
	}/**

	 **
	 * Returns the last modification date of media {@link #source}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLastModified public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.util.Date getSourceLastModified()
	{
		return field().of(ABlock.source).getLastModified(item());
	}/**

	 **
	 * Returns the body length of the media {@link #source}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLength public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final long getSourceLength()
	{
		return field().of(ABlock.source).getLength(item());
	}/**

	 **
	 * Returns the body of the media {@link #source}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getBody public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final byte[] getSourceBody()
	{
		return field().of(ABlock.source).getBody(item());
	}/**

	 **
	 * Writes the body of media {@link #source} into the given stream.
	 * Does nothing, if the media is null.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getBody public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void getSourceBody(final java.io.OutputStream body)
			throws
				java.io.IOException
	{
		field().of(ABlock.source).getBody(item(),body);
	}/**

	 **
	 * Writes the body of media {@link #source} into the given file.
	 * Does nothing, if the media is null.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getBody public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void getSourceBody(final java.io.File body)
			throws
				java.io.IOException
	{
		field().of(ABlock.source).getBody(item(),body);
	}/**

	 **
	 * Sets the content of media {@link #source}.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setSource(final com.exedio.cope.pattern.Media.Value source)
			throws
				java.io.IOException
	{
		field().of(ABlock.source).set(item(),source);
	}/**

	 **
	 * Sets the content of media {@link #source}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setSource(final byte[] body,final java.lang.String contentType)
	{
		field().of(ABlock.source).set(item(),body,contentType);
	}/**

	 **
	 * Sets the content of media {@link #source}.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setSource(final java.io.InputStream body,final java.lang.String contentType)
			throws
				java.io.IOException
	{
		field().of(ABlock.source).set(item(),body,contentType);
	}/**

	 **
	 * Sets the content of media {@link #source}.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setSource(final java.io.File body,final java.lang.String contentType)
			throws
				java.io.IOException
	{
		field().of(ABlock.source).set(item(),body,contentType);
	}/**

	 **
	 * Returns a URL the content of {@link #filter} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getURL public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getFilterURL()
	{
		return field().of(ABlock.filter).getURL(item());
	}/**

	 **
	 * Returns a Locator the content of {@link #filter} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLocator public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final com.exedio.cope.pattern.MediaPath.Locator getFilterLocator()
	{
		return field().of(ABlock.filter).getLocator(item());
	}/**

	 **
	 * Returns the body of {@link #filter}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final byte[] getFilter()
			throws
				java.io.IOException
	{
		return field().of(ABlock.filter).get(item());
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	private static final long serialVersionUID = 1l;/**

	 **
	 * The type information for aBlock.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.type public|package|protected|private|none</tt> in the class comment.
	 */
	static final com.exedio.cope.pattern.BlockType<ABlock> TYPE = com.exedio.cope.pattern.BlockType.newType(ABlock.class);/**

	 **
	 * Activation constructor. Used for internal purposes only.
	 * @see com.exedio.cope.pattern.Block#Block(com.exedio.cope.pattern.BlockActivationParameters)
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	@SuppressWarnings("unused") private ABlock(final com.exedio.cope.pattern.BlockActivationParameters ap){super(ap);
}}

	static final class AnItem extends com.exedio.cope.Item
	{
		static final StringField code = new StringField().toFinal();

		static final BlockField<ABlock> eins = BlockField.create(ABlock.TYPE);
		static final BlockField<ABlock> zwei = BlockField.create(ABlock.TYPE);


	/**

	 **
	 * Creates a new AnItem with all the fields initially needed.
	 * @param code the initial value for field {@link #code}.
	 * @throws com.exedio.cope.MandatoryViolationException if code is null.
	 * @throws com.exedio.cope.StringLengthViolationException if code violates its length constraint.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tags <tt>@cope.constructor public|package|protected|private|none</tt> in the class comment and <tt>@cope.initial</tt> in the comment of fields.
	 */
	AnItem(
				final java.lang.String code)
			throws
				com.exedio.cope.MandatoryViolationException,
				com.exedio.cope.StringLengthViolationException
	{
		this(new com.exedio.cope.SetValue<?>[]{
			AnItem.code.map(code),
		});
	}/**

	 **
	 * Creates a new AnItem and sets the given fields initially.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.generic.constructor public|package|protected|private|none</tt> in the class comment.
	 */
	private AnItem(final com.exedio.cope.SetValue<?>... setValues)
	{
		super(setValues);
	}/**

	 **
	 * Returns the value of {@link #code}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getCode()
	{
		return AnItem.code.get(this);
	}/**

	 **
	 * Returns the value of {@link #eins}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope. public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final ABlock eins()
	{
		return AnItem.eins.get(this);
	}/**

	 **
	 * Returns the value of {@link #zwei}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope. public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final ABlock zwei()
	{
		return AnItem.zwei.get(this);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	private static final long serialVersionUID = 1l;/**

	 **
	 * The persistent type information for anItem.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.type public|package|protected|private|none</tt> in the class comment.
	 */
	static final com.exedio.cope.Type<AnItem> TYPE = com.exedio.cope.TypesBound.newType(AnItem.class);/**

	 **
	 * Activation constructor. Used for internal purposes only.
	 * @see com.exedio.cope.Item#Item(com.exedio.cope.ActivationParameters)
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	@SuppressWarnings("unused") private AnItem(final com.exedio.cope.ActivationParameters ap){super(ap);
}}
}

