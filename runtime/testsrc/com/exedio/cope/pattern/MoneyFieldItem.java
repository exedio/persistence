/*
 * Copyright (C) 2004-2012  exedio GmbH (www.exedio.com)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package com.exedio.cope.pattern;

import static com.exedio.cope.pattern.Money.valueOf;
import static com.exedio.cope.pattern.MoneyFieldItem.Currency.eur;

import com.exedio.cope.EnumField;
import com.exedio.cope.Item;

public final class MoneyFieldItem extends Item
{
	enum Currency implements Money.Currency {eur,gbp}

	static final EnumField<Currency> currency = EnumField.create(Currency.class);

	static final MoneyField<Currency> shared = MoneyField.shared(currency).optional();

	static MoneyFieldItem shared(final Currency currency, final Money<Currency> shared)
	{
		return new MoneyFieldItem(
			MoneyFieldItem.currency.map(currency),
			MoneyFieldItem.shared.map(shared),
			MoneyFieldItem.sharedMandatory.map(eurX)
		);
	}


	static final MoneyField<Currency> sharedMandatory = MoneyField.shared(currency);

	static MoneyFieldItem sharedMandatory(
			final Currency currency,
			final Money<Currency> sharedMandatory)
	{
		return new MoneyFieldItem(
			MoneyFieldItem.currency.map(currency),
			MoneyFieldItem.shared.map(eurX),
			MoneyFieldItem.sharedMandatory.map(sharedMandatory)
		);
	}

	static MoneyFieldItem sharedMandatory(
			final Currency currency,
			final Money<Currency> shared,
			final Money<Currency> sharedMandatory)
	{
		return new MoneyFieldItem(
			MoneyFieldItem.currency.map(currency),
			MoneyFieldItem.shared.map(shared),
			MoneyFieldItem.sharedMandatory.map(sharedMandatory)
		);
	}


	static final MoneyField<Currency> exclusive = MoneyField.exclusive(EnumField.create(Currency.class)).optional();

	static MoneyFieldItem exclusive(final Money<Currency> exclusive)
	{
		return new MoneyFieldItem(
			MoneyFieldItem.currency.map(eur),
			MoneyFieldItem.sharedMandatory.map(eurX),
			MoneyFieldItem.exclusive.map(exclusive)
		);
	}

	Currency getExclusiveCurrency()
	{
		return exclusive.getCurrency().get(this);
	}


	private static final Money<Currency> eurX = valueOf(8888.88, eur);

	/**

	 **
	 * Creates a new MoneyFieldItem with all the fields initially needed.
	 * @param currency the initial value for field {@link #currency}.
	 * @param sharedMandatory the initial value for field {@link #sharedMandatory}.
	 * @throws com.exedio.cope.MandatoryViolationException if currency, sharedMandatory is null.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tags <tt>@cope.constructor public|package|protected|private|none</tt> in the class comment and <tt>@cope.initial</tt> in the comment of fields.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	MoneyFieldItem(
				final Currency currency,
				final com.exedio.cope.pattern.Money<Currency> sharedMandatory)
			throws
				com.exedio.cope.MandatoryViolationException
	{
		this(new com.exedio.cope.SetValue<?>[]{
			MoneyFieldItem.currency.map(currency),
			MoneyFieldItem.sharedMandatory.map(sharedMandatory),
		});
	}/**

	 **
	 * Creates a new MoneyFieldItem and sets the given fields initially.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.generic.constructor public|package|protected|private|none</tt> in the class comment.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	private MoneyFieldItem(final com.exedio.cope.SetValue<?>... setValues)
	{
		super(setValues);
	}/**

	 **
	 * Returns the value of {@link #currency}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final Currency getCurrency()
	{
		return MoneyFieldItem.currency.get(this);
	}/**

	 **
	 * Sets a new value for {@link #currency}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final void setCurrency(final Currency currency)
			throws
				com.exedio.cope.MandatoryViolationException
	{
		MoneyFieldItem.currency.set(this,currency);
	}/**

	 **
	 * Returns the value of {@link #shared}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final com.exedio.cope.pattern.Money<Currency> getShared()
	{
		return MoneyFieldItem.shared.get(this);
	}/**

	 **
	 * Sets a new value for {@link #shared}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final void setShared(final com.exedio.cope.pattern.Money<Currency> shared)
	{
		MoneyFieldItem.shared.set(this,shared);
	}/**

	 **
	 * Returns the value of {@link #sharedMandatory}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final com.exedio.cope.pattern.Money<Currency> getSharedMandatory()
	{
		return MoneyFieldItem.sharedMandatory.get(this);
	}/**

	 **
	 * Sets a new value for {@link #sharedMandatory}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final void setSharedMandatory(final com.exedio.cope.pattern.Money<Currency> sharedMandatory)
			throws
				com.exedio.cope.MandatoryViolationException
	{
		MoneyFieldItem.sharedMandatory.set(this,sharedMandatory);
	}/**

	 **
	 * Returns the value of {@link #exclusive}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final com.exedio.cope.pattern.Money<Currency> getExclusive()
	{
		return MoneyFieldItem.exclusive.get(this);
	}/**

	 **
	 * Sets a new value for {@link #exclusive}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final void setExclusive(final com.exedio.cope.pattern.Money<Currency> exclusive)
	{
		MoneyFieldItem.exclusive.set(this,exclusive);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	private static final long serialVersionUID = 1l;/**

	 **
	 * The persistent type information for moneyFieldItem.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.type public|package|protected|private|none</tt> in the class comment.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	public static final com.exedio.cope.Type<MoneyFieldItem> TYPE = com.exedio.cope.TypesBound.newType(MoneyFieldItem.class);/**

	 **
	 * Activation constructor. Used for internal purposes only.
	 * @see com.exedio.cope.Item#Item(com.exedio.cope.ActivationParameters)
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	@SuppressWarnings("unused") private MoneyFieldItem(final com.exedio.cope.ActivationParameters ap){super(ap);
}}
