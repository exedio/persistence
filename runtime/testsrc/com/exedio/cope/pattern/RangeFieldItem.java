/*
 * Copyright (C) 2004-2012  exedio GmbH (www.exedio.com)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package com.exedio.cope.pattern;

import com.exedio.cope.IntegerField;
import com.exedio.cope.Item;
import com.exedio.cope.StringField;

public class RangeFieldItem extends Item
{
	/** @cope.initial */ static final RangeField<Integer> valid = RangeField.create(new IntegerField().optional());
	static final RangeField<String> text = RangeField.create(new StringField().toFinal());

	/**

	 **
	 * Creates a new RangeFieldItem with all the fields initially needed.
	 * @param valid the initial value for field {@link #valid}.
	 * @param text the initial value for field {@link #text}.
	 * @throws com.exedio.cope.MandatoryViolationException if text is null.
	 * @throws com.exedio.cope.StringLengthViolationException if text violates its length constraint.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tags <tt>@cope.constructor public|package|protected|private|none</tt> in the class comment and <tt>@cope.initial</tt> in the comment of fields.
	 */
	RangeFieldItem(
				final com.exedio.cope.pattern.Range<Integer> valid,
				final com.exedio.cope.pattern.Range<String> text)
			throws
				com.exedio.cope.MandatoryViolationException,
				com.exedio.cope.StringLengthViolationException
	{
		this(new com.exedio.cope.SetValue<?>[]{
			RangeFieldItem.valid.map(valid),
			RangeFieldItem.text.map(text),
		});
	}/**

	 **
	 * Creates a new RangeFieldItem and sets the given fields initially.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.generic.constructor public|package|protected|private|none</tt> in the class comment.
	 */
	private RangeFieldItem(final com.exedio.cope.SetValue<?>... setValues)
	{
		super(setValues);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final com.exedio.cope.pattern.Range<Integer> getValid()
	{
		return RangeFieldItem.valid.get(this);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setValid(final com.exedio.cope.pattern.Range<? extends Integer> valid)
	{
		RangeFieldItem.valid.set(this,valid);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getFrom public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final Integer getValidFrom()
	{
		return RangeFieldItem.valid.getFrom(this);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getTo public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final Integer getValidTo()
	{
		return RangeFieldItem.valid.getTo(this);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.setFrom public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setValidFrom(final Integer valid)
	{
		RangeFieldItem.valid.setFrom(this,valid);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.setTo public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setValidTo(final Integer valid)
	{
		RangeFieldItem.valid.setTo(this,valid);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.doesContain public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final boolean doesValidContain(final Integer valid)
	{
		return RangeFieldItem.valid.doesContain(this,valid);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final com.exedio.cope.pattern.Range<String> getText()
	{
		return RangeFieldItem.text.get(this);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getFrom public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final String getTextFrom()
	{
		return RangeFieldItem.text.getFrom(this);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getTo public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final String getTextTo()
	{
		return RangeFieldItem.text.getTo(this);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.doesContain public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final boolean doesTextContain(final String text)
	{
		return RangeFieldItem.text.doesContain(this,text);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	private static final long serialVersionUID = 1l;/**

	 **
	 * The persistent type information for rangeFieldItem.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.type public|package|protected|private|none</tt> in the class comment.
	 */
	public static final com.exedio.cope.Type<RangeFieldItem> TYPE = com.exedio.cope.TypesBound.newType(RangeFieldItem.class);/**

	 **
	 * Activation constructor. Used for internal purposes only.
	 * @see com.exedio.cope.Item#Item(com.exedio.cope.ActivationParameters)
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	@SuppressWarnings("unused") private RangeFieldItem(final com.exedio.cope.ActivationParameters ap){super(ap);
}}
