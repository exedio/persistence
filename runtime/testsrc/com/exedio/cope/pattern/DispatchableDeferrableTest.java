/*
 * Copyright (C) 2004-2015  exedio GmbH (www.exedio.com)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package com.exedio.cope.pattern;

import static org.junit.Assert.assertEquals;

import com.exedio.cope.AbstractRuntimeModelTest;
import com.exedio.cope.BooleanField;
import com.exedio.cope.IntegerField;
import com.exedio.cope.Item;
import com.exedio.cope.Model;
import com.exedio.cope.util.JobContexts;
import org.junit.Assert;
import org.junit.Test;

public class DispatchableDeferrableTest extends AbstractRuntimeModelTest
{
	static final Model MODEL = new Model(AnItem.TYPE);

	public DispatchableDeferrableTest()
	{
		super(MODEL);
	}

	@Test public void test()
	{
		final AnItem item1 = new AnItem();
		final AnItem item2 = new AnItem();
		final AnItem item3 = new AnItem();
		assertIt(0, 0, 0, item1);
		assertIt(0, 0, 0, item2);
		assertIt(0, 0, 0, item3);

		dispatch();
		assertIt(1, 0, 0, item1);
		assertIt(1, 0, 0, item2);
		assertIt(1, 0, 0, item3);

		item1.setDeferred(false);
		dispatch();
		assertIt(2, 1, 1, item1);
		assertIt(2, 0, 0, item2);
		assertIt(2, 0, 0, item3);

		dispatch();
		assertIt(2, 1, 1, item1);
		assertIt(3, 0, 0, item2);
		assertIt(3, 0, 0, item3);

		item2.setDeferred(false);
		item3.setDeferred(false);
		dispatch();
		assertIt(2, 1, 1, item1);
		assertIt(4, 1, 1, item2);
		assertIt(4, 1, 1, item3);
	}

	private static final void assertIt(
			final int deferredCount,
			final int dispatchCount,
			final int runCount,
			final AnItem item)
	{
		assertEquals("deferredCount", deferredCount, item.getDeferredCount());
		assertEquals("dispatchCount", dispatchCount, item.getDispatchCount());
		assertEquals("runCount", runCount, item.getToTargetRuns().size());
	}

	private final void dispatch()
	{
		model.commit();
		AnItem.dispatchToTarget(new Dispatcher.Config(), JobContexts.EMPTY);
		model.startTransaction(DispatchableDeferrableTest.class.getName());
	}


	static final class AnItem extends Item implements DispatchDeferrable
	{
		static final Dispatcher toTarget = new Dispatcher();
		static final BooleanField deferred = new BooleanField().defaultTo(true);
		static final IntegerField deferredCount = new IntegerField().defaultTo(0);
		static final IntegerField dispatchCount = new IntegerField().defaultTo(0);

		public boolean isDeferred(final Dispatcher dispatcher)
		{
			assertIt(dispatcher);
			setDeferredCount(getDeferredCount()+1);
			return getDeferred();
		}

		public void dispatch(final Dispatcher dispatcher)
		{
			assertIt(dispatcher);
			setDispatchCount(getDispatchCount()+1);
		}

		public void notifyFinalFailure(final Dispatcher dispatcher, final Exception cause)
		{
			throw new RuntimeException(cause);
		}

		private void assertIt(final Dispatcher dispatcher)
		{
			Assert.assertSame(toTarget, dispatcher);
			Assert.assertTrue(MODEL.hasCurrentTransaction());
			Assert.assertEquals(toTarget.getID() + " dispatch " + getCopeID(), MODEL.currentTransaction().getName());
		}


	/**

	 **
	 * Creates a new AnItem with all the fields initially needed.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tags <tt>@cope.constructor public|package|protected|private|none</tt> in the class comment and <tt>@cope.initial</tt> in the comment of fields.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	AnItem()
	{
		this(new com.exedio.cope.SetValue<?>[]{
		});
	}/**

	 **
	 * Creates a new AnItem and sets the given fields initially.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.generic.constructor public|package|protected|private|none</tt> in the class comment.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	private AnItem(final com.exedio.cope.SetValue<?>... setValues)
	{
		super(setValues);
	}/**

	 **
	 * Dispatch by {@link #toTarget}.
	 * @return the number of successfully dispatched items
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.dispatch public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	@Deprecated
	static final int dispatchToTarget(final com.exedio.cope.pattern.Dispatcher.Config config,final com.exedio.cope.util.Interrupter interrupter)
	{
		return AnItem.toTarget.dispatch(AnItem.class,config,interrupter);
	}/**

	 **
	 * Dispatch by {@link #toTarget}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.dispatch public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	static final void dispatchToTarget(final com.exedio.cope.pattern.Dispatcher.Config config,final com.exedio.cope.util.JobContext ctx)
	{
		AnItem.toTarget.dispatch(AnItem.class,config,ctx);
	}/**

	 **
	 * Dispatch by {@link #toTarget}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.dispatch public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	static final void dispatchToTarget(final com.exedio.cope.pattern.Dispatcher.Config config,final java.lang.Runnable probe,final com.exedio.cope.util.JobContext ctx)
	{
		AnItem.toTarget.dispatch(AnItem.class,config,probe,ctx);
	}/**

	 **
	 * Returns, whether this item is yet to be dispatched by {@link #toTarget}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.isPending public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final boolean isToTargetPending()
	{
		return AnItem.toTarget.isPending(this);
	}/**

	 **
	 * Sets whether this item is yet to be dispatched by {@link #toTarget}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.setPending public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final void setToTargetPending(final boolean pending)
	{
		AnItem.toTarget.setPending(this,pending);
	}/**

	 **
	 * Returns the date, this item was last successfully dispatched by {@link #toTarget}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLastSuccessDate public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final java.util.Date getToTargetLastSuccessDate()
	{
		return AnItem.toTarget.getLastSuccessDate(this);
	}/**

	 **
	 * Returns the milliseconds, this item needed to be last successfully dispatched by {@link #toTarget}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLastSuccessElapsed public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final java.lang.Long getToTargetLastSuccessElapsed()
	{
		return AnItem.toTarget.getLastSuccessElapsed(this);
	}/**

	 **
	 * Returns the attempts to dispatch this item by {@link #toTarget}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getRuns public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final java.util.List<com.exedio.cope.pattern.Dispatcher.Run> getToTargetRuns()
	{
		return AnItem.toTarget.getRuns(this);
	}/**

	 **
	 * Returns the failed attempts to dispatch this item by {@link #toTarget}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getFailures public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final java.util.List<com.exedio.cope.pattern.Dispatcher.Run> getToTargetFailures()
	{
		return AnItem.toTarget.getFailures(this);
	}/**

	 **
	 * Returns the parent field of the run type of {@link #toTarget}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.RunParent public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	static final com.exedio.cope.ItemField<AnItem> toTargetRunParent()
	{
		return AnItem.toTarget.getRunParent(AnItem.class);
	}/**

	 **
	 * Returns the value of {@link #deferred}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final|boolean-as-is</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final boolean getDeferred()
	{
		return AnItem.deferred.getMandatory(this);
	}/**

	 **
	 * Sets a new value for {@link #deferred}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final void setDeferred(final boolean deferred)
	{
		AnItem.deferred.set(this,deferred);
	}/**

	 **
	 * Returns the value of {@link #deferredCount}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final int getDeferredCount()
	{
		return AnItem.deferredCount.getMandatory(this);
	}/**

	 **
	 * Sets a new value for {@link #deferredCount}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final void setDeferredCount(final int deferredCount)
	{
		AnItem.deferredCount.set(this,deferredCount);
	}/**

	 **
	 * Returns the value of {@link #dispatchCount}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final int getDispatchCount()
	{
		return AnItem.dispatchCount.getMandatory(this);
	}/**

	 **
	 * Sets a new value for {@link #dispatchCount}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final void setDispatchCount(final int dispatchCount)
	{
		AnItem.dispatchCount.set(this,dispatchCount);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	private static final long serialVersionUID = 1l;/**

	 **
	 * The persistent type information for anItem.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.type public|package|protected|private|none</tt> in the class comment.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	static final com.exedio.cope.Type<AnItem> TYPE = com.exedio.cope.TypesBound.newType(AnItem.class);/**

	 **
	 * Activation constructor. Used for internal purposes only.
	 * @see com.exedio.cope.Item#Item(com.exedio.cope.ActivationParameters)
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	@SuppressWarnings("unused") private AnItem(final com.exedio.cope.ActivationParameters ap){super(ap);
}}
}
