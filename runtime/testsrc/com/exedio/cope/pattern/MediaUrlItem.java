/*
 * Copyright (C) 2004-2012  exedio GmbH (www.exedio.com)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package com.exedio.cope.pattern;

import com.exedio.cope.CopeSchemaName;
import com.exedio.cope.Item;
import com.exedio.cope.StringField;

public final class MediaUrlItem extends Item implements MediaUrlCatchphraseProvider
{
	/**
	 * @cope.initial
	 */
	@CopeSchemaName("phrase")
	static final StringField catchphrase = new StringField().optional();


	static final Media fotoName = new Media().optional().lengthMax(2000).contentType("image/jpeg");

	@PreventUrlGuessing()
	static final Media fotoNameSecure = new Media().optional().lengthMax(2000).contentType("image/jpeg");


	static final Media fileName = new Media().optional().lengthMax(2000).contentType("foo/bar");

	@PreventUrlGuessing()
	static final Media fileNameSecure = new Media().optional().lengthMax(2000).contentType("foo/bar");


	public String getMediaUrlCatchphrase(final MediaPath path)
	{
		return (path.getName().indexOf("Name")>=0) ? getCatchphrase() : null;
	}


	/**

	 **
	 * Creates a new MediaUrlItem with all the fields initially needed.
	 * @param catchphrase the initial value for field {@link #catchphrase}.
	 * @throws com.exedio.cope.StringLengthViolationException if catchphrase violates its length constraint.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tags <tt>@cope.constructor public|package|protected|private|none</tt> in the class comment and <tt>@cope.initial</tt> in the comment of fields.
	 */
	MediaUrlItem(
				final java.lang.String catchphrase)
			throws
				com.exedio.cope.StringLengthViolationException
	{
		this(new com.exedio.cope.SetValue<?>[]{
			MediaUrlItem.catchphrase.map(catchphrase),
		});
	}/**

	 **
	 * Creates a new MediaUrlItem and sets the given fields initially.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.generic.constructor public|package|protected|private|none</tt> in the class comment.
	 */
	private MediaUrlItem(final com.exedio.cope.SetValue<?>... setValues)
	{
		super(setValues);
	}/**

	 **
	 * Returns the value of {@link #catchphrase}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getCatchphrase()
	{
		return MediaUrlItem.catchphrase.get(this);
	}/**

	 **
	 * Sets a new value for {@link #catchphrase}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setCatchphrase(final java.lang.String catchphrase)
			throws
				com.exedio.cope.StringLengthViolationException
	{
		MediaUrlItem.catchphrase.set(this,catchphrase);
	}/**

	 **
	 * Returns a URL the content of {@link #fotoName} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getURL public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getFotoNameURL()
	{
		return MediaUrlItem.fotoName.getURL(this);
	}/**

	 **
	 * Returns a Locator the content of {@link #fotoName} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLocator public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final com.exedio.cope.pattern.MediaPath.Locator getFotoNameLocator()
	{
		return MediaUrlItem.fotoName.getLocator(this);
	}/**

	 **
	 * Returns whether media {@link #fotoName} is null.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.isNull public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final boolean isFotoNameNull()
	{
		return MediaUrlItem.fotoName.isNull(this);
	}/**

	 **
	 * Returns the last modification date of media {@link #fotoName}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLastModified public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.util.Date getFotoNameLastModified()
	{
		return MediaUrlItem.fotoName.getLastModified(this);
	}/**

	 **
	 * Returns the body length of the media {@link #fotoName}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLength public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final long getFotoNameLength()
	{
		return MediaUrlItem.fotoName.getLength(this);
	}/**

	 **
	 * Returns the body of the media {@link #fotoName}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getBody public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final byte[] getFotoNameBody()
	{
		return MediaUrlItem.fotoName.getBody(this);
	}/**

	 **
	 * Writes the body of media {@link #fotoName} into the given stream.
	 * Does nothing, if the media is null.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getBody public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void getFotoNameBody(final java.io.OutputStream body)
			throws
				java.io.IOException
	{
		MediaUrlItem.fotoName.getBody(this,body);
	}/**

	 **
	 * Writes the body of media {@link #fotoName} into the given file.
	 * Does nothing, if the media is null.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getBody public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void getFotoNameBody(final java.io.File body)
			throws
				java.io.IOException
	{
		MediaUrlItem.fotoName.getBody(this,body);
	}/**

	 **
	 * Sets the content of media {@link #fotoName}.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setFotoName(final com.exedio.cope.pattern.Media.Value fotoName)
			throws
				java.io.IOException
	{
		MediaUrlItem.fotoName.set(this,fotoName);
	}/**

	 **
	 * Sets the content of media {@link #fotoName}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setFotoName(final byte[] body,final java.lang.String contentType)
	{
		MediaUrlItem.fotoName.set(this,body,contentType);
	}/**

	 **
	 * Sets the content of media {@link #fotoName}.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setFotoName(final java.io.InputStream body,final java.lang.String contentType)
			throws
				java.io.IOException
	{
		MediaUrlItem.fotoName.set(this,body,contentType);
	}/**

	 **
	 * Sets the content of media {@link #fotoName}.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setFotoName(final java.io.File body,final java.lang.String contentType)
			throws
				java.io.IOException
	{
		MediaUrlItem.fotoName.set(this,body,contentType);
	}/**

	 **
	 * Returns a URL the content of {@link #fotoNameSecure} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getURL public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getFotoNameSecureURL()
	{
		return MediaUrlItem.fotoNameSecure.getURL(this);
	}/**

	 **
	 * Returns a Locator the content of {@link #fotoNameSecure} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLocator public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final com.exedio.cope.pattern.MediaPath.Locator getFotoNameSecureLocator()
	{
		return MediaUrlItem.fotoNameSecure.getLocator(this);
	}/**

	 **
	 * Returns whether media {@link #fotoNameSecure} is null.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.isNull public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final boolean isFotoNameSecureNull()
	{
		return MediaUrlItem.fotoNameSecure.isNull(this);
	}/**

	 **
	 * Returns the last modification date of media {@link #fotoNameSecure}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLastModified public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.util.Date getFotoNameSecureLastModified()
	{
		return MediaUrlItem.fotoNameSecure.getLastModified(this);
	}/**

	 **
	 * Returns the body length of the media {@link #fotoNameSecure}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLength public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final long getFotoNameSecureLength()
	{
		return MediaUrlItem.fotoNameSecure.getLength(this);
	}/**

	 **
	 * Returns the body of the media {@link #fotoNameSecure}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getBody public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final byte[] getFotoNameSecureBody()
	{
		return MediaUrlItem.fotoNameSecure.getBody(this);
	}/**

	 **
	 * Writes the body of media {@link #fotoNameSecure} into the given stream.
	 * Does nothing, if the media is null.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getBody public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void getFotoNameSecureBody(final java.io.OutputStream body)
			throws
				java.io.IOException
	{
		MediaUrlItem.fotoNameSecure.getBody(this,body);
	}/**

	 **
	 * Writes the body of media {@link #fotoNameSecure} into the given file.
	 * Does nothing, if the media is null.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getBody public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void getFotoNameSecureBody(final java.io.File body)
			throws
				java.io.IOException
	{
		MediaUrlItem.fotoNameSecure.getBody(this,body);
	}/**

	 **
	 * Sets the content of media {@link #fotoNameSecure}.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setFotoNameSecure(final com.exedio.cope.pattern.Media.Value fotoNameSecure)
			throws
				java.io.IOException
	{
		MediaUrlItem.fotoNameSecure.set(this,fotoNameSecure);
	}/**

	 **
	 * Sets the content of media {@link #fotoNameSecure}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setFotoNameSecure(final byte[] body,final java.lang.String contentType)
	{
		MediaUrlItem.fotoNameSecure.set(this,body,contentType);
	}/**

	 **
	 * Sets the content of media {@link #fotoNameSecure}.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setFotoNameSecure(final java.io.InputStream body,final java.lang.String contentType)
			throws
				java.io.IOException
	{
		MediaUrlItem.fotoNameSecure.set(this,body,contentType);
	}/**

	 **
	 * Sets the content of media {@link #fotoNameSecure}.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setFotoNameSecure(final java.io.File body,final java.lang.String contentType)
			throws
				java.io.IOException
	{
		MediaUrlItem.fotoNameSecure.set(this,body,contentType);
	}/**

	 **
	 * Returns a URL the content of {@link #fileName} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getURL public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getFileNameURL()
	{
		return MediaUrlItem.fileName.getURL(this);
	}/**

	 **
	 * Returns a Locator the content of {@link #fileName} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLocator public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final com.exedio.cope.pattern.MediaPath.Locator getFileNameLocator()
	{
		return MediaUrlItem.fileName.getLocator(this);
	}/**

	 **
	 * Returns whether media {@link #fileName} is null.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.isNull public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final boolean isFileNameNull()
	{
		return MediaUrlItem.fileName.isNull(this);
	}/**

	 **
	 * Returns the last modification date of media {@link #fileName}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLastModified public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.util.Date getFileNameLastModified()
	{
		return MediaUrlItem.fileName.getLastModified(this);
	}/**

	 **
	 * Returns the body length of the media {@link #fileName}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLength public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final long getFileNameLength()
	{
		return MediaUrlItem.fileName.getLength(this);
	}/**

	 **
	 * Returns the body of the media {@link #fileName}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getBody public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final byte[] getFileNameBody()
	{
		return MediaUrlItem.fileName.getBody(this);
	}/**

	 **
	 * Writes the body of media {@link #fileName} into the given stream.
	 * Does nothing, if the media is null.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getBody public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void getFileNameBody(final java.io.OutputStream body)
			throws
				java.io.IOException
	{
		MediaUrlItem.fileName.getBody(this,body);
	}/**

	 **
	 * Writes the body of media {@link #fileName} into the given file.
	 * Does nothing, if the media is null.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getBody public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void getFileNameBody(final java.io.File body)
			throws
				java.io.IOException
	{
		MediaUrlItem.fileName.getBody(this,body);
	}/**

	 **
	 * Sets the content of media {@link #fileName}.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setFileName(final com.exedio.cope.pattern.Media.Value fileName)
			throws
				java.io.IOException
	{
		MediaUrlItem.fileName.set(this,fileName);
	}/**

	 **
	 * Sets the content of media {@link #fileName}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setFileName(final byte[] body,final java.lang.String contentType)
	{
		MediaUrlItem.fileName.set(this,body,contentType);
	}/**

	 **
	 * Sets the content of media {@link #fileName}.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setFileName(final java.io.InputStream body,final java.lang.String contentType)
			throws
				java.io.IOException
	{
		MediaUrlItem.fileName.set(this,body,contentType);
	}/**

	 **
	 * Sets the content of media {@link #fileName}.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setFileName(final java.io.File body,final java.lang.String contentType)
			throws
				java.io.IOException
	{
		MediaUrlItem.fileName.set(this,body,contentType);
	}/**

	 **
	 * Returns a URL the content of {@link #fileNameSecure} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getURL public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getFileNameSecureURL()
	{
		return MediaUrlItem.fileNameSecure.getURL(this);
	}/**

	 **
	 * Returns a Locator the content of {@link #fileNameSecure} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLocator public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final com.exedio.cope.pattern.MediaPath.Locator getFileNameSecureLocator()
	{
		return MediaUrlItem.fileNameSecure.getLocator(this);
	}/**

	 **
	 * Returns whether media {@link #fileNameSecure} is null.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.isNull public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final boolean isFileNameSecureNull()
	{
		return MediaUrlItem.fileNameSecure.isNull(this);
	}/**

	 **
	 * Returns the last modification date of media {@link #fileNameSecure}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLastModified public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.util.Date getFileNameSecureLastModified()
	{
		return MediaUrlItem.fileNameSecure.getLastModified(this);
	}/**

	 **
	 * Returns the body length of the media {@link #fileNameSecure}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLength public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final long getFileNameSecureLength()
	{
		return MediaUrlItem.fileNameSecure.getLength(this);
	}/**

	 **
	 * Returns the body of the media {@link #fileNameSecure}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getBody public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final byte[] getFileNameSecureBody()
	{
		return MediaUrlItem.fileNameSecure.getBody(this);
	}/**

	 **
	 * Writes the body of media {@link #fileNameSecure} into the given stream.
	 * Does nothing, if the media is null.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getBody public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void getFileNameSecureBody(final java.io.OutputStream body)
			throws
				java.io.IOException
	{
		MediaUrlItem.fileNameSecure.getBody(this,body);
	}/**

	 **
	 * Writes the body of media {@link #fileNameSecure} into the given file.
	 * Does nothing, if the media is null.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getBody public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void getFileNameSecureBody(final java.io.File body)
			throws
				java.io.IOException
	{
		MediaUrlItem.fileNameSecure.getBody(this,body);
	}/**

	 **
	 * Sets the content of media {@link #fileNameSecure}.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setFileNameSecure(final com.exedio.cope.pattern.Media.Value fileNameSecure)
			throws
				java.io.IOException
	{
		MediaUrlItem.fileNameSecure.set(this,fileNameSecure);
	}/**

	 **
	 * Sets the content of media {@link #fileNameSecure}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setFileNameSecure(final byte[] body,final java.lang.String contentType)
	{
		MediaUrlItem.fileNameSecure.set(this,body,contentType);
	}/**

	 **
	 * Sets the content of media {@link #fileNameSecure}.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setFileNameSecure(final java.io.InputStream body,final java.lang.String contentType)
			throws
				java.io.IOException
	{
		MediaUrlItem.fileNameSecure.set(this,body,contentType);
	}/**

	 **
	 * Sets the content of media {@link #fileNameSecure}.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setFileNameSecure(final java.io.File body,final java.lang.String contentType)
			throws
				java.io.IOException
	{
		MediaUrlItem.fileNameSecure.set(this,body,contentType);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	private static final long serialVersionUID = 1l;/**

	 **
	 * The persistent type information for mediaUrlItem.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.type public|package|protected|private|none</tt> in the class comment.
	 */
	public static final com.exedio.cope.Type<MediaUrlItem> TYPE = com.exedio.cope.TypesBound.newType(MediaUrlItem.class);/**

	 **
	 * Activation constructor. Used for internal purposes only.
	 * @see com.exedio.cope.Item#Item(com.exedio.cope.ActivationParameters)
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	@SuppressWarnings("unused") private MediaUrlItem(final com.exedio.cope.ActivationParameters ap){super(ap);
}}
