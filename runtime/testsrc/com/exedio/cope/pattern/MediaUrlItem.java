/*
 * Copyright (C) 2004-2009  exedio GmbH (www.exedio.com)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package com.exedio.cope.pattern;

import com.exedio.cope.Item;
import com.exedio.cope.StringField;

public class MediaUrlItem extends Item
{
	/**
	 * @cope.initial
	 */
	static final StringField name = new StringField().optional();

	static final Media photo = new Media().optional().lengthMax(2000).contentType("image/jpeg");

	/**
	 * @cope.getURL none
	 */
	@PreventUrlGuessing()
	static final Media fotoSecure = new Media().optional();


	final String getFotoSecureURL()
	{
		return MediaUrlItem.fotoSecure.getNamedURL(this, getName());
	}

	/**

	 **
	 * Creates a new MediaUrlItem with all the fields initially needed.
	 * @param name the initial value for field {@link #name}.
	 * @throws com.exedio.cope.StringLengthViolationException if name violates its length constraint.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tags <tt>@cope.constructor public|package|protected|private|none</tt> in the class comment and <tt>@cope.initial</tt> in the comment of fields.
	 */
	MediaUrlItem(
				final java.lang.String name)
			throws
				com.exedio.cope.StringLengthViolationException
	{
		this(new com.exedio.cope.SetValue[]{
			MediaUrlItem.name.map(name),
		});
	}/**

	 **
	 * Creates a new MediaUrlItem and sets the given fields initially.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.generic.constructor public|package|protected|private|none</tt> in the class comment.
	 */
	private MediaUrlItem(final com.exedio.cope.SetValue<?>... setValues)
	{
		super(setValues);
	}/**

	 **
	 * Activation constructor. Used for internal purposes only.
	 * @see com.exedio.cope.Item#Item(com.exedio.cope.ActivationParameters)
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	@SuppressWarnings("unused") private MediaUrlItem(final com.exedio.cope.ActivationParameters ap)
	{
		super(ap);
	}/**

	 **
	 * Returns the value of {@link #name}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getName()
	{
		return MediaUrlItem.name.get(this);
	}/**

	 **
	 * Sets a new value for {@link #name}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setName(final java.lang.String name)
			throws
				com.exedio.cope.StringLengthViolationException
	{
		MediaUrlItem.name.set(this,name);
	}/**

	 **
	 * Returns a URL the content of {@link #photo} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getURL public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getPhotoURL()
	{
		return MediaUrlItem.photo.getURL(this);
	}/**

	 **
	 * Returns a Locator the content of {@link #photo} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLocator public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final com.exedio.cope.pattern.MediaPath.Locator getPhotoLocator()
	{
		return MediaUrlItem.photo.getLocator(this);
	}/**

	 **
	 * Returns whether media {@link #photo} is null.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.isNull public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final boolean isPhotoNull()
	{
		return MediaUrlItem.photo.isNull(this);
	}/**

	 **
	 * Returns the last modification date of media {@link #photo}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLastModified public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final long getPhotoLastModified()
	{
		return MediaUrlItem.photo.getLastModified(this);
	}/**

	 **
	 * Returns the body length of the media {@link #photo}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLength public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final long getPhotoLength()
	{
		return MediaUrlItem.photo.getLength(this);
	}/**

	 **
	 * Returns the body of the media {@link #photo}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getBody public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final byte[] getPhotoBody()
	{
		return MediaUrlItem.photo.getBody(this);
	}/**

	 **
	 * Writes the body of media {@link #photo} into the given stream.
	 * Does nothing, if the media is null.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getBody public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void getPhotoBody(final java.io.OutputStream body)
			throws
				java.io.IOException
	{
		MediaUrlItem.photo.getBody(this,body);
	}/**

	 **
	 * Writes the body of media {@link #photo} into the given file.
	 * Does nothing, if the media is null.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getBody public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void getPhotoBody(final java.io.File body)
			throws
				java.io.IOException
	{
		MediaUrlItem.photo.getBody(this,body);
	}/**

	 **
	 * Sets the content of media {@link #photo}.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setPhoto(final com.exedio.cope.pattern.Media.Value photo)
			throws
				java.io.IOException
	{
		MediaUrlItem.photo.set(this,photo);
	}/**

	 **
	 * Sets the content of media {@link #photo}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setPhoto(final byte[] body,final java.lang.String contentType)
	{
		MediaUrlItem.photo.set(this,body,contentType);
	}/**

	 **
	 * Sets the content of media {@link #photo}.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setPhoto(final java.io.InputStream body,final java.lang.String contentType)
			throws
				java.io.IOException
	{
		MediaUrlItem.photo.set(this,body,contentType);
	}/**

	 **
	 * Sets the content of media {@link #photo}.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setPhoto(final java.io.File body,final java.lang.String contentType)
			throws
				java.io.IOException
	{
		MediaUrlItem.photo.set(this,body,contentType);
	}/**

	 **
	 * Returns a Locator the content of {@link #fotoSecure} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLocator public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final com.exedio.cope.pattern.MediaPath.Locator getFotoSecureLocator()
	{
		return MediaUrlItem.fotoSecure.getLocator(this);
	}/**

	 **
	 * Returns the content type of the media {@link #fotoSecure}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getContentType public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getFotoSecureContentType()
	{
		return MediaUrlItem.fotoSecure.getContentType(this);
	}/**

	 **
	 * Returns whether media {@link #fotoSecure} is null.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.isNull public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final boolean isFotoSecureNull()
	{
		return MediaUrlItem.fotoSecure.isNull(this);
	}/**

	 **
	 * Returns the last modification date of media {@link #fotoSecure}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLastModified public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final long getFotoSecureLastModified()
	{
		return MediaUrlItem.fotoSecure.getLastModified(this);
	}/**

	 **
	 * Returns the body length of the media {@link #fotoSecure}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLength public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final long getFotoSecureLength()
	{
		return MediaUrlItem.fotoSecure.getLength(this);
	}/**

	 **
	 * Returns the body of the media {@link #fotoSecure}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getBody public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final byte[] getFotoSecureBody()
	{
		return MediaUrlItem.fotoSecure.getBody(this);
	}/**

	 **
	 * Writes the body of media {@link #fotoSecure} into the given stream.
	 * Does nothing, if the media is null.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getBody public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void getFotoSecureBody(final java.io.OutputStream body)
			throws
				java.io.IOException
	{
		MediaUrlItem.fotoSecure.getBody(this,body);
	}/**

	 **
	 * Writes the body of media {@link #fotoSecure} into the given file.
	 * Does nothing, if the media is null.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getBody public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void getFotoSecureBody(final java.io.File body)
			throws
				java.io.IOException
	{
		MediaUrlItem.fotoSecure.getBody(this,body);
	}/**

	 **
	 * Sets the content of media {@link #fotoSecure}.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setFotoSecure(final com.exedio.cope.pattern.Media.Value fotoSecure)
			throws
				java.io.IOException
	{
		MediaUrlItem.fotoSecure.set(this,fotoSecure);
	}/**

	 **
	 * Sets the content of media {@link #fotoSecure}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setFotoSecure(final byte[] body,final java.lang.String contentType)
	{
		MediaUrlItem.fotoSecure.set(this,body,contentType);
	}/**

	 **
	 * Sets the content of media {@link #fotoSecure}.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setFotoSecure(final java.io.InputStream body,final java.lang.String contentType)
			throws
				java.io.IOException
	{
		MediaUrlItem.fotoSecure.set(this,body,contentType);
	}/**

	 **
	 * Sets the content of media {@link #fotoSecure}.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setFotoSecure(final java.io.File body,final java.lang.String contentType)
			throws
				java.io.IOException
	{
		MediaUrlItem.fotoSecure.set(this,body,contentType);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	private static final long serialVersionUID = 1l;/**

	 **
	 * The persistent type information for mediaUrlItem.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.type public|package|protected|private|none</tt> in the class comment.
	 */
	public static final com.exedio.cope.Type<MediaUrlItem> TYPE = com.exedio.cope.TypesBound.newType(MediaUrlItem.class)
;}
