/*
 * Copyright (C) 2004-2012  exedio GmbH (www.exedio.com)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package com.exedio.cope.pattern;

import java.io.IOException;

import com.exedio.cope.Item;
import com.exedio.cope.StringField;
import com.exedio.cope.pattern.sub.TextUrlFilterOverride;

public class TextUrlFilterItem extends Item
{
	static final StringField name = new StringField().optional();

	static final Media roh = new Media().optional();

	static final TextUrlFilter fertig = new TextUrlFilterOverride(
			roh,
			"text/plain", "utf-8",
			new StringField(),
			new Media().lengthMax(3).contentType(MediaType.PNG));

	void setFertigRaw(final String value) throws IOException
	{
		setFertigRaw(Media.toValue(value.getBytes("utf-8"), "text/plain"));
	}

	String addFertigPaste(final String key)
	{
		return "/contextPath/servletPath/" + addFertigPaste(key, Media.toValue(new byte[]{1, 2, 3}, MediaType.PNG)).getLocator().getPath();
	}

	// must not be generated by the instrumentor
	// because photo has a fixed contentType
	String getFertigContentType()
	{
		return TextUrlFilterItem.fertig.getContentType(this);
	}


	/**

	 **
	 * Creates a new TextUrlFilterItem with all the fields initially needed.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tags <tt>@cope.constructor public|package|protected|private|none</tt> in the class comment and <tt>@cope.initial</tt> in the comment of fields.
	 */
	public TextUrlFilterItem()
	{
		this(new com.exedio.cope.SetValue<?>[]{
		});
	}/**

	 **
	 * Creates a new TextUrlFilterItem and sets the given fields initially.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.generic.constructor public|package|protected|private|none</tt> in the class comment.
	 */
	private TextUrlFilterItem(final com.exedio.cope.SetValue<?>... setValues)
	{
		super(setValues);
	}/**

	 **
	 * Returns the value of {@link #name}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getName()
	{
		return TextUrlFilterItem.name.get(this);
	}/**

	 **
	 * Sets a new value for {@link #name}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setName(final java.lang.String name)
			throws
				com.exedio.cope.StringLengthViolationException
	{
		TextUrlFilterItem.name.set(this,name);
	}/**

	 **
	 * Returns a URL the content of {@link #roh} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getURL public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getRohURL()
	{
		return TextUrlFilterItem.roh.getURL(this);
	}/**

	 **
	 * Returns a Locator the content of {@link #roh} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLocator public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final com.exedio.cope.pattern.MediaPath.Locator getRohLocator()
	{
		return TextUrlFilterItem.roh.getLocator(this);
	}/**

	 **
	 * Returns the content type of the media {@link #roh}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getContentType public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getRohContentType()
	{
		return TextUrlFilterItem.roh.getContentType(this);
	}/**

	 **
	 * Returns whether media {@link #roh} is null.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.isNull public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final boolean isRohNull()
	{
		return TextUrlFilterItem.roh.isNull(this);
	}/**

	 **
	 * Returns the last modification date of media {@link #roh}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLastModified public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final long getRohLastModified()
	{
		return TextUrlFilterItem.roh.getLastModified(this);
	}/**

	 **
	 * Returns the body length of the media {@link #roh}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLength public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final long getRohLength()
	{
		return TextUrlFilterItem.roh.getLength(this);
	}/**

	 **
	 * Returns the body of the media {@link #roh}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getBody public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final byte[] getRohBody()
	{
		return TextUrlFilterItem.roh.getBody(this);
	}/**

	 **
	 * Writes the body of media {@link #roh} into the given stream.
	 * Does nothing, if the media is null.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getBody public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void getRohBody(final java.io.OutputStream body)
			throws
				java.io.IOException
	{
		TextUrlFilterItem.roh.getBody(this,body);
	}/**

	 **
	 * Writes the body of media {@link #roh} into the given file.
	 * Does nothing, if the media is null.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getBody public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void getRohBody(final java.io.File body)
			throws
				java.io.IOException
	{
		TextUrlFilterItem.roh.getBody(this,body);
	}/**

	 **
	 * Sets the content of media {@link #roh}.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setRoh(final com.exedio.cope.pattern.Media.Value roh)
			throws
				java.io.IOException
	{
		TextUrlFilterItem.roh.set(this,roh);
	}/**

	 **
	 * Sets the content of media {@link #roh}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setRoh(final byte[] body,final java.lang.String contentType)
	{
		TextUrlFilterItem.roh.set(this,body,contentType);
	}/**

	 **
	 * Sets the content of media {@link #roh}.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setRoh(final java.io.InputStream body,final java.lang.String contentType)
			throws
				java.io.IOException
	{
		TextUrlFilterItem.roh.set(this,body,contentType);
	}/**

	 **
	 * Sets the content of media {@link #roh}.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setRoh(final java.io.File body,final java.lang.String contentType)
			throws
				java.io.IOException
	{
		TextUrlFilterItem.roh.set(this,body,contentType);
	}/**

	 **
	 * Returns a URL the content of {@link #fertig} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getURL public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getFertigURL()
	{
		return TextUrlFilterItem.fertig.getURL(this);
	}/**

	 **
	 * Returns a Locator the content of {@link #fertig} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLocator public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final com.exedio.cope.pattern.MediaPath.Locator getFertigLocator()
	{
		return TextUrlFilterItem.fertig.getLocator(this);
	}/**

	 **
	 * Returns a URL the content of {@link #fertig} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getURLWithFallbackToSource public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getFertigURLWithFallbackToSource()
	{
		return TextUrlFilterItem.fertig.getURLWithFallbackToSource(this);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.setRaw public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setFertigRaw(final com.exedio.cope.pattern.Media.Value raw)
			throws
				java.io.IOException
	{
		TextUrlFilterItem.fertig.setRaw(this,raw);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.addPaste public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final com.exedio.cope.pattern.TextUrlFilter.Paste addFertigPaste(final java.lang.String key,final com.exedio.cope.pattern.Media.Value value)
	{
		return TextUrlFilterItem.fertig.addPaste(this,key,value);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.modifyPaste public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void modifyFertigPaste(final java.lang.String key,final com.exedio.cope.pattern.Media.Value value)
			throws
				java.io.IOException
	{
		TextUrlFilterItem.fertig.modifyPaste(this,key,value);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.putPaste public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final com.exedio.cope.pattern.TextUrlFilter.Paste putFertigPaste(final java.lang.String key,final com.exedio.cope.pattern.Media.Value value)
			throws
				java.io.IOException
	{
		return TextUrlFilterItem.fertig.putPaste(this,key,value);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.putPastesFromZip public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void putFertigPastesFromZip(final java.io.File file)
			throws
				java.io.IOException
	{
		TextUrlFilterItem.fertig.putPastesFromZip(this,file);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	private static final long serialVersionUID = 1l;/**

	 **
	 * The persistent type information for textUrlFilterItem.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.type public|package|protected|private|none</tt> in the class comment.
	 */
	public static final com.exedio.cope.Type<TextUrlFilterItem> TYPE = com.exedio.cope.TypesBound.newType(TextUrlFilterItem.class);/**

	 **
	 * Activation constructor. Used for internal purposes only.
	 * @see com.exedio.cope.Item#Item(com.exedio.cope.ActivationParameters)
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	@SuppressWarnings("unused") private TextUrlFilterItem(final com.exedio.cope.ActivationParameters ap){super(ap);
}}
