/*
 * Copyright (C) 2004-2012  exedio GmbH (www.exedio.com)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package com.exedio.cope.pattern;

import com.exedio.cope.Item;
import com.exedio.cope.Type;
import com.exedio.cope.TypesBound;

/**
 * @cope.type none
 */
public class DispatcherNoneItem extends Item
{
	/**
	 * @cope.dispatch none
	 */
	static final Dispatcher wrong = new Dispatcher();

	@SuppressWarnings("unchecked") // because instrumentor fails on correct version
	static final Type<?> newTypeAccessible(final Class javaClass)
	{
		return TypesBound.newType(javaClass);
	}


	/**

	 **
	 * Creates a new DispatcherNoneItem with all the fields initially needed.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tags <tt>@cope.constructor public|package|protected|private|none</tt> in the class comment and <tt>@cope.initial</tt> in the comment of fields.
	 */
	public DispatcherNoneItem()
	{
		this(new com.exedio.cope.SetValue[]{
		});
	}/**

	 **
	 * Creates a new DispatcherNoneItem and sets the given fields initially.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.generic.constructor public|package|protected|private|none</tt> in the class comment.
	 */
	private DispatcherNoneItem(final com.exedio.cope.SetValue<?>... setValues)
	{
		super(setValues);
	}/**

	 **
	 * Returns, whether this item is yet to be dispatched by {@link #wrong}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.isPending public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final boolean isWrongPending()
	{
		return DispatcherNoneItem.wrong.isPending(this);
	}/**

	 **
	 * Sets whether this item is yet to be dispatched by {@link #wrong}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.setPending public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setWrongPending(final boolean pending)
	{
		DispatcherNoneItem.wrong.setPending(this,pending);
	}/**

	 **
	 * Returns the date, this item was last successfully dispatched by {@link #wrong}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLastSuccessDate public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.util.Date getWrongLastSuccessDate()
	{
		return DispatcherNoneItem.wrong.getLastSuccessDate(this);
	}/**

	 **
	 * Returns the milliseconds, this item needed to be last successfully dispatched by {@link #wrong}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLastSuccessElapsed public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.Long getWrongLastSuccessElapsed()
	{
		return DispatcherNoneItem.wrong.getLastSuccessElapsed(this);
	}/**

	 **
	 * Returns the attempts to dispatch this item by {@link #wrong}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getRuns public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.util.List<com.exedio.cope.pattern.Dispatcher.Run> getWrongRuns()
	{
		return DispatcherNoneItem.wrong.getRuns(this);
	}/**

	 **
	 * Returns the failed attempts to dispatch this item by {@link #wrong}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getFailures public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.util.List<com.exedio.cope.pattern.Dispatcher.Run> getWrongFailures()
	{
		return DispatcherNoneItem.wrong.getFailures(this);
	}/**

	 **
	 * Returns the parent field of the run type of {@link #wrong}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.RunParent public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	static final com.exedio.cope.ItemField<DispatcherNoneItem> wrongRunParent()
	{
		return DispatcherNoneItem.wrong.getRunParent(DispatcherNoneItem.class);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	private static final long serialVersionUID = 1l;/**

	 **
	 * Activation constructor. Used for internal purposes only.
	 * @see com.exedio.cope.Item#Item(com.exedio.cope.ActivationParameters)
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	@SuppressWarnings("unused") private DispatcherNoneItem(final com.exedio.cope.ActivationParameters ap){super(ap);
}}
