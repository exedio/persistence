/*
 * Copyright (C) 2004-2008  exedio GmbH (www.exedio.com)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package com.exedio.cope.pattern;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;

import org.junit.Assert;

import com.exedio.cope.IntegerField;
import com.exedio.cope.Item;
import com.exedio.cope.StringField;

public class DispatcherItem extends Item implements Dispatchable
{
	static final StringField body = new StringField();
	static final IntegerField dispatchCountCommitted = new IntegerField().defaultTo(0).min(0);

	static final HashMap<DispatcherItem, Log> logs = new HashMap<DispatcherItem, Log>();
	static class Log
	{
		boolean fail;
		int dispatchCount = 0;
		int dispatchLastSuccessElapsed = 0;
		final ArrayList<Integer> dispatchFailureElapsed = new ArrayList<Integer>();
		int notifyFinalFailureCount = 0;
		
		Log(final boolean fail)
		{
			this.fail = fail;
		}
	}

	static final Dispatcher toTarget = new Dispatcher(3, 2);
	
	public void dispatch() throws IOException, InterruptedException
	{
		Assert.assertTrue(DispatcherTest.MODEL.hasCurrentTransaction());
		Assert.assertEquals(DispatcherItem.toTarget.getID() + " dispatch " + getCopeID(), DispatcherTest.MODEL.getCurrentTransaction().getName());
		setDispatchCountCommitted(getDispatchCountCommitted()+1);
		final Log log = logs.get(this);
		final long start = System.currentTimeMillis();
		log.dispatchCount++;
		Thread.sleep(5);
		if(log.fail)
		{
			log.dispatchFailureElapsed.add((int)(System.currentTimeMillis() - start));
			throw new IOException(getBody());
		}
		log.dispatchLastSuccessElapsed = ((int)(System.currentTimeMillis() - start));
	}
	
	public void notifyFinalFailure(final Exception cause)
	{
		Assert.assertTrue(!DispatcherTest.MODEL.hasCurrentTransaction());
		Assert.assertEquals(IOException.class, cause.getClass());
		logs.get(this).notifyFinalFailureCount++;
	}
	
	DispatcherItem(final String body, final boolean fail)
	{
		this(body);
		logs.put(this, new Log(fail));
	}
	
	
	/**

	 **
	 * Creates a new DispatcherItem with all the fields initially needed.
	 * @param body the initial value for field {@link #body}.
	 * @throws com.exedio.cope.MandatoryViolationException if body is null.
	 * @throws com.exedio.cope.StringLengthViolationException if body violates its length constraint.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tags <tt>@cope.constructor public|package|protected|private|none</tt> in the class comment and <tt>@cope.initial</tt> in the comment of fields.
	 */
	DispatcherItem(
				final java.lang.String body)
			throws
				com.exedio.cope.MandatoryViolationException,
				com.exedio.cope.StringLengthViolationException
	{
		this(new com.exedio.cope.SetValue[]{
			DispatcherItem.body.map(body),
		});
	}/**

	 **
	 * Creates a new DispatcherItem and sets the given fields initially.
	 * This constructor is called by {@link com.exedio.cope.Type#newItem Type.newItem}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.generic.constructor public|package|protected|private|none</tt> in the class comment.
	 */
	private DispatcherItem(final com.exedio.cope.SetValue... setValues)
	{
		super(setValues);
	}/**

	 **
	 * Reactivation constructor. Used for internal purposes only.
	 * @see com.exedio.cope.Item#Item(com.exedio.cope.util.ReactivationConstructorDummy,int)
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	@SuppressWarnings("unused") private DispatcherItem(final com.exedio.cope.util.ReactivationConstructorDummy d,final int pk)
	{
		super(d,pk);
	}/**

	 **
	 * Returns the value of {@link #body}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getBody()
	{
		return DispatcherItem.body.get(this);
	}/**

	 **
	 * Sets a new value for {@link #body}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setBody(final java.lang.String body)
			throws
				com.exedio.cope.MandatoryViolationException,
				com.exedio.cope.StringLengthViolationException
	{
		DispatcherItem.body.set(this,body);
	}/**

	 **
	 * Returns the value of {@link #dispatchCountCommitted}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final int getDispatchCountCommitted()
	{
		return DispatcherItem.dispatchCountCommitted.getMandatory(this);
	}/**

	 **
	 * Sets a new value for {@link #dispatchCountCommitted}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setDispatchCountCommitted(final int dispatchCountCommitted)
			throws
				com.exedio.cope.IntegerRangeViolationException
	{
		DispatcherItem.dispatchCountCommitted.set(this,dispatchCountCommitted);
	}/**

	 **
	 * Dispatch by {@link #toTarget}.
	 * @return the number of successfully dispatched items
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.dispatch public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	static final int dispatchToTarget(final com.exedio.cope.pattern.Dispatcher.Interrupter interrupter)
	{
		return DispatcherItem.toTarget.dispatch(DispatcherItem.class,interrupter);
	}/**

	 **
	 * Returns, whether this item is yet to be dispatched by {@link #toTarget}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.isPending public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final boolean isToTargetPending()
	{
		return DispatcherItem.toTarget.isPending(this);
	}/**

	 **
	 * Returns the date, this item was successfully dispatched by {@link #toTarget}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getSuccessDate public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.util.Date getToTargetSuccessDate()
	{
		return DispatcherItem.toTarget.getSuccessDate(this);
	}/**

	 **
	 * Returns the milliseconds, this item needed to be successfully dispatched by {@link #toTarget}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getSuccessElapsed public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.Long getToTargetSuccessElapsed()
	{
		return DispatcherItem.toTarget.getSuccessElapsed(this);
	}/**

	 **
	 * Returns the failed attempts to dispatch this item by {@link #toTarget}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getFailures public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.util.List<com.exedio.cope.pattern.Dispatcher.Failure> getToTargetFailures()
	{
		return DispatcherItem.toTarget.getFailures(this);
	}/**

	 **
	 * Returns the parent field of the failure type of {@link #toTarget}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.FailureParent public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	static final com.exedio.cope.ItemField<DispatcherItem> toTargetFailureParent()
	{
		return DispatcherItem.toTarget.getFailureParent(DispatcherItem.class);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	private static final long serialVersionUID = 1l;/**

	 **
	 * The persistent type information for dispatcherItem.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.type public|package|protected|private|none</tt> in the class comment.
	 */
	public static final com.exedio.cope.Type<DispatcherItem> TYPE = newType(DispatcherItem.class)
;}
