/*
 * Copyright (C) 2004-2008  exedio GmbH (www.exedio.com)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package com.exedio.cope.pattern;

import java.io.IOException;
import java.util.ArrayList;

import com.exedio.cope.BooleanField;
import com.exedio.cope.IntegerField;
import com.exedio.cope.Item;
import com.exedio.cope.StringField;

public class DispatcherItem extends Item implements Dispatchable
{
	static final StringField body = new StringField();
	static final BooleanField fail = new BooleanField();
	static final IntegerField dispatchCount = new IntegerField().defaultTo(0).min(0);
	static final IntegerField dispatchLastSuccessElapsed = new IntegerField().defaultTo(0).min(0);
	static final ListField<Integer> dispatchFailureElapsed = ListField.newList(new IntegerField().defaultTo(0).min(0));

	static final Dispatcher upload = new Dispatcher(3, 2);
	
	public void dispatch() throws IOException, InterruptedException
	{
		final long start = System.currentTimeMillis();
		setDispatchCount(getDispatchCount()+1);
		Thread.sleep(5);
		if(getFail())
		{
			final ArrayList<Integer> failuresElapsed = new ArrayList<Integer>(getDispatchFailureElapsed());
			failuresElapsed.add((int)(System.currentTimeMillis() - start));
			setDispatchFailureElapsed(failuresElapsed);
			throw new IOException(getBody());
		}
		setDispatchLastSuccessElapsed((int)(System.currentTimeMillis() - start));
	}
	
	
	/**

	 **
	 * Creates a new DispatcherItem with all the fields initially needed.
	 * @param body the initial value for field {@link #body}.
	 * @param fail the initial value for field {@link #fail}.
	 * @throws com.exedio.cope.MandatoryViolationException if body is null.
	 * @throws com.exedio.cope.StringLengthViolationException if body violates its length constraint.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tags <tt>@cope.constructor public|package|protected|private|none</tt> in the class comment and <tt>@cope.initial</tt> in the comment of fields.
	 */
	DispatcherItem(
				final java.lang.String body,
				final boolean fail)
			throws
				com.exedio.cope.MandatoryViolationException,
				com.exedio.cope.StringLengthViolationException
	{
		this(new com.exedio.cope.SetValue[]{
			DispatcherItem.body.map(body),
			DispatcherItem.fail.map(fail),
		});
	}/**

	 **
	 * Creates a new DispatcherItem and sets the given fields initially.
	 * This constructor is called by {@link com.exedio.cope.Type#newItem Type.newItem}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.generic.constructor public|package|protected|private|none</tt> in the class comment.
	 */
	private DispatcherItem(final com.exedio.cope.SetValue... setValues)
	{
		super(setValues);
	}/**

	 **
	 * Reactivation constructor. Used for internal purposes only.
	 * @see com.exedio.cope.Item#Item(com.exedio.cope.util.ReactivationConstructorDummy,int)
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	@SuppressWarnings("unused") private DispatcherItem(final com.exedio.cope.util.ReactivationConstructorDummy d,final int pk)
	{
		super(d,pk);
	}/**

	 **
	 * Returns the value of {@link #body}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getBody()
	{
		return DispatcherItem.body.get(this);
	}/**

	 **
	 * Sets a new value for {@link #body}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setBody(final java.lang.String body)
			throws
				com.exedio.cope.MandatoryViolationException,
				com.exedio.cope.StringLengthViolationException
	{
		DispatcherItem.body.set(this,body);
	}/**

	 **
	 * Returns the value of {@link #fail}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final|boolean-as-is</tt> in the comment of the field.
	 */
	final boolean getFail()
	{
		return DispatcherItem.fail.getMandatory(this);
	}/**

	 **
	 * Sets a new value for {@link #fail}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setFail(final boolean fail)
	{
		DispatcherItem.fail.set(this,fail);
	}/**

	 **
	 * Returns the value of {@link #dispatchCount}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final int getDispatchCount()
	{
		return DispatcherItem.dispatchCount.getMandatory(this);
	}/**

	 **
	 * Sets a new value for {@link #dispatchCount}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setDispatchCount(final int dispatchCount)
			throws
				com.exedio.cope.IntegerRangeViolationException
	{
		DispatcherItem.dispatchCount.set(this,dispatchCount);
	}/**

	 **
	 * Returns the value of {@link #dispatchLastSuccessElapsed}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final int getDispatchLastSuccessElapsed()
	{
		return DispatcherItem.dispatchLastSuccessElapsed.getMandatory(this);
	}/**

	 **
	 * Sets a new value for {@link #dispatchLastSuccessElapsed}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setDispatchLastSuccessElapsed(final int dispatchLastSuccessElapsed)
			throws
				com.exedio.cope.IntegerRangeViolationException
	{
		DispatcherItem.dispatchLastSuccessElapsed.set(this,dispatchLastSuccessElapsed);
	}/**

	 **
	 * Returns the value of {@link #dispatchFailureElapsed}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.util.List<Integer> getDispatchFailureElapsed()
	{
		return DispatcherItem.dispatchFailureElapsed.get(this);
	}/**

	 **
	 * Returns the items, for which field list {@link #dispatchFailureElapsed} contains the given element.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getDistinctParentsOf public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	static final java.util.List<DispatcherItem> getDistinctParentsOfDispatchFailureElapsed(final Integer element)
	{
		return DispatcherItem.dispatchFailureElapsed.getDistinctParents(DispatcherItem.class,element);
	}/**

	 **
	 * Sets a new value for {@link #dispatchFailureElapsed}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setDispatchFailureElapsed(final java.util.Collection<? extends Integer> dispatchFailureElapsed)
			throws
				com.exedio.cope.MandatoryViolationException,
				com.exedio.cope.IntegerRangeViolationException,
				java.lang.ClassCastException
	{
		DispatcherItem.dispatchFailureElapsed.set(this,dispatchFailureElapsed);
	}/**

	 **
	 * Returns the parent field of the type of {@link #dispatchFailureElapsed}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.Parent public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	static final com.exedio.cope.ItemField<DispatcherItem> dispatchFailureElapsedParent()
	{
		return DispatcherItem.dispatchFailureElapsed.getParent(DispatcherItem.class);
	}/**

	 **
	 * Dispatch by {@link #upload}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.dispatch public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	static final void dispatchUpload()
	{
		DispatcherItem.upload.dispatch(DispatcherItem.class);
	}/**

	 **
	 * Returns, whether this item is yet to be dispatched by {@link #upload}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.isPending public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final boolean isUploadPending()
	{
		return DispatcherItem.upload.isPending(this);
	}/**

	 **
	 * Returns the date, this item was successfully dispatched by {@link #upload}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getSuccessDate public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.util.Date getUploadSuccessDate()
	{
		return DispatcherItem.upload.getSuccessDate(this);
	}/**

	 **
	 * Returns the milliseconds, this item needed to be successfully dispatched by {@link #upload}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getSuccessElapsed public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.Long getUploadSuccessElapsed()
	{
		return DispatcherItem.upload.getSuccessElapsed(this);
	}/**

	 **
	 * Returns the failed attempts to dispatch this item by {@link #upload}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getFailures public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.util.List<com.exedio.cope.pattern.Dispatcher.Failure> getUploadFailures()
	{
		return DispatcherItem.upload.getFailures(this);
	}/**

	 **
	 * Returns the parent field of the failure type of {@link #upload}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.FailureParent public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	static final com.exedio.cope.ItemField<DispatcherItem> uploadFailureParent()
	{
		return DispatcherItem.upload.getFailureParent(DispatcherItem.class);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	private static final long serialVersionUID = 1l;/**

	 **
	 * The persistent type information for dispatcherItem.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.type public|package|protected|private|none</tt> in the class comment.
	 */
	public static final com.exedio.cope.Type<DispatcherItem> TYPE = newType(DispatcherItem.class)
;}
