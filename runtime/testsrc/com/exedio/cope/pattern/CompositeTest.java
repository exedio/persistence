/*
 * Copyright (C) 2004-2009  exedio GmbH (www.exedio.com)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package com.exedio.cope.pattern;

import com.exedio.cope.IntegerField;
import com.exedio.cope.IntegerRangeViolationException;
import com.exedio.cope.MandatoryViolationException;
import com.exedio.cope.StringField;
import com.exedio.cope.StringLengthViolationException;
import com.exedio.cope.junit.CopeAssert;

public class CompositeTest extends CopeAssert
{
	public void testCheck()
	{
		try
		{
			new Value("12345", 5);
			fail();
		}
		catch(StringLengthViolationException e)
		{
			// TODO make a nice exception message with feature name
			assertSame(Value.string4, e.getFeature());
			assertSame(null, e.getItem());
		}
		
		try
		{
			new Value(null, 5);
			fail();
		}
		catch(MandatoryViolationException e)
		{
			assertSame(Value.string4, e.getFeature());
			assertSame(null, e.getItem());
		}
		
		final Value value = new Value("1234", 4);
		assertEquals("1234", value.getString4());
		assertEquals(4, value.getIntMax4());
		assertEquals(null, value.getIntOptional());
		
		try
		{
			value.setString4("12345");
			fail();
		}
		catch(StringLengthViolationException e)
		{
			assertSame(Value.string4, e.getFeature());
			assertSame(null, e.getItem());
		}
		assertEquals("1234", value.getString4());
		
		try
		{
			value.setString4(null);
			fail();
		}
		catch(MandatoryViolationException e)
		{
			assertSame(Value.string4, e.getFeature());
			assertSame(null, e.getItem());
		}
		assertEquals("1234", value.getString4());
		
		try
		{
			value.setIntMax4(5);
			fail();
		}
		catch(IntegerRangeViolationException e)
		{
			assertSame(Value.intMax4, e.getFeature());
			assertSame(null, e.getItem());
		}
		assertEquals(4, value.getIntMax4());
	}
	
	static final class Value extends Composite
	{
		public static final StringField string4 = new StringField().lengthMax(4);
		public static final IntegerField intMax4 = new IntegerField().max(4);
		public static final IntegerField intOptional = new IntegerField().optional();
		
	/**

	 **
	 * Creates a new Value with all the fields initially needed.
	 * @param string4 the initial value for field {@link #string4}.
	 * @param intMax4 the initial value for field {@link #intMax4}.
	 * @throws com.exedio.cope.IntegerRangeViolationException if intMax4 violates its range constraint.
	 * @throws com.exedio.cope.MandatoryViolationException if string4 is null.
	 * @throws com.exedio.cope.StringLengthViolationException if string4 violates its length constraint.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tags <tt>@cope.constructor public|package|protected|private|none</tt> in the class comment and <tt>@cope.initial</tt> in the comment of fields.
	 */
	Value(
				final java.lang.String string4,
				final int intMax4)
			throws
				com.exedio.cope.IntegerRangeViolationException,
				com.exedio.cope.MandatoryViolationException,
				com.exedio.cope.StringLengthViolationException
	{
		this(new com.exedio.cope.SetValue[]{
			Value.string4.map(string4),
			Value.intMax4.map(intMax4),
		});
	}/**

	 **
	 * Creates a new Value and sets the given fields initially.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.generic.constructor public|package|protected|private|none</tt> in the class comment.
	 */
	private Value(final com.exedio.cope.SetValue... setValues)
	{
		super(setValues);
	}/**

	 **
	 * Returns the value of {@link #string4}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	public final java.lang.String getString4()
	{
		return get(Value.string4);
	}/**

	 **
	 * Sets a new value for {@link #string4}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	public final void setString4(final java.lang.String string4)
			throws
				com.exedio.cope.MandatoryViolationException,
				com.exedio.cope.StringLengthViolationException
	{
		set(Value.string4,string4);
	}/**

	 **
	 * Returns the value of {@link #intMax4}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	public final int getIntMax4()
	{
		return getMandatory(Value.intMax4);
	}/**

	 **
	 * Sets a new value for {@link #intMax4}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	public final void setIntMax4(final int intMax4)
			throws
				com.exedio.cope.IntegerRangeViolationException
	{
		set(Value.intMax4,intMax4);
	}/**

	 **
	 * Returns the value of {@link #intOptional}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	public final java.lang.Integer getIntOptional()
	{
		return get(Value.intOptional);
	}/**

	 **
	 * Sets a new value for {@link #intOptional}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	public final void setIntOptional(final java.lang.Integer intOptional)
	{
		set(Value.intOptional,intOptional);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	private static final long serialVersionUID = 1l;}
}
