/*
 * Copyright (C) 2004-2012  exedio GmbH (www.exedio.com)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package com.exedio.cope.pattern;

import com.exedio.cope.Item;

public final class UniqueHashedMediaItem extends Item
{
	static final UniqueHashedMedia hashedMedia = new UniqueHashedMedia(new Media().toFinal());

	/**

	 **
	 * Creates a new UniqueHashedMediaItem with all the fields initially needed.
	 * @param hashedMedia the initial value for field {@link #hashedMedia}.
	 * @throws com.exedio.cope.MandatoryViolationException if hashedMedia is null.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tags <tt>@cope.constructor public|package|protected|private|none</tt> in the class comment and <tt>@cope.initial</tt> in the comment of fields.
	 */
	UniqueHashedMediaItem(
				final com.exedio.cope.pattern.UniqueHashedMedia.Value hashedMedia)
			throws
				com.exedio.cope.MandatoryViolationException
	{
		this(new com.exedio.cope.SetValue<?>[]{
			UniqueHashedMediaItem.hashedMedia.map(hashedMedia),
		});
	}/**

	 **
	 * Creates a new UniqueHashedMediaItem and sets the given fields initially.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.generic.constructor public|package|protected|private|none</tt> in the class comment.
	 */
	private UniqueHashedMediaItem(final com.exedio.cope.SetValue<?>... setValues)
	{
		super(setValues);
	}/**

	 **
	 * Returns a URL the content of {@link #hashedMedia} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getURL public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getHashedMediaURL()
	{
		return UniqueHashedMediaItem.hashedMedia.getURL(this);
	}/**

	 **
	 * Returns a Locator the content of {@link #hashedMedia} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLocator public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final com.exedio.cope.pattern.MediaPath.Locator getHashedMediaLocator()
	{
		return UniqueHashedMediaItem.hashedMedia.getLocator(this);
	}/**

	 **
	 * Returns the content type of the media {@link #hashedMedia}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getContentType public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getHashedMediaContentType()
	{
		return UniqueHashedMediaItem.hashedMedia.getContentType(this);
	}/**

	 **
	 * Returns the last modification date of media {@link #hashedMedia}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLastModified public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.util.Date getHashedMediaLastModified()
	{
		return UniqueHashedMediaItem.hashedMedia.getLastModified(this);
	}/**

	 **
	 * Returns the body length of the media {@link #hashedMedia}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLength public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final long getHashedMediaLength()
	{
		return UniqueHashedMediaItem.hashedMedia.getLength(this);
	}/**

	 **
	 * Returns the body of the media {@link #hashedMedia}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getBody public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final byte[] getHashedMediaBody()
	{
		return UniqueHashedMediaItem.hashedMedia.getBody(this);
	}/**

	 **
	 * Returns the hash of the media body {@link #hashedMedia}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getHash public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getHashedMediaHash()
	{
		return UniqueHashedMediaItem.hashedMedia.getHash(this);
	}/**

	 **
	 * Finds a uniqueHashedMediaItem by it's {@link #hashedMedia}.
	 * @param hashedMedia shall be equal to field {@link #hashedMedia}.
	 * @return null if there is no matching item.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.for public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	static final UniqueHashedMediaItem forHashedMedia(final java.lang.String hashedMedia)
	{
		return UniqueHashedMediaItem.hashedMedia.searchUnique(UniqueHashedMediaItem.class,hashedMedia);
	}/**

	 **
	 * Finds a uniqueHashedMediaItem by it's {@link #hashedMedia}.
	 * @param hashedMedia shall be equal to field {@link #hashedMedia}.
	 * @throws java.io.IOException if reading <tt>mediaValue</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getOrCreate public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	static final UniqueHashedMediaItem getOrCreate(final com.exedio.cope.pattern.Media.Value hashedMedia)
			throws
				java.io.IOException
	{
		return UniqueHashedMediaItem.hashedMedia.getOrCreate(UniqueHashedMediaItem.class,hashedMedia);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	private static final long serialVersionUID = 1l;/**

	 **
	 * The persistent type information for uniqueHashedMediaItem.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.type public|package|protected|private|none</tt> in the class comment.
	 */
	public static final com.exedio.cope.Type<UniqueHashedMediaItem> TYPE = com.exedio.cope.TypesBound.newType(UniqueHashedMediaItem.class);/**

	 **
	 * Activation constructor. Used for internal purposes only.
	 * @see com.exedio.cope.Item#Item(com.exedio.cope.ActivationParameters)
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	@SuppressWarnings("unused") private UniqueHashedMediaItem(final com.exedio.cope.ActivationParameters ap){super(ap);
}}
