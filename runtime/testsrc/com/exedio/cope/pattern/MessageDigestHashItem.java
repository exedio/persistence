/*
 * Copyright (C) 2004-2012  exedio GmbH (www.exedio.com)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package com.exedio.cope.pattern;

import com.exedio.cope.Item;
import com.exedio.cope.util.Hex;
import java.nio.charset.Charset;

public final class MessageDigestHashItem extends Item
{
	/** @cope.set none */
	static final Hash password = new Hash(new MessageDigestAlgorithm("SHA-512", 0, 5).salt(8, new MockSecureRandom2())).optional().limit(200);
	/** @cope.set none */
	static final Hash passwordLatin = new Hash(new MessageDigestAlgorithm("SHA-512", 0, 5).salt(8, new MockSecureRandom2()), Charset.forName("ISO-8859-1")).optional();
	static final Hash passwordFinal = new Hash(new MessageDigestAlgorithm("SHA-512", 0, 5).salt(8, new MockSecureRandom2())).toFinal();
	/** @cope.set none */
	static final Hash passwordMandatory = new Hash(new MessageDigestAlgorithm("SHA-512", 0, 5).salt(8, new MockSecureRandom2()));

	void setPassword(final String password)
	{
		set(MessageDigestHashItem.password, password);
	}

	void setPasswordLatin(final String password)
	{
		set(MessageDigestHashItem.passwordLatin, password);
	}

	void setPasswordMandatory(final String password)
	{
		set(MessageDigestHashItem.passwordMandatory, password);
	}

	private void set(final Hash hash, final String password)
	{
		@SuppressWarnings("deprecation")
		final Hash.Algorithm algo = hash.getAlgorithm();
		((MockSecureRandom2)((MessageDigestAlgorithm)algo).getSaltSource()).expectNextBytes(Hex.decodeLower("aeab417a9b5a7cf3"));
		hash.set(this, password);
	}

	/**

	 **
	 * Creates a new MessageDigestHashItem with all the fields initially needed.
	 * @param passwordFinal the initial value for field {@link #passwordFinal}.
	 * @param passwordMandatory the initial value for field {@link #passwordMandatory}.
	 * @throws com.exedio.cope.MandatoryViolationException if passwordFinal, passwordMandatory is null.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tags <tt>@cope.constructor public|package|protected|private|none</tt> in the class comment and <tt>@cope.initial</tt> in the comment of fields.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	MessageDigestHashItem(
				final java.lang.String passwordFinal,
				final java.lang.String passwordMandatory)
			throws
				com.exedio.cope.MandatoryViolationException
	{
		this(new com.exedio.cope.SetValue<?>[]{
			MessageDigestHashItem.passwordFinal.map(passwordFinal),
			MessageDigestHashItem.passwordMandatory.map(passwordMandatory),
		});
	}/**

	 **
	 * Creates a new MessageDigestHashItem and sets the given fields initially.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.generic.constructor public|package|protected|private|none</tt> in the class comment.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	private MessageDigestHashItem(final com.exedio.cope.SetValue<?>... setValues)
	{
		super(setValues);
	}/**

	 **
	 * Returns whether the given value corresponds to the hash in {@link #password}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.check public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final boolean checkPassword(final java.lang.String password)
	{
		return MessageDigestHashItem.password.check(this,password);
	}/**

	 **
	 * Wastes (almost) as much cpu cycles, as a call to <tt>checkPassword</tt> would have needed.
	 * Needed to prevent Timing Attacks.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.blind public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	static final void blindPassword(final java.lang.String password)
	{
		MessageDigestHashItem.password.blind(password);
	}/**

	 **
	 * Returns the encoded hash value for hash {@link #password}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getSHA512s8i5 public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final java.lang.String getPasswordSHA512s8i5()
	{
		return MessageDigestHashItem.password.getHash(this);
	}/**

	 **
	 * Sets the encoded hash value for hash {@link #password}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.setSHA512s8i5 public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final void setPasswordSHA512s8i5(final java.lang.String password)
	{
		MessageDigestHashItem.password.setHash(this,password);
	}/**

	 **
	 * Returns whether the given value corresponds to the hash in {@link #passwordLatin}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.check public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final boolean checkPasswordLatin(final java.lang.String passwordLatin)
	{
		return MessageDigestHashItem.passwordLatin.check(this,passwordLatin);
	}/**

	 **
	 * Wastes (almost) as much cpu cycles, as a call to <tt>checkPasswordLatin</tt> would have needed.
	 * Needed to prevent Timing Attacks.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.blind public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	static final void blindPasswordLatin(final java.lang.String passwordLatin)
	{
		MessageDigestHashItem.passwordLatin.blind(passwordLatin);
	}/**

	 **
	 * Returns the encoded hash value for hash {@link #passwordLatin}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getSHA512s8i5 public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final java.lang.String getPasswordLatinSHA512s8i5()
	{
		return MessageDigestHashItem.passwordLatin.getHash(this);
	}/**

	 **
	 * Sets the encoded hash value for hash {@link #passwordLatin}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.setSHA512s8i5 public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final void setPasswordLatinSHA512s8i5(final java.lang.String passwordLatin)
	{
		MessageDigestHashItem.passwordLatin.setHash(this,passwordLatin);
	}/**

	 **
	 * Returns whether the given value corresponds to the hash in {@link #passwordFinal}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.check public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final boolean checkPasswordFinal(final java.lang.String passwordFinal)
	{
		return MessageDigestHashItem.passwordFinal.check(this,passwordFinal);
	}/**

	 **
	 * Wastes (almost) as much cpu cycles, as a call to <tt>checkPasswordFinal</tt> would have needed.
	 * Needed to prevent Timing Attacks.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.blind public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	static final void blindPasswordFinal(final java.lang.String passwordFinal)
	{
		MessageDigestHashItem.passwordFinal.blind(passwordFinal);
	}/**

	 **
	 * Returns the encoded hash value for hash {@link #passwordFinal}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getSHA512s8i5 public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final java.lang.String getPasswordFinalSHA512s8i5()
	{
		return MessageDigestHashItem.passwordFinal.getHash(this);
	}/**

	 **
	 * Returns whether the given value corresponds to the hash in {@link #passwordMandatory}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.check public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final boolean checkPasswordMandatory(final java.lang.String passwordMandatory)
	{
		return MessageDigestHashItem.passwordMandatory.check(this,passwordMandatory);
	}/**

	 **
	 * Wastes (almost) as much cpu cycles, as a call to <tt>checkPasswordMandatory</tt> would have needed.
	 * Needed to prevent Timing Attacks.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.blind public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	static final void blindPasswordMandatory(final java.lang.String passwordMandatory)
	{
		MessageDigestHashItem.passwordMandatory.blind(passwordMandatory);
	}/**

	 **
	 * Returns the encoded hash value for hash {@link #passwordMandatory}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getSHA512s8i5 public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final java.lang.String getPasswordMandatorySHA512s8i5()
	{
		return MessageDigestHashItem.passwordMandatory.getHash(this);
	}/**

	 **
	 * Sets the encoded hash value for hash {@link #passwordMandatory}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.setSHA512s8i5 public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final void setPasswordMandatorySHA512s8i5(final java.lang.String passwordMandatory)
			throws
				com.exedio.cope.MandatoryViolationException
	{
		MessageDigestHashItem.passwordMandatory.setHash(this,passwordMandatory);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	private static final long serialVersionUID = 1l;/**

	 **
	 * The persistent type information for messageDigestHashItem.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.type public|package|protected|private|none</tt> in the class comment.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	public static final com.exedio.cope.Type<MessageDigestHashItem> TYPE = com.exedio.cope.TypesBound.newType(MessageDigestHashItem.class);/**

	 **
	 * Activation constructor. Used for internal purposes only.
	 * @see com.exedio.cope.Item#Item(com.exedio.cope.ActivationParameters)
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	@SuppressWarnings("unused") private MessageDigestHashItem(final com.exedio.cope.ActivationParameters ap){super(ap);
}}
