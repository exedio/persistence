/*
 * Copyright (C) 2004-2012  exedio GmbH (www.exedio.com)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package com.exedio.cope.pattern;

import com.exedio.cope.Item;

public final class HashedMediaItem extends Item
{
	/** @cope.getURL none */
	static final HashedMedia optionalHashedMedia = new HashedMedia(new Media().optional());


	/** @cope.getURL none */
	static final HashedMedia uniqueFinalHashedMedia = new HashedMedia(new Media().toFinal()).unique();

	/**

	 **
	 * Creates a new HashedMediaItem with all the fields initially needed.
	 * @param uniqueFinalHashedMedia the initial value for field {@link #uniqueFinalHashedMedia}.
	 * @throws com.exedio.cope.MandatoryViolationException if uniqueFinalHashedMedia is null.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tags <tt>@cope.constructor public|package|protected|private|none</tt> in the class comment and <tt>@cope.initial</tt> in the comment of fields.
	 */
	HashedMediaItem(
				final com.exedio.cope.pattern.Media.Value uniqueFinalHashedMedia)
			throws
				com.exedio.cope.MandatoryViolationException
	{
		this(new com.exedio.cope.SetValue<?>[]{
			HashedMediaItem.uniqueFinalHashedMedia.map(uniqueFinalHashedMedia),
		});
	}/**

	 **
	 * Creates a new HashedMediaItem and sets the given fields initially.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.generic.constructor public|package|protected|private|none</tt> in the class comment.
	 */
	private HashedMediaItem(final com.exedio.cope.SetValue<?>... setValues)
	{
		super(setValues);
	}/**

	 **
	 * Returns a Locator the content of {@link #optionalHashedMedia} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLocator public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final com.exedio.cope.pattern.MediaPath.Locator getOptionalHashedMediaLocator()
	{
		return HashedMediaItem.optionalHashedMedia.getLocator(this);
	}/**

	 **
	 * Returns the content type of the media {@link #optionalHashedMedia}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getContentType public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getOptionalHashedMediaContentType()
	{
		return HashedMediaItem.optionalHashedMedia.getContentType(this);
	}/**

	 **
	 * Returns whether media {@link #optionalHashedMedia} is null.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.isNull public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final boolean isOptionalHashedMediaNull()
	{
		return HashedMediaItem.optionalHashedMedia.isNull(this);
	}/**

	 **
	 * Returns the last modification date of media {@link #optionalHashedMedia}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLastModified public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.util.Date getOptionalHashedMediaLastModified()
	{
		return HashedMediaItem.optionalHashedMedia.getLastModified(this);
	}/**

	 **
	 * Returns the body length of the media {@link #optionalHashedMedia}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLength public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final long getOptionalHashedMediaLength()
	{
		return HashedMediaItem.optionalHashedMedia.getLength(this);
	}/**

	 **
	 * Returns the body of the media {@link #optionalHashedMedia}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getBody public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final byte[] getOptionalHashedMediaBody()
	{
		return HashedMediaItem.optionalHashedMedia.getBody(this);
	}/**

	 **
	 * Returns the hash of the media body {@link #optionalHashedMedia}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getHash public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getOptionalHashedMediaHash()
	{
		return HashedMediaItem.optionalHashedMedia.getHash(this);
	}/**

	 **
	 * Sets the content of media {@link #optionalHashedMedia}.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setOptionalHashedMedia(final com.exedio.cope.pattern.Media.Value optionalHashedMedia)
			throws
				java.io.IOException
	{
		HashedMediaItem.optionalHashedMedia.set(this,optionalHashedMedia);
	}/**

	 **
	 * Returns a Locator the content of {@link #uniqueFinalHashedMedia} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLocator public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final com.exedio.cope.pattern.MediaPath.Locator getUniqueFinalHashedMediaLocator()
	{
		return HashedMediaItem.uniqueFinalHashedMedia.getLocator(this);
	}/**

	 **
	 * Returns the content type of the media {@link #uniqueFinalHashedMedia}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getContentType public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getUniqueFinalHashedMediaContentType()
	{
		return HashedMediaItem.uniqueFinalHashedMedia.getContentType(this);
	}/**

	 **
	 * Returns the last modification date of media {@link #uniqueFinalHashedMedia}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLastModified public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.util.Date getUniqueFinalHashedMediaLastModified()
	{
		return HashedMediaItem.uniqueFinalHashedMedia.getLastModified(this);
	}/**

	 **
	 * Returns the body length of the media {@link #uniqueFinalHashedMedia}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLength public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final long getUniqueFinalHashedMediaLength()
	{
		return HashedMediaItem.uniqueFinalHashedMedia.getLength(this);
	}/**

	 **
	 * Returns the body of the media {@link #uniqueFinalHashedMedia}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getBody public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final byte[] getUniqueFinalHashedMediaBody()
	{
		return HashedMediaItem.uniqueFinalHashedMedia.getBody(this);
	}/**

	 **
	 * Returns the hash of the media body {@link #uniqueFinalHashedMedia}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getHash public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getUniqueFinalHashedMediaHash()
	{
		return HashedMediaItem.uniqueFinalHashedMedia.getHash(this);
	}/**

	 **
	 * Finds a hashedMediaItem by it's {@link #uniqueFinalHashedMedia}.
	 * @param uniqueFinalHashedMedia shall be equal to field {@link #uniqueFinalHashedMedia}.
	 * @return null if there is no matching item.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.for public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	static final HashedMediaItem forUniqueFinalHashedMedia(final java.lang.String uniqueFinalHashedMedia)
	{
		return HashedMediaItem.uniqueFinalHashedMedia.searchUnique(HashedMediaItem.class,uniqueFinalHashedMedia);
	}/**

	 **
	 * Finds a hashedMediaItem by it's {@link #uniqueFinalHashedMedia}.
	 * @param uniqueFinalHashedMedia shall be equal to field {@link #uniqueFinalHashedMedia}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getOrCreate public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	static final HashedMediaItem getUniqueFinalHashedMediaOrCreate(final com.exedio.cope.pattern.Media.Value uniqueFinalHashedMedia)
	{
		return HashedMediaItem.uniqueFinalHashedMedia.getOrCreate(HashedMediaItem.class,uniqueFinalHashedMedia);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	private static final long serialVersionUID = 1l;/**

	 **
	 * The persistent type information for hashedMediaItem.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.type public|package|protected|private|none</tt> in the class comment.
	 */
	public static final com.exedio.cope.Type<HashedMediaItem> TYPE = com.exedio.cope.TypesBound.newType(HashedMediaItem.class);/**

	 **
	 * Activation constructor. Used for internal purposes only.
	 * @see com.exedio.cope.Item#Item(com.exedio.cope.ActivationParameters)
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	@SuppressWarnings("unused") private HashedMediaItem(final com.exedio.cope.ActivationParameters ap){super(ap);
}}
