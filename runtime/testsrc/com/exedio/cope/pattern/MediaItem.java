/*
 * Copyright (C) 2004-2015  exedio GmbH (www.exedio.com)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package com.exedio.cope.pattern;

import static com.exedio.cope.instrument.Visibility.NONE;

import com.exedio.cope.Item;
import com.exedio.cope.StringField;
import com.exedio.cope.instrument.Wrapper;
import com.exedio.cope.instrument.WrapperIgnore;

public final class MediaItem extends Item
{
	static final StringField name = new StringField().optional();

	@Wrapper(wrap="getURL", visibility=NONE)
	static final Media file = new Media().optional().lengthMax(20);

	@Wrapper(wrap="getURL", visibility=NONE)
	static final Media image = new Media().optional().contentTypeSub("image");

	@Wrapper(wrap="getURL", visibility=NONE)
	static final Media photo = new Media().optional().lengthMax(2000).contentType("image/jpeg");

	@Wrapper(wrap="getURL", visibility=NONE)
	@SuppressWarnings("deprecation") // OK: test deprecated api
	static final MediaRedirect foto = new MediaRedirect(photo);

	@Wrapper(wrap="getURL", visibility=NONE)
	static final Media sheet = new Media().optional().lengthMax(5000).contentType("application/pdf", "image/png");

	@WrapperIgnore // required because MediaCustom inherits @WrapFeature
	static final MediaCustom custom = new MediaCustom(name);


	MediaItem(final String name)
	{
		this(new com.exedio.cope.SetValue<?>[]{
			MediaItem.name.map(name),
		});
	}

	MediaItem(final Media.Value file)
	{
		this(new com.exedio.cope.SetValue<?>[]{
			MediaItem.file.map(file),
		});
	}

	// must not be generated by the instrumentor
	// because photo has a fixed contentType
	java.lang.String getPhotoContentType()
	{
		return photo.getContentType(this);
	}

	// must not be generated by the instrumentor
	// because photo has a fixed contentType
	java.lang.String getFotoContentType()
	{
		return foto.getContentType(this);
	}

	// TODO generate by instrumentor
	String getCustomContentType()
	{
		return custom.getContentType(this);
	}

	// TODO generate by instrumentor
	MediaPath.Locator getCustomLocator()
	{
		return custom.getLocator(this);
	}

	/**
	 * Creates a new MediaItem with all the fields initially needed.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument") // customize with @WrapperType(constructor=...) and @WrapperInitial
	public MediaItem()
	{
		this(new com.exedio.cope.SetValue<?>[]{
		});
	}

	/**
	 * Creates a new MediaItem and sets the given fields initially.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument") // customize with @WrapperType(genericConstructor=...)
	private MediaItem(final com.exedio.cope.SetValue<?>... setValues)
	{
		super(setValues);
	}

	/**
	 * Returns the value of {@link #name}.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument") // customize with @Wrapper(wrap="get")
	@javax.annotation.Nullable
	final java.lang.String getName()
	{
		return MediaItem.name.get(this);
	}

	/**
	 * Sets a new value for {@link #name}.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument") // customize with @Wrapper(wrap="set")
	final void setName(@javax.annotation.Nullable final java.lang.String name)
			throws
				com.exedio.cope.StringLengthViolationException
	{
		MediaItem.name.set(this,name);
	}

	/**
	 * Returns a Locator the content of {@link #file} is available under.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument") // customize with @Wrapper(wrap="getLocator")
	@javax.annotation.Nullable
	final com.exedio.cope.pattern.MediaPath.Locator getFileLocator()
	{
		return MediaItem.file.getLocator(this);
	}

	/**
	 * Returns the content type of the media {@link #file}.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument") // customize with @Wrapper(wrap="getContentType")
	@javax.annotation.Nullable
	final java.lang.String getFileContentType()
	{
		return MediaItem.file.getContentType(this);
	}

	/**
	 * Returns whether media {@link #file} is null.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument") // customize with @Wrapper(wrap="isNull")
	final boolean isFileNull()
	{
		return MediaItem.file.isNull(this);
	}

	/**
	 * Returns the last modification date of media {@link #file}.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument") // customize with @Wrapper(wrap="getLastModified")
	@javax.annotation.Nullable
	final java.util.Date getFileLastModified()
	{
		return MediaItem.file.getLastModified(this);
	}

	/**
	 * Returns the body length of the media {@link #file}.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument") // customize with @Wrapper(wrap="getLength")
	final long getFileLength()
	{
		return MediaItem.file.getLength(this);
	}

	/**
	 * Returns the body of the media {@link #file}.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument") // customize with @Wrapper(wrap="getBody")
	@javax.annotation.Nullable
	final byte[] getFileBody()
	{
		return MediaItem.file.getBody(this);
	}

	/**
	 * Writes the body of media {@link #file} into the given stream.
	 * Does nothing, if the media is null.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument") // customize with @Wrapper(wrap="getBody")
	final void getFileBody(@javax.annotation.Nonnull final java.io.OutputStream body)
			throws
				java.io.IOException
	{
		MediaItem.file.getBody(this,body);
	}

	/**
	 * Writes the body of media {@link #file} into the given file.
	 * Does nothing, if the media is null.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument") // customize with @Wrapper(wrap="getBody")
	final void getFileBody(@javax.annotation.Nonnull final java.io.File body)
			throws
				java.io.IOException
	{
		MediaItem.file.getBody(this,body);
	}

	/**
	 * Sets the content of media {@link #file}.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument") // customize with @Wrapper(wrap="set")
	final void setFile(@javax.annotation.Nullable final com.exedio.cope.pattern.Media.Value file)
			throws
				java.io.IOException
	{
		MediaItem.file.set(this,file);
	}

	/**
	 * Sets the content of media {@link #file}.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument") // customize with @Wrapper(wrap="set")
	final void setFile(@javax.annotation.Nullable final byte[] body,@javax.annotation.Nullable final java.lang.String contentType)
	{
		MediaItem.file.set(this,body,contentType);
	}

	/**
	 * Sets the content of media {@link #file}.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument") // customize with @Wrapper(wrap="set")
	final void setFile(@javax.annotation.Nullable final java.io.InputStream body,@javax.annotation.Nullable final java.lang.String contentType)
			throws
				java.io.IOException
	{
		MediaItem.file.set(this,body,contentType);
	}

	/**
	 * Sets the content of media {@link #file}.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument") // customize with @Wrapper(wrap="set")
	final void setFile(@javax.annotation.Nullable final java.nio.file.Path body,@javax.annotation.Nullable final java.lang.String contentType)
			throws
				java.io.IOException
	{
		MediaItem.file.set(this,body,contentType);
	}

	/**
	 * Sets the content of media {@link #file}.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument") // customize with @Wrapper(wrap="set")
	final void setFile(@javax.annotation.Nullable final java.io.File body,@javax.annotation.Nullable final java.lang.String contentType)
			throws
				java.io.IOException
	{
		MediaItem.file.set(this,body,contentType);
	}

	/**
	 * Returns a Locator the content of {@link #image} is available under.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument") // customize with @Wrapper(wrap="getLocator")
	@javax.annotation.Nullable
	final com.exedio.cope.pattern.MediaPath.Locator getImageLocator()
	{
		return MediaItem.image.getLocator(this);
	}

	/**
	 * Returns the content type of the media {@link #image}.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument") // customize with @Wrapper(wrap="getContentType")
	@javax.annotation.Nullable
	final java.lang.String getImageContentType()
	{
		return MediaItem.image.getContentType(this);
	}

	/**
	 * Returns whether media {@link #image} is null.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument") // customize with @Wrapper(wrap="isNull")
	final boolean isImageNull()
	{
		return MediaItem.image.isNull(this);
	}

	/**
	 * Returns the last modification date of media {@link #image}.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument") // customize with @Wrapper(wrap="getLastModified")
	@javax.annotation.Nullable
	final java.util.Date getImageLastModified()
	{
		return MediaItem.image.getLastModified(this);
	}

	/**
	 * Returns the body length of the media {@link #image}.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument") // customize with @Wrapper(wrap="getLength")
	final long getImageLength()
	{
		return MediaItem.image.getLength(this);
	}

	/**
	 * Returns the body of the media {@link #image}.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument") // customize with @Wrapper(wrap="getBody")
	@javax.annotation.Nullable
	final byte[] getImageBody()
	{
		return MediaItem.image.getBody(this);
	}

	/**
	 * Writes the body of media {@link #image} into the given stream.
	 * Does nothing, if the media is null.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument") // customize with @Wrapper(wrap="getBody")
	final void getImageBody(@javax.annotation.Nonnull final java.io.OutputStream body)
			throws
				java.io.IOException
	{
		MediaItem.image.getBody(this,body);
	}

	/**
	 * Writes the body of media {@link #image} into the given file.
	 * Does nothing, if the media is null.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument") // customize with @Wrapper(wrap="getBody")
	final void getImageBody(@javax.annotation.Nonnull final java.io.File body)
			throws
				java.io.IOException
	{
		MediaItem.image.getBody(this,body);
	}

	/**
	 * Sets the content of media {@link #image}.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument") // customize with @Wrapper(wrap="set")
	final void setImage(@javax.annotation.Nullable final com.exedio.cope.pattern.Media.Value image)
			throws
				java.io.IOException
	{
		MediaItem.image.set(this,image);
	}

	/**
	 * Sets the content of media {@link #image}.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument") // customize with @Wrapper(wrap="set")
	final void setImage(@javax.annotation.Nullable final byte[] body,@javax.annotation.Nullable final java.lang.String contentType)
	{
		MediaItem.image.set(this,body,contentType);
	}

	/**
	 * Sets the content of media {@link #image}.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument") // customize with @Wrapper(wrap="set")
	final void setImage(@javax.annotation.Nullable final java.io.InputStream body,@javax.annotation.Nullable final java.lang.String contentType)
			throws
				java.io.IOException
	{
		MediaItem.image.set(this,body,contentType);
	}

	/**
	 * Sets the content of media {@link #image}.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument") // customize with @Wrapper(wrap="set")
	final void setImage(@javax.annotation.Nullable final java.nio.file.Path body,@javax.annotation.Nullable final java.lang.String contentType)
			throws
				java.io.IOException
	{
		MediaItem.image.set(this,body,contentType);
	}

	/**
	 * Sets the content of media {@link #image}.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument") // customize with @Wrapper(wrap="set")
	final void setImage(@javax.annotation.Nullable final java.io.File body,@javax.annotation.Nullable final java.lang.String contentType)
			throws
				java.io.IOException
	{
		MediaItem.image.set(this,body,contentType);
	}

	/**
	 * Returns a Locator the content of {@link #photo} is available under.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument") // customize with @Wrapper(wrap="getLocator")
	@javax.annotation.Nullable
	final com.exedio.cope.pattern.MediaPath.Locator getPhotoLocator()
	{
		return MediaItem.photo.getLocator(this);
	}

	/**
	 * Returns whether media {@link #photo} is null.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument") // customize with @Wrapper(wrap="isNull")
	final boolean isPhotoNull()
	{
		return MediaItem.photo.isNull(this);
	}

	/**
	 * Returns the last modification date of media {@link #photo}.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument") // customize with @Wrapper(wrap="getLastModified")
	@javax.annotation.Nullable
	final java.util.Date getPhotoLastModified()
	{
		return MediaItem.photo.getLastModified(this);
	}

	/**
	 * Returns the body length of the media {@link #photo}.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument") // customize with @Wrapper(wrap="getLength")
	final long getPhotoLength()
	{
		return MediaItem.photo.getLength(this);
	}

	/**
	 * Returns the body of the media {@link #photo}.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument") // customize with @Wrapper(wrap="getBody")
	@javax.annotation.Nullable
	final byte[] getPhotoBody()
	{
		return MediaItem.photo.getBody(this);
	}

	/**
	 * Writes the body of media {@link #photo} into the given stream.
	 * Does nothing, if the media is null.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument") // customize with @Wrapper(wrap="getBody")
	final void getPhotoBody(@javax.annotation.Nonnull final java.io.OutputStream body)
			throws
				java.io.IOException
	{
		MediaItem.photo.getBody(this,body);
	}

	/**
	 * Writes the body of media {@link #photo} into the given file.
	 * Does nothing, if the media is null.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument") // customize with @Wrapper(wrap="getBody")
	final void getPhotoBody(@javax.annotation.Nonnull final java.io.File body)
			throws
				java.io.IOException
	{
		MediaItem.photo.getBody(this,body);
	}

	/**
	 * Sets the content of media {@link #photo}.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument") // customize with @Wrapper(wrap="set")
	final void setPhoto(@javax.annotation.Nullable final com.exedio.cope.pattern.Media.Value photo)
			throws
				java.io.IOException
	{
		MediaItem.photo.set(this,photo);
	}

	/**
	 * Sets the content of media {@link #photo}.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument") // customize with @Wrapper(wrap="set")
	final void setPhoto(@javax.annotation.Nullable final byte[] body,@javax.annotation.Nullable final java.lang.String contentType)
	{
		MediaItem.photo.set(this,body,contentType);
	}

	/**
	 * Sets the content of media {@link #photo}.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument") // customize with @Wrapper(wrap="set")
	final void setPhoto(@javax.annotation.Nullable final java.io.InputStream body,@javax.annotation.Nullable final java.lang.String contentType)
			throws
				java.io.IOException
	{
		MediaItem.photo.set(this,body,contentType);
	}

	/**
	 * Sets the content of media {@link #photo}.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument") // customize with @Wrapper(wrap="set")
	final void setPhoto(@javax.annotation.Nullable final java.nio.file.Path body,@javax.annotation.Nullable final java.lang.String contentType)
			throws
				java.io.IOException
	{
		MediaItem.photo.set(this,body,contentType);
	}

	/**
	 * Sets the content of media {@link #photo}.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument") // customize with @Wrapper(wrap="set")
	final void setPhoto(@javax.annotation.Nullable final java.io.File body,@javax.annotation.Nullable final java.lang.String contentType)
			throws
				java.io.IOException
	{
		MediaItem.photo.set(this,body,contentType);
	}

	/**
	 * Returns a Locator the content of {@link #foto} is available under.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument") // customize with @Wrapper(wrap="getLocator")
	@javax.annotation.Nullable
	final com.exedio.cope.pattern.MediaPath.Locator getFotoLocator()
	{
		return MediaItem.foto.getLocator(this);
	}

	/**
	 * Returns a Locator the content of {@link #sheet} is available under.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument") // customize with @Wrapper(wrap="getLocator")
	@javax.annotation.Nullable
	final com.exedio.cope.pattern.MediaPath.Locator getSheetLocator()
	{
		return MediaItem.sheet.getLocator(this);
	}

	/**
	 * Returns the content type of the media {@link #sheet}.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument") // customize with @Wrapper(wrap="getContentType")
	@javax.annotation.Nullable
	final java.lang.String getSheetContentType()
	{
		return MediaItem.sheet.getContentType(this);
	}

	/**
	 * Returns whether media {@link #sheet} is null.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument") // customize with @Wrapper(wrap="isNull")
	final boolean isSheetNull()
	{
		return MediaItem.sheet.isNull(this);
	}

	/**
	 * Returns the last modification date of media {@link #sheet}.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument") // customize with @Wrapper(wrap="getLastModified")
	@javax.annotation.Nullable
	final java.util.Date getSheetLastModified()
	{
		return MediaItem.sheet.getLastModified(this);
	}

	/**
	 * Returns the body length of the media {@link #sheet}.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument") // customize with @Wrapper(wrap="getLength")
	final long getSheetLength()
	{
		return MediaItem.sheet.getLength(this);
	}

	/**
	 * Returns the body of the media {@link #sheet}.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument") // customize with @Wrapper(wrap="getBody")
	@javax.annotation.Nullable
	final byte[] getSheetBody()
	{
		return MediaItem.sheet.getBody(this);
	}

	/**
	 * Writes the body of media {@link #sheet} into the given stream.
	 * Does nothing, if the media is null.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument") // customize with @Wrapper(wrap="getBody")
	final void getSheetBody(@javax.annotation.Nonnull final java.io.OutputStream body)
			throws
				java.io.IOException
	{
		MediaItem.sheet.getBody(this,body);
	}

	/**
	 * Writes the body of media {@link #sheet} into the given file.
	 * Does nothing, if the media is null.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument") // customize with @Wrapper(wrap="getBody")
	final void getSheetBody(@javax.annotation.Nonnull final java.io.File body)
			throws
				java.io.IOException
	{
		MediaItem.sheet.getBody(this,body);
	}

	/**
	 * Sets the content of media {@link #sheet}.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument") // customize with @Wrapper(wrap="set")
	final void setSheet(@javax.annotation.Nullable final com.exedio.cope.pattern.Media.Value sheet)
			throws
				java.io.IOException
	{
		MediaItem.sheet.set(this,sheet);
	}

	/**
	 * Sets the content of media {@link #sheet}.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument") // customize with @Wrapper(wrap="set")
	final void setSheet(@javax.annotation.Nullable final byte[] body,@javax.annotation.Nullable final java.lang.String contentType)
	{
		MediaItem.sheet.set(this,body,contentType);
	}

	/**
	 * Sets the content of media {@link #sheet}.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument") // customize with @Wrapper(wrap="set")
	final void setSheet(@javax.annotation.Nullable final java.io.InputStream body,@javax.annotation.Nullable final java.lang.String contentType)
			throws
				java.io.IOException
	{
		MediaItem.sheet.set(this,body,contentType);
	}

	/**
	 * Sets the content of media {@link #sheet}.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument") // customize with @Wrapper(wrap="set")
	final void setSheet(@javax.annotation.Nullable final java.nio.file.Path body,@javax.annotation.Nullable final java.lang.String contentType)
			throws
				java.io.IOException
	{
		MediaItem.sheet.set(this,body,contentType);
	}

	/**
	 * Sets the content of media {@link #sheet}.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument") // customize with @Wrapper(wrap="set")
	final void setSheet(@javax.annotation.Nullable final java.io.File body,@javax.annotation.Nullable final java.lang.String contentType)
			throws
				java.io.IOException
	{
		MediaItem.sheet.set(this,body,contentType);
	}

	@javax.annotation.Generated("com.exedio.cope.instrument")
	private static final long serialVersionUID = 1l;

	/**
	 * The persistent type information for mediaItem.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument") // customize with @WrapperType(type=...)
	public static final com.exedio.cope.Type<MediaItem> TYPE = com.exedio.cope.TypesBound.newType(MediaItem.class);

	/**
	 * Activation constructor. Used for internal purposes only.
	 * @see com.exedio.cope.Item#Item(com.exedio.cope.ActivationParameters)
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	@SuppressWarnings("unused") private MediaItem(final com.exedio.cope.ActivationParameters ap){super(ap);}
}
