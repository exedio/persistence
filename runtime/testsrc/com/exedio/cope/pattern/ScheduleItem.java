/*
 * Copyright (C) 2004-2008  exedio GmbH (www.exedio.com)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package com.exedio.cope.pattern;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertSame;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import com.exedio.cope.Item;
import com.exedio.cope.pattern.Schedule.Run;
import com.exedio.cope.pattern.ScheduleTest.ExpectedRun;
import com.exedio.cope.pattern.ScheduleTest.Log;

public final class ScheduleItem extends Item implements Scheduleable
{
	static final Schedule report = new Schedule();
	
	private static final ArrayList<Log> logs = new ArrayList<Log>();
	
	public void run(final Schedule schedule, final Date from, final Date until) throws Exception
	{
		assertSame(this.report, schedule);
		logs.add(new Log(this, from, until));
	}
	
	void assertLogs(final List<Log> expected)
	{
		assertEquals(expected, logs);
		logs.clear();
	}
	
	void assertRuns(final List<ExpectedRun> expected)
	{
		final List<Run> actualList = report.runType.search(null, report.runType.getThis(), true);
		final ArrayList<ExpectedRun> actual = new ArrayList<ExpectedRun>();
		for(final Run run : actualList)
			actual.add(new ExpectedRun(run));
		assertEquals(expected, actual);
	}
	
	
	/**

	 **
	 * Creates a new ScheduleItem with all the fields initially needed.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tags <tt>@cope.constructor public|package|protected|private|none</tt> in the class comment and <tt>@cope.initial</tt> in the comment of fields.
	 */
	public ScheduleItem()
	{
		this(new com.exedio.cope.SetValue[]{
		});
	}/**

	 **
	 * Creates a new ScheduleItem and sets the given fields initially.
	 * This constructor is called by {@link com.exedio.cope.Type#newItem Type.newItem}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.generic.constructor public|package|protected|private|none</tt> in the class comment.
	 */
	private ScheduleItem(final com.exedio.cope.SetValue... setValues)
	{
		super(setValues);
	}/**

	 **
	 * Reactivation constructor. Used for internal purposes only.
	 * @see com.exedio.cope.Item#Item(com.exedio.cope.util.ReactivationConstructorDummy,int)
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	@SuppressWarnings("unused") private ScheduleItem(final com.exedio.cope.util.ReactivationConstructorDummy d,final int pk)
	{
		super(d,pk);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.run public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	static final int runReport()
	{
		return ScheduleItem.report.run(ScheduleItem.class);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	private static final long serialVersionUID = 1l;/**

	 **
	 * The persistent type information for scheduleItem.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.type public|package|protected|private|none</tt> in the class comment.
	 */
	public static final com.exedio.cope.Type<ScheduleItem> TYPE = newType(ScheduleItem.class)
;}
