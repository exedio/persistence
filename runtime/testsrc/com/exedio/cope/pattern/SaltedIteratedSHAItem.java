/*
 * Copyright (C) 2004-2009  exedio GmbH (www.exedio.com)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package com.exedio.cope.pattern;

import java.security.SecureRandom;
import java.util.Random;

import org.junit.Assert;

import com.exedio.cope.Item;

public class SaltedIteratedSHAItem extends Item
{
	/** @cope.set none */
	static final SaltedSHAHash password = new SaltedSHAHash().optional();
	/** @cope.set none */
	static final SaltedSHAHash passwordLatin = new SaltedSHAHash("ISO-8859-1").optional();
	/** @cope.set none */
	static final SaltedSHAHash passwordMandatory = new SaltedSHAHash();
	
	void setPassword(final String password)
	{
		set(SaltedIteratedSHAItem.password, password, 61654632);
	}
	
	void setPasswordLatin(final String password)
	{
		set(SaltedIteratedSHAItem.passwordLatin, password, 61654632);
	}
	
	void setPasswordMandatory(final String password)
	{
		set(SaltedIteratedSHAItem.passwordMandatory, password, 61654632);
	}
	
	private void set(final SaltedSHAHash hash, final String password, final long seed)
	{
		final Random newRandom = new Random(seed);
		final SecureRandom before =
			(SecureRandom)hash.setSaltSource(newRandom);
		hash.set(this, password);
		Assert.assertSame(newRandom, hash.setSaltSource(before));
	}

	/**

	 **
	 * Creates a new SaltedIteratedSHAItem with all the fields initially needed.
	 * @param passwordMandatory the initial value for field {@link #passwordMandatory}.
	 * @throws com.exedio.cope.MandatoryViolationException if passwordMandatory is null.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tags <tt>@cope.constructor public|package|protected|private|none</tt> in the class comment and <tt>@cope.initial</tt> in the comment of fields.
	 */
	SaltedIteratedSHAItem(
				final java.lang.String passwordMandatory)
			throws
				com.exedio.cope.MandatoryViolationException
	{
		this(new com.exedio.cope.SetValue[]{
			SaltedIteratedSHAItem.passwordMandatory.map(passwordMandatory),
		});
	}/**

	 **
	 * Creates a new SaltedIteratedSHAItem and sets the given fields initially.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.generic.constructor public|package|protected|private|none</tt> in the class comment.
	 */
	private SaltedIteratedSHAItem(final com.exedio.cope.SetValue<?>... setValues)
	{
		super(setValues);
	}/**

	 **
	 * Activation constructor. Used for internal purposes only.
	 * @see com.exedio.cope.Item#Item(com.exedio.cope.ActivationParameters)
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	@SuppressWarnings("unused") private SaltedIteratedSHAItem(final com.exedio.cope.ActivationParameters ap)
	{
		super(ap);
	}/**

	 **
	 * Returns whether the given value corresponds to the hash in {@link #password}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.check public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final boolean checkPassword(final java.lang.String password)
	{
		return SaltedIteratedSHAItem.password.check(this,password);
	}/**

	 **
	 * Returns the encoded hash value for hash {@link #password}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getSHA512 public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getPasswordSHA512()
	{
		return SaltedIteratedSHAItem.password.getHash(this);
	}/**

	 **
	 * Sets the encoded hash value for hash {@link #password}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.setSHA512 public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setPasswordSHA512(final java.lang.String password)
	{
		SaltedIteratedSHAItem.password.setHash(this,password);
	}/**

	 **
	 * Returns whether the given value corresponds to the hash in {@link #passwordLatin}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.check public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final boolean checkPasswordLatin(final java.lang.String passwordLatin)
	{
		return SaltedIteratedSHAItem.passwordLatin.check(this,passwordLatin);
	}/**

	 **
	 * Returns the encoded hash value for hash {@link #passwordLatin}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getSHA512 public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getPasswordLatinSHA512()
	{
		return SaltedIteratedSHAItem.passwordLatin.getHash(this);
	}/**

	 **
	 * Sets the encoded hash value for hash {@link #passwordLatin}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.setSHA512 public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setPasswordLatinSHA512(final java.lang.String passwordLatin)
	{
		SaltedIteratedSHAItem.passwordLatin.setHash(this,passwordLatin);
	}/**

	 **
	 * Returns whether the given value corresponds to the hash in {@link #passwordMandatory}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.check public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final boolean checkPasswordMandatory(final java.lang.String passwordMandatory)
	{
		return SaltedIteratedSHAItem.passwordMandatory.check(this,passwordMandatory);
	}/**

	 **
	 * Returns the encoded hash value for hash {@link #passwordMandatory}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getSHA512 public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getPasswordMandatorySHA512()
	{
		return SaltedIteratedSHAItem.passwordMandatory.getHash(this);
	}/**

	 **
	 * Sets the encoded hash value for hash {@link #passwordMandatory}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.setSHA512 public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setPasswordMandatorySHA512(final java.lang.String passwordMandatory)
			throws
				com.exedio.cope.MandatoryViolationException
	{
		SaltedIteratedSHAItem.passwordMandatory.setHash(this,passwordMandatory);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	private static final long serialVersionUID = 1l;/**

	 **
	 * The persistent type information for saltedIteratedSHAItem.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.type public|package|protected|private|none</tt> in the class comment.
	 */
	public static final com.exedio.cope.Type<SaltedIteratedSHAItem> TYPE = com.exedio.cope.TypesBound.newType(SaltedIteratedSHAItem.class)
;}
