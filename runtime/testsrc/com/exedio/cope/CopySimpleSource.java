/*
 * Copyright (C) 2004-2015  exedio GmbH (www.exedio.com)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package com.exedio.cope;

import static org.junit.Assert.assertEquals;

import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import java.util.ArrayList;
import java.util.Arrays;

final class CopySimpleSource extends Item
{
	static final ItemField<CopySimpleTarget> targetItem = ItemField.create(CopySimpleTarget.class).toFinal().optional();

	static final StringField templateString = new StringField().toFinal().optional().copyFrom(targetItem);

	static final ItemField<CopyValue> templateItem = ItemField.create(CopyValue.class).toFinal().optional().copyFrom(targetItem);


	@SuppressFBWarnings("UPM_UNCALLED_PRIVATE_METHOD") // called by reflection
	@SuppressWarnings("unused")
	private static SetValue<?>[] beforeNewCopeItem(final SetValue<?>[] setValues)
	{
		beforeNewCopeItemLog.add(setValues);
		return setValues;
	}

	static void assertBeforeNewCopeItem(final SetValue<?>... expected)
	{
		assertEquals(1, beforeNewCopeItemLog.size());
		assertEquals(Arrays.asList(expected), Arrays.asList(beforeNewCopeItemLog.get(0)));
		beforeNewCopeItemLog.clear();
	}

	static void clearBeforeNewCopeItemLog()
	{
		beforeNewCopeItemLog.clear();
	}

	private static final ArrayList<SetValue<?>[]> beforeNewCopeItemLog = new ArrayList<>();


	@Override
	public String toString()
	{
		// for testing, that CopyViolation#getMessage does not call toString(), but getCopeID()
		return "toString(" + getCopeID() + ')';
	}

	static CopySimpleSource omitCopy(final CopySimpleTarget targetItem)
	{
		return new CopySimpleSource(
			CopySimpleSource.targetItem.map(targetItem)
		);
	}

	static CopySimpleSource omitTarget(
			final String templateString,
			final CopyValue templateItem)
	{
		return new CopySimpleSource(
			CopySimpleSource.templateString.map(templateString),
			CopySimpleSource.templateItem.map(templateItem)
		);
	}

	static CopySimpleSource omitAll()
	{
		return new CopySimpleSource(new SetValue<?>[]{});
	}

	/**

	 **
	 * Creates a new CopySimpleSource with all the fields initially needed.
	 * @param targetItem the initial value for field {@link #targetItem}.
	 * @param templateString the initial value for field {@link #templateString}.
	 * @param templateItem the initial value for field {@link #templateItem}.
	 * @throws com.exedio.cope.StringLengthViolationException if templateString violates its length constraint.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tags <tt>@cope.constructor public|package|protected|private|none</tt> in the class comment and <tt>@cope.initial</tt> in the comment of fields.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	CopySimpleSource(
				@javax.annotation.Nullable final CopySimpleTarget targetItem,
				@javax.annotation.Nullable final java.lang.String templateString,
				@javax.annotation.Nullable final CopyValue templateItem)
			throws
				com.exedio.cope.StringLengthViolationException
	{
		this(new com.exedio.cope.SetValue<?>[]{
			CopySimpleSource.targetItem.map(targetItem),
			CopySimpleSource.templateString.map(templateString),
			CopySimpleSource.templateItem.map(templateItem),
		});
	}/**

	 **
	 * Creates a new CopySimpleSource and sets the given fields initially.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.generic.constructor public|package|protected|private|none</tt> in the class comment.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	private CopySimpleSource(final com.exedio.cope.SetValue<?>... setValues)
	{
		super(setValues);
	}/**

	 **
	 * Returns the value of {@link #targetItem}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	@javax.annotation.Nullable
	final CopySimpleTarget getTargetItem()
	{
		return CopySimpleSource.targetItem.get(this);
	}/**

	 **
	 * Returns the value of {@link #templateString}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	@javax.annotation.Nullable
	final java.lang.String getTemplateString()
	{
		return CopySimpleSource.templateString.get(this);
	}/**

	 **
	 * Returns the value of {@link #templateItem}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	@javax.annotation.Nullable
	final CopyValue getTemplateItem()
	{
		return CopySimpleSource.templateItem.get(this);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	private static final long serialVersionUID = 1l;/**

	 **
	 * The persistent type information for copySimpleSource.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.type public|package|protected|private|none</tt> in the class comment.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	static final com.exedio.cope.Type<CopySimpleSource> TYPE = com.exedio.cope.TypesBound.newType(CopySimpleSource.class);/**

	 **
	 * Activation constructor. Used for internal purposes only.
	 * @see com.exedio.cope.Item#Item(com.exedio.cope.ActivationParameters)
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	@SuppressWarnings("unused") private CopySimpleSource(final com.exedio.cope.ActivationParameters ap){super(ap);
}}
