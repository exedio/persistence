/*
 * Copyright (C) 2004-2015  exedio GmbH (www.exedio.com)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package com.exedio.cope;

import static com.exedio.cope.DatePrecisionConditionTest.date;
import static com.exedio.cope.DatePrecisionDefaultToNowTest.AnItem.TYPE;
import static com.exedio.cope.DatePrecisionDefaultToNowTest.AnItem.down;
import static com.exedio.cope.DatePrecisionDefaultToNowTest.AnItem.up;
import static org.junit.Assert.assertEquals;

import com.exedio.cope.DateField.RoundingMode;
import com.exedio.cope.junit.AbsoluteMockClockStrategy;
import com.exedio.cope.tojunit.ClockRule;
import java.util.Date;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.RuleChain;

public class DatePrecisionDefaultToNowTest extends TestWithEnvironment
{
	private final AbsoluteMockClockStrategy clock = new AbsoluteMockClockStrategy();
	private final ClockRule clockRule = new ClockRule();

	@Rule public final RuleChain ruleChain = RuleChain.outerRule(clockRule);

	private static final Model MODEL = new Model(TYPE);

	public DatePrecisionDefaultToNowTest()
	{
		super(MODEL);
	}

	@Test public void testRound()
	{
		assertEquals(true, down.hasDefault());
		assertEquals(true, up  .hasDefault());
		assertEquals(true, down.isDefaultNow());
		assertEquals(true, up  .isDefaultNow());
		assertEquals(RoundingMode.PAST  , down.isDefaultNowRoundingMode());
		assertEquals(RoundingMode.FUTURE, up  .isDefaultNowRoundingMode());
		assertEquals(null, down.getDefaultConstant());
		assertEquals(null, up  .getDefaultConstant());

		clockRule.override(clock);
		clock.add(date(11, 22, 44, 55, 66));
		final AnItem item = new AnItem();
		clock.assertEmpty();

		assertEquals(date(11, 22, 44, 0, 0), item.getDown());
		assertEquals(date(11, 22, 45, 0, 0), item.getUp  ());
	}

	@Test public void testNoRound()
	{
		clockRule.override(clock);
		clock.add(date(11, 22, 44, 0, 0));
		final AnItem item = new AnItem();
		clock.assertEmpty();

		assertEquals(date(11, 22, 44, 0, 0), item.getDown());
		assertEquals(date(11, 22, 44, 0, 0), item.getUp  ());
	}

	@Test public void testTouch()
	{
		final AnItem item = new AnItem(date(9, 9, 9, 0, 0), date(9, 9, 9, 0, 0));
		clockRule.override(clock);
		clock.add(date(11, 22, 44, 55, 66));
		item.touchDown();
		clock.assertEmpty();

		assertEquals(date(11, 22, 44, 0, 0), item.getDown());
	}

	static final class AnItem extends Item
	{
		static final DateField down = new DateField().defaultToNow(RoundingMode.PAST  ).minutes();
		static final DateField up   = new DateField().defaultToNow(RoundingMode.FUTURE).minutes();

		AnItem(final Date down, final Date up)
		{
			this(
					AnItem.down.map(down),
					AnItem.up.map(up));
		}


	/**

	 **
	 * Creates a new AnItem with all the fields initially needed.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tags <tt>@cope.constructor public|package|protected|private|none</tt> in the class comment and <tt>@cope.initial</tt> in the comment of fields.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	AnItem()
	{
		this(new com.exedio.cope.SetValue<?>[]{
		});
	}/**

	 **
	 * Creates a new AnItem and sets the given fields initially.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.generic.constructor public|package|protected|private|none</tt> in the class comment.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	private AnItem(final com.exedio.cope.SetValue<?>... setValues)
	{
		super(setValues);
	}/**

	 **
	 * Returns the value of {@link #down}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final java.util.Date getDown()
	{
		return AnItem.down.get(this);
	}/**

	 **
	 * Sets a new value for {@link #down}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final void setDown(final java.util.Date down)
			throws
				com.exedio.cope.MandatoryViolationException
	{
		AnItem.down.set(this,down);
	}/**

	 **
	 * Sets a new value for {@link #down}, but rounds it before according to precision of field.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.setAndRoundDown public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final void setDownAndRoundDown(final java.util.Date down)
			throws
				com.exedio.cope.MandatoryViolationException
	{
		AnItem.down.setAndRoundDown(this,down);
	}/**

	 **
	 * Sets a new value for {@link #down}, but rounds it before according to precision of field.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.setAndRoundUp public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final void setDownAndRoundUp(final java.util.Date down)
			throws
				com.exedio.cope.MandatoryViolationException
	{
		AnItem.down.setAndRoundUp(this,down);
	}/**

	 **
	 * Sets the current date for the date field {@link #down}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.touch public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final void touchDown()
	{
		AnItem.down.touch(this);
	}/**

	 **
	 * Returns the value of {@link #up}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final java.util.Date getUp()
	{
		return AnItem.up.get(this);
	}/**

	 **
	 * Sets a new value for {@link #up}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final void setUp(final java.util.Date up)
			throws
				com.exedio.cope.MandatoryViolationException
	{
		AnItem.up.set(this,up);
	}/**

	 **
	 * Sets a new value for {@link #up}, but rounds it before according to precision of field.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.setAndRoundDown public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final void setUpAndRoundDown(final java.util.Date up)
			throws
				com.exedio.cope.MandatoryViolationException
	{
		AnItem.up.setAndRoundDown(this,up);
	}/**

	 **
	 * Sets a new value for {@link #up}, but rounds it before according to precision of field.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.setAndRoundUp public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final void setUpAndRoundUp(final java.util.Date up)
			throws
				com.exedio.cope.MandatoryViolationException
	{
		AnItem.up.setAndRoundUp(this,up);
	}/**

	 **
	 * Sets the current date for the date field {@link #up}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.touch public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final void touchUp()
	{
		AnItem.up.touch(this);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	private static final long serialVersionUID = 1l;/**

	 **
	 * The persistent type information for anItem.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.type public|package|protected|private|none</tt> in the class comment.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	static final com.exedio.cope.Type<AnItem> TYPE = com.exedio.cope.TypesBound.newType(AnItem.class);/**

	 **
	 * Activation constructor. Used for internal purposes only.
	 * @see com.exedio.cope.Item#Item(com.exedio.cope.ActivationParameters)
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	@SuppressWarnings("unused") private AnItem(final com.exedio.cope.ActivationParameters ap){super(ap);
}}
}
