/*
 * Copyright (C) 2004-2015  exedio GmbH (www.exedio.com)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package com.exedio.cope.reflect;

import static com.exedio.cope.instrument.Visibility.NONE;

import com.exedio.cope.CopeSchemaName;
import com.exedio.cope.Item;
import com.exedio.cope.SetValue;
import com.exedio.cope.Type;
import com.exedio.cope.instrument.WrapperType;

@WrapperType(constructor=NONE)
public final class TypeFieldItem extends Item
{
	static final TypeField<Item> standard = TypeField.create();
	static final TypeField<Item> isFinal  = TypeField.create().toFinal();
	static final TypeField<Item> optional = TypeField.create().optional();
	static final TypeField<Item> unique   = TypeField.create().optional().unique();
	@CopeSchemaName("newname")
	static final TypeField<Item> renamed = TypeField.create().optional();
	static final TypeField<TypeFieldSubItem> restricted = TypeField.create(TypeFieldSubItem.class).optional();

	// TODO generate by instrumentor
	TypeFieldItem(
				final Type<? extends Item> standard,
				final Type<? extends Item> isFinal)
	{
		this(new SetValue<?>[]{
			TypeFieldItem.standard.map(standard),
			TypeFieldItem.isFinal.map(isFinal),
		});
	}

	/**

	 **
	 * Creates a new TypeFieldItem and sets the given fields initially.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.generic.constructor public|package|protected|private|none</tt> in the class comment.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	private TypeFieldItem(final com.exedio.cope.SetValue<?>... setValues)
	{
		super(setValues);
	}/**

	 **
	 * Returns the value of {@link #standard}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	@javax.annotation.Nonnull
	final com.exedio.cope.Type<? extends Item> getStandard()
	{
		return TypeFieldItem.standard.get(this);
	}/**

	 **
	 * Sets a new value for {@link #standard}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final void setStandard(@javax.annotation.Nonnull final com.exedio.cope.Type<? extends Item> standard)
			throws
				com.exedio.cope.MandatoryViolationException,
				com.exedio.cope.StringLengthViolationException
	{
		TypeFieldItem.standard.set(this,standard);
	}/**

	 **
	 * Returns the value of {@link #isFinal}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	@javax.annotation.Nonnull
	final com.exedio.cope.Type<? extends Item> getIsFinal()
	{
		return TypeFieldItem.isFinal.get(this);
	}/**

	 **
	 * Returns the value of {@link #optional}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	@javax.annotation.Nullable
	final com.exedio.cope.Type<? extends Item> getOptional()
	{
		return TypeFieldItem.optional.get(this);
	}/**

	 **
	 * Sets a new value for {@link #optional}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final void setOptional(@javax.annotation.Nullable final com.exedio.cope.Type<? extends Item> optional)
			throws
				com.exedio.cope.StringLengthViolationException
	{
		TypeFieldItem.optional.set(this,optional);
	}/**

	 **
	 * Returns the value of {@link #unique}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	@javax.annotation.Nullable
	final com.exedio.cope.Type<? extends Item> getUnique()
	{
		return TypeFieldItem.unique.get(this);
	}/**

	 **
	 * Sets a new value for {@link #unique}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final void setUnique(@javax.annotation.Nullable final com.exedio.cope.Type<? extends Item> unique)
			throws
				com.exedio.cope.UniqueViolationException,
				com.exedio.cope.StringLengthViolationException
	{
		TypeFieldItem.unique.set(this,unique);
	}/**

	 **
	 * Finds a typeFieldItem by it's {@link #unique}.
	 * @param unique shall be equal to field {@link #unique}.
	 * @return null if there is no matching item.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.for public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	@javax.annotation.Nullable
	static final TypeFieldItem forUnique(@javax.annotation.Nonnull final com.exedio.cope.Type<? extends Item> unique)
	{
		return TypeFieldItem.unique.searchUnique(TypeFieldItem.class,unique);
	}/**

	 **
	 * Returns the value of {@link #renamed}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	@javax.annotation.Nullable
	final com.exedio.cope.Type<? extends Item> getRenamed()
	{
		return TypeFieldItem.renamed.get(this);
	}/**

	 **
	 * Sets a new value for {@link #renamed}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final void setRenamed(@javax.annotation.Nullable final com.exedio.cope.Type<? extends Item> renamed)
			throws
				com.exedio.cope.StringLengthViolationException
	{
		TypeFieldItem.renamed.set(this,renamed);
	}/**

	 **
	 * Returns the value of {@link #restricted}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	@javax.annotation.Nullable
	final com.exedio.cope.Type<? extends TypeFieldSubItem> getRestricted()
	{
		return TypeFieldItem.restricted.get(this);
	}/**

	 **
	 * Sets a new value for {@link #restricted}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final void setRestricted(@javax.annotation.Nullable final com.exedio.cope.Type<? extends TypeFieldSubItem> restricted)
			throws
				com.exedio.cope.StringLengthViolationException
	{
		TypeFieldItem.restricted.set(this,restricted);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	private static final long serialVersionUID = 1l;/**

	 **
	 * The persistent type information for typeFieldItem.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.type public|package|protected|private|none</tt> in the class comment.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	public static final com.exedio.cope.Type<TypeFieldItem> TYPE = com.exedio.cope.TypesBound.newType(TypeFieldItem.class);/**

	 **
	 * Activation constructor. Used for internal purposes only.
	 * @see com.exedio.cope.Item#Item(com.exedio.cope.ActivationParameters)
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	@SuppressWarnings("unused") private TypeFieldItem(final com.exedio.cope.ActivationParameters ap){super(ap);
}}
