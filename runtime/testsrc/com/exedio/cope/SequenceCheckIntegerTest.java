/*
 * Copyright (C) 2004-2015  exedio GmbH (www.exedio.com)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package com.exedio.cope;

import static com.exedio.cope.SequenceCheckIntegerTest.AnItem.TYPE;
import static com.exedio.cope.SequenceCheckIntegerTest.AnItem.next;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertSame;

import org.junit.Test;

public class SequenceCheckIntegerTest extends TestWithEnvironment
{
	/**
	 * Do not use this model in any other test.
	 * Otherwise problems may be hidden, because
	 * model has been connected before.
	 */
	private static final Model MODEL = new Model(TYPE);

	public SequenceCheckIntegerTest()
	{
		super(MODEL);
		copeRule.omitTransaction();
	}

	@Test public void testWrongFromStart()
	{
		assertIt(0, null, postgresql?1:0); // known problem in PostgreSQL, see PostgresqlDialect#getNextSequence

		newManual(5, "first");
		assertIt(!postgresql?6:5, 5, !postgresql?0:1); // known problem in PostgreSQL, see PostgresqlDialect#getNextSequence

		newSequence(0, "second");
		assertIt(5, 5, 1);

		newSequence(1, "third");
		assertIt(4, 5, 2);

		newSequence(2, "fourth");
		assertIt(3, 5, 3);
	}

	@Test public void testWrongFromStartWithoutCheck()
	{
		newManual(5, "first");
		assertIt(!postgresql?6:5, 5, !postgresql?0:1); // known problem in PostgreSQL, see PostgresqlDialect#getNextSequence

		newSequence(0, "second");
		assertIt(5, 5, 1);

		newSequence(1, "third");
		assertIt(4, 5, 2);

		newSequence(2, "fourth");
		assertIt(3, 5, 3);
	}

	@Test public void testWrongLater()
	{
		assertIt(0, null, !postgresql?0:1); // known problem in PostgreSQL, see PostgresqlDialect#getNextSequence

		newSequence(0, "ok0");
		assertIt(0, 0, 1);

		newSequence(1, "ok1");
		assertIt(0, 1, 2);

		newManual(5, "first");
		assertIt(4, 5, 2);

		newSequence(2, "second");
		assertIt(3, 5, 3);

		newSequence(3, "third");
		assertIt(2, 5, 4);

		newSequence(4, "fourth");
		assertIt(1, 5, 5);
	}

	private static void assertIt(
			final int check,
			final Integer featureMaximum,
			final int sequenceNext)
	{
		final SequenceBehindException e = next.checkBehindDefaultToNext();
		assertEquals(
				"sequence behind maximum of AnItem.next: " + featureMaximum + ">=" + sequenceNext,
				e.getMessage());
		assertSame  ("feature", next, e.feature);
		assertEquals("featureMaximum", featureMaximum, e.featureMaximum);
		assertEquals("sequenceNext", sequenceNext, e.sequenceNext);

		@SuppressWarnings("deprecation")
		final int error = next.checkDefaultToNext();
		assertEquals("check", check, error);
	}

	private static final AnItem newManual(
			final int next,
			final String field)
	{
		try(TransactionTry tx = MODEL.startTransactionTry(SequenceCheckIntegerTest.class.getName()))
		{
			return tx.commit(
					new AnItem(field, next)
			);
		}
	}

	private static final void newSequence(
			final int next,
			final String field)
	{
		try(TransactionTry tx = MODEL.startTransactionTry(SequenceCheckIntegerTest.class.getName()))
		{
			assertEquals("next", next,
				tx.commit(
					new AnItem(field).getNext().intValue())
			);
		}
	}

	static final class AnItem extends Item
	{
		static final IntegerField next = new IntegerField().toFinal().optional().defaultToNext(0);
		static final StringField field = new StringField().toFinal().optional();

		AnItem(
				final String field,
				final int next)
		{
			this(new com.exedio.cope.SetValue<?>[]{
				AnItem.next.map(next),
				AnItem.field.map(field),
			});
		}

		/**

	 **
	 * Creates a new AnItem with all the fields initially needed.
	 * @param field the initial value for field {@link #field}.
	 * @throws com.exedio.cope.StringLengthViolationException if field violates its length constraint.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tags <tt>@cope.constructor public|package|protected|private|none</tt> in the class comment and <tt>@cope.initial</tt> in the comment of fields.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	AnItem(
				final java.lang.String field)
			throws
				com.exedio.cope.StringLengthViolationException
	{
		this(new com.exedio.cope.SetValue<?>[]{
			AnItem.field.map(field),
		});
	}/**

	 **
	 * Creates a new AnItem and sets the given fields initially.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.generic.constructor public|package|protected|private|none</tt> in the class comment.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	private AnItem(final com.exedio.cope.SetValue<?>... setValues)
	{
		super(setValues);
	}/**

	 **
	 * Returns the value of {@link #next}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final java.lang.Integer getNext()
	{
		return AnItem.next.get(this);
	}/**

	 **
	 * Returns the value of {@link #field}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final java.lang.String getField()
	{
		return AnItem.field.get(this);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	private static final long serialVersionUID = 1l;/**

	 **
	 * The persistent type information for anItem.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.type public|package|protected|private|none</tt> in the class comment.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	static final com.exedio.cope.Type<AnItem> TYPE = com.exedio.cope.TypesBound.newType(AnItem.class);/**

	 **
	 * Activation constructor. Used for internal purposes only.
	 * @see com.exedio.cope.Item#Item(com.exedio.cope.ActivationParameters)
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	@SuppressWarnings("unused") private AnItem(final com.exedio.cope.ActivationParameters ap){super(ap);
}}
}
