/*
 * Copyright (C) 2004-2012  exedio GmbH (www.exedio.com)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package com.exedio.cope.junit;

import com.exedio.cope.IntegerField;
import com.exedio.cope.Item;
import com.exedio.cope.Sequence;

/**
 * @cope.constructor private
 */
final class JUnitTestItem extends Item
{
	static final IntegerField code = new IntegerField();
	static final IntegerField next = new IntegerField().defaultToNext(1000);
	static final Sequence sequence = new Sequence(2000);

	/**
	 * @cope.initial
	 * @cope.get package
	 * @cope.set none
	 */
	private static final IntegerField nextUnused = new IntegerField().defaultToNext(10000);

	/**
	 * @cope.next none
	 */
	@SuppressWarnings("unused")
	private static final Sequence sequenceUnused = new Sequence(20000);


	JUnitTestItem(final int code)
	{
		this(code, -10);
	}


	/**

	 **
	 * Creates a new JUnitTestItem with all the fields initially needed.
	 * @param code the initial value for field {@link #code}.
	 * @param nextUnused the initial value for field {@link #nextUnused}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tags <tt>@cope.constructor public|package|protected|private|none</tt> in the class comment and <tt>@cope.initial</tt> in the comment of fields.
	 */
	private JUnitTestItem(
				final int code,
				final int nextUnused)
	{
		this(new com.exedio.cope.SetValue<?>[]{
			JUnitTestItem.code.map(code),
			JUnitTestItem.nextUnused.map(nextUnused),
		});
	}/**

	 **
	 * Creates a new JUnitTestItem and sets the given fields initially.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.generic.constructor public|package|protected|private|none</tt> in the class comment.
	 */
	private JUnitTestItem(final com.exedio.cope.SetValue<?>... setValues)
	{
		super(setValues);
	}/**

	 **
	 * Returns the value of {@link #code}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final int getCode()
	{
		return JUnitTestItem.code.getMandatory(this);
	}/**

	 **
	 * Sets a new value for {@link #code}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setCode(final int code)
	{
		JUnitTestItem.code.set(this,code);
	}/**

	 **
	 * Returns the value of {@link #next}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final int getNext()
	{
		return JUnitTestItem.next.getMandatory(this);
	}/**

	 **
	 * Sets a new value for {@link #next}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setNext(final int next)
	{
		JUnitTestItem.next.set(this,next);
	}/**

	 **
	 * Generates a new sequence number.
	 * The result is not managed by a {@link com.exedio.cope.Transaction}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.next public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	static final int nextSequence()
	{
		return JUnitTestItem.sequence.next();
	}/**

	 **
	 * Returns the value of {@link #nextUnused}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final int getNextUnused()
	{
		return JUnitTestItem.nextUnused.getMandatory(this);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	private static final long serialVersionUID = 1l;/**

	 **
	 * The persistent type information for jUnitTestItem.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.type public|package|protected|private|none</tt> in the class comment.
	 */
	static final com.exedio.cope.Type<JUnitTestItem> TYPE = com.exedio.cope.TypesBound.newType(JUnitTestItem.class);/**

	 **
	 * Activation constructor. Used for internal purposes only.
	 * @see com.exedio.cope.Item#Item(com.exedio.cope.ActivationParameters)
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	@SuppressWarnings("unused") private JUnitTestItem(final com.exedio.cope.ActivationParameters ap){super(ap);
}}
