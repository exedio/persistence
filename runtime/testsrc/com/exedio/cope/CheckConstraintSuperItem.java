/*
 * Copyright (C) 2004-2012  exedio GmbH (www.exedio.com)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package com.exedio.cope;

public class CheckConstraintSuperItem extends Item
{
	/** @cope.initial */
	public static final IntegerField eins = new IntegerField().optional();

	/** @cope.initial */
	public static final IntegerField zwei = new IntegerField().optional();

	/** @cope.initial */
	public static final IntegerField drei = new IntegerField().optional();

	public static final CheckConstraint einsGreaterOrEqualZwei = new CheckConstraint(eins.greaterOrEqual(zwei));

	void setEinsZwei(final Integer eins, final Integer zwei)
	{
		set(
			CheckConstraintSuperItem.eins.map(eins),
			CheckConstraintSuperItem.zwei.map(zwei));
	}

	void setZweiDrei(final Integer zwei, final Integer drei)
	{
		set(
			CheckConstraintSuperItem.zwei.map(zwei),
			CheckConstraintSuperItem.drei.map(drei));
	}


	/**

	 **
	 * Creates a new CheckConstraintSuperItem with all the fields initially needed.
	 * @param eins the initial value for field {@link #eins}.
	 * @param zwei the initial value for field {@link #zwei}.
	 * @param drei the initial value for field {@link #drei}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tags <tt>@cope.constructor public|package|protected|private|none</tt> in the class comment and <tt>@cope.initial</tt> in the comment of fields.
	 */
	public CheckConstraintSuperItem(
				final java.lang.Integer eins,
				final java.lang.Integer zwei,
				final java.lang.Integer drei)
	{
		this(new com.exedio.cope.SetValue[]{
			CheckConstraintSuperItem.eins.map(eins),
			CheckConstraintSuperItem.zwei.map(zwei),
			CheckConstraintSuperItem.drei.map(drei),
		});
	}/**

	 **
	 * Creates a new CheckConstraintSuperItem and sets the given fields initially.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.generic.constructor public|package|protected|private|none</tt> in the class comment.
	 */
	protected CheckConstraintSuperItem(final com.exedio.cope.SetValue<?>... setValues)
	{
		super(setValues);
	}/**

	 **
	 * Returns the value of {@link #eins}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	public final java.lang.Integer getEins()
	{
		return CheckConstraintSuperItem.eins.get(this);
	}/**

	 **
	 * Sets a new value for {@link #eins}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	public final void setEins(final java.lang.Integer eins)
	{
		CheckConstraintSuperItem.eins.set(this,eins);
	}/**

	 **
	 * Returns the value of {@link #zwei}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	public final java.lang.Integer getZwei()
	{
		return CheckConstraintSuperItem.zwei.get(this);
	}/**

	 **
	 * Sets a new value for {@link #zwei}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	public final void setZwei(final java.lang.Integer zwei)
	{
		CheckConstraintSuperItem.zwei.set(this,zwei);
	}/**

	 **
	 * Returns the value of {@link #drei}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	public final java.lang.Integer getDrei()
	{
		return CheckConstraintSuperItem.drei.get(this);
	}/**

	 **
	 * Sets a new value for {@link #drei}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	public final void setDrei(final java.lang.Integer drei)
	{
		CheckConstraintSuperItem.drei.set(this,drei);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	private static final long serialVersionUID = 1l;/**

	 **
	 * The persistent type information for checkConstraintSuperItem.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.type public|package|protected|private|none</tt> in the class comment.
	 */
	public static final com.exedio.cope.Type<CheckConstraintSuperItem> TYPE = com.exedio.cope.TypesBound.newType(CheckConstraintSuperItem.class);/**

	 **
	 * Activation constructor. Used for internal purposes only.
	 * @see com.exedio.cope.Item#Item(com.exedio.cope.ActivationParameters)
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	protected CheckConstraintSuperItem(final com.exedio.cope.ActivationParameters ap){super(ap);
}}
