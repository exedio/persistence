/*
 * Copyright (C) 2004-2015  exedio GmbH (www.exedio.com)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package com.exedio.cope;

import static com.exedio.cope.GroupByTest.AnItem.TYPE;
import static com.exedio.cope.GroupByTest.AnItem.finalString;
import static com.exedio.cope.GroupByTest.AnItem.nonFinalInteger;
import static org.junit.Assert.assertEquals;

import java.util.List;
import org.junit.Before;
import org.junit.Test;

public class GroupByTest extends TestWithEnvironment
{
	private static final Model MODEL = new Model(TYPE);

	public GroupByTest()
	{
		super(MODEL);
	}

	@SuppressWarnings("static-method")
	@Before public final void setUp()
	{
		new AnItem("foo", 1);
		new AnItem("foo", 2);
		new AnItem("foo", 3);
		new AnItem("bar", 4);
		new AnItem("bar", 5);
		new AnItem("goo", 6);
		new AnItem("car", 7);
		new AnItem("car", 8);
	}

	@Test public void testSimpleCount()
	{
		final Query<AnItem> items = TYPE.newQuery();
		assertCount(items, 8, 8);
	}

	@Test public void testSimpleCountWithLimit()
	{
		final Query<AnItem> items = TYPE.newQuery();
		items.setLimit(0, 3);
		assertCount(items, 3, 8);
	}

	@Test public void testGroupByCount()
	{
		final Selectable<?>[] selection = new Selectable<?>[]{finalString, nonFinalInteger.min()};
		final Query<List<Object>> items = Query.newQuery(selection, TYPE, null);
		items.setGroupBy(finalString);
		assertCount(items, 4, 4);
	}

	@Test public void testGroupByCountWithLimit()
	{
		final Selectable<?>[] selection = new Selectable<?>[]{finalString, nonFinalInteger.min()};
		final Query<List<Object>> items = Query.newQuery(selection, TYPE, null);
		items.setGroupBy(finalString);
		items.setLimit(0, 3);
		assertCount(items, 3, 4);
	}

	private static void assertCount(final Query<?> items, final int expectedSize, final int expectedTotal)
	{
		assertEquals(expectedSize, items.search().size());
		assertEquals(expectedTotal, items.total());
	}

	static final class AnItem extends Item
	{
		static final StringField finalString = new StringField().toFinal();
		static final IntegerField nonFinalInteger = new IntegerField();

	/**

	 **
	 * Creates a new AnItem with all the fields initially needed.
	 * @param finalString the initial value for field {@link #finalString}.
	 * @param nonFinalInteger the initial value for field {@link #nonFinalInteger}.
	 * @throws com.exedio.cope.MandatoryViolationException if finalString is null.
	 * @throws com.exedio.cope.StringLengthViolationException if finalString violates its length constraint.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tags <tt>@cope.constructor public|package|protected|private|none</tt> in the class comment and <tt>@cope.initial</tt> in the comment of fields.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	AnItem(
				final java.lang.String finalString,
				final int nonFinalInteger)
			throws
				com.exedio.cope.MandatoryViolationException,
				com.exedio.cope.StringLengthViolationException
	{
		this(new com.exedio.cope.SetValue<?>[]{
			AnItem.finalString.map(finalString),
			AnItem.nonFinalInteger.map(nonFinalInteger),
		});
	}/**

	 **
	 * Creates a new AnItem and sets the given fields initially.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.generic.constructor public|package|protected|private|none</tt> in the class comment.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	private AnItem(final com.exedio.cope.SetValue<?>... setValues)
	{
		super(setValues);
	}/**

	 **
	 * Returns the value of {@link #finalString}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final java.lang.String getFinalString()
	{
		return AnItem.finalString.get(this);
	}/**

	 **
	 * Returns the value of {@link #nonFinalInteger}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final int getNonFinalInteger()
	{
		return AnItem.nonFinalInteger.getMandatory(this);
	}/**

	 **
	 * Sets a new value for {@link #nonFinalInteger}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final void setNonFinalInteger(final int nonFinalInteger)
	{
		AnItem.nonFinalInteger.set(this,nonFinalInteger);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	private static final long serialVersionUID = 1l;/**

	 **
	 * The persistent type information for anItem.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.type public|package|protected|private|none</tt> in the class comment.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	static final com.exedio.cope.Type<AnItem> TYPE = com.exedio.cope.TypesBound.newType(AnItem.class);/**

	 **
	 * Activation constructor. Used for internal purposes only.
	 * @see com.exedio.cope.Item#Item(com.exedio.cope.ActivationParameters)
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	@SuppressWarnings("unused") private AnItem(final com.exedio.cope.ActivationParameters ap){super(ap);
}}
}
