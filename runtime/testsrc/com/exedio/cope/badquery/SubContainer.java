/*
 * Copyright (C) 2004-2006  exedio GmbH (www.exedio.com)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package com.exedio.cope.badquery;

import com.exedio.cope.BooleanField;
import com.exedio.cope.ItemField;

public class SubContainer extends SuperContainer
{
	public static final ItemField<SuperContainer> superContainer = newItemField(FINAL, SuperContainer.class);
	public static final BooleanField subflag = new BooleanField(OPTIONAL).defaultTo(Boolean.FALSE);
	
	/**

	 **
	 * Creates a new SubContainer with all the attributes initially needed.
	 * @param code the initial value for attribute {@link #code}.
	 * @param queryItem the initial value for attribute {@link #queryItem}.
	 * @param superflag the initial value for attribute {@link #superflag}.
	 * @param superContainer the initial value for attribute {@link #superContainer}.
	 * @throws com.exedio.cope.LengthViolationException if code violates its length constraint.
	 * @throws com.exedio.cope.MandatoryViolationException if code, queryItem, superContainer is null.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tags <tt>@cope.constructor public|package|protected|private|none</tt> in the class comment and <tt>@cope.initial</tt> in the comment of attributes.
	 */
	public SubContainer(
				final java.lang.String code,
				final QueryItem queryItem,
				final boolean superflag,
				final SuperContainer superContainer)
			throws
				com.exedio.cope.LengthViolationException,
				com.exedio.cope.MandatoryViolationException
	{
		this(new com.exedio.cope.SetValue[]{
			SubContainer.code.map(code),
			SubContainer.queryItem.map(queryItem),
			SubContainer.superflag.map(superflag),
			SubContainer.superContainer.map(superContainer),
		});
	}/**

	 **
	 * Creates a new SubContainer and sets the given attributes initially.
	 * This constructor is called by {@link com.exedio.cope.Type#newItem Type.newItem}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.generic.constructor public|package|protected|private|none</tt> in the class comment.
	 */
	private SubContainer(final com.exedio.cope.SetValue[] setValues)
	{
		super(setValues);
	}/**

	 **
	 * Reactivation constructor. Used for internal purposes only.
	 * @see com.exedio.cope.Item#Item(com.exedio.cope.util.ReactivationConstructorDummy,int)
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	private SubContainer(com.exedio.cope.util.ReactivationConstructorDummy d,final int pk)
	{
		super(d,pk);
	}/**

	 **
	 * Returns the value of the persistent attribute {@link #superContainer}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getter public|package|protected|private|none|non-final|boolean-as-is</tt> in the comment of the attribute.
	 */
	public final SuperContainer getSuperContainer()
	{
		return SubContainer.superContainer.get(this);
	}/**

	 **
	 * Returns the value of the persistent attribute {@link #subflag}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getter public|package|protected|private|none|non-final|boolean-as-is</tt> in the comment of the attribute.
	 */
	public final java.lang.Boolean getSubflag()
	{
		return SubContainer.subflag.get(this);
	}/**

	 **
	 * Sets a new value for the persistent attribute {@link #subflag}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.setter public|package|protected|private|none|non-final</tt> in the comment of the attribute.
	 */
	public final void setSubflag(final java.lang.Boolean subflag)
	{
		SubContainer.subflag.set(this,subflag);
	}/**

	 **
	 * The persistent type information for subContainer.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.type public|package|protected|private|none</tt> in the class comment.
	 */
	public static final com.exedio.cope.Type<SubContainer> TYPE = newType(SubContainer.class)
;}
