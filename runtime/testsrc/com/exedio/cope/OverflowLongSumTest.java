/*
 * Copyright (C) 2004-2015  exedio GmbH (www.exedio.com)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package com.exedio.cope;

import static com.exedio.cope.OverflowLongSumTest.AnItem.TYPE;
import static com.exedio.cope.OverflowLongSumTest.AnItem.field;
import static com.exedio.cope.SchemaInfo.getColumnName;
import static com.exedio.cope.SchemaInfo.getTableName;
import static com.exedio.cope.SchemaInfo.newConnection;
import static com.exedio.cope.SchemaInfo.quoteName;
import static java.lang.Long.MAX_VALUE;
import static java.lang.Long.MIN_VALUE;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import org.junit.Test;

public class OverflowLongSumTest extends TestWithEnvironment
{
	static final Model MODEL = new Model(TYPE);

	public OverflowLongSumTest()
	{
		super(MODEL);
	}

	private static final Query<Long> query = new Query<>(field.sum());

	@Test public void testIt() throws SQLException
	{
		assertEquals(null, query.searchSingleton());

		new AnItem(42);
		assertIt(42);

		new AnItem(MAX_VALUE - 42);
		assertIt(MAX_VALUE);

		new AnItem(1);
		assertIt(MAX_VALUE, 1, MIN_VALUE);

		new AnItem(5);
		assertIt(MAX_VALUE, 6, MIN_VALUE + 5);
	}

	private void assertIt(final long expected) throws SQLException
	{
		assertIt(BigDecimal.valueOf(expected), expected);
	}

	private void assertIt(final long expected1, final long expected2, final long expectedSum) throws SQLException
	{
		assertIt(BigDecimal.valueOf(expected1).add(BigDecimal.valueOf(expected2)), expectedSum);
	}

	@SuppressFBWarnings("SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE")
	private void assertIt(final BigDecimal expected, final long expectedSum) throws SQLException
	{
		MODEL.commit();

		long expectedLong = MIN_VALUE;
		boolean expectedIsLong = false;
		try
		{
			expectedLong = expected.longValueExact();
			expectedIsLong = true;
		}
		catch(final ArithmeticException e)
		{
			// ok
		}

		try(
			Connection c = newConnection(MODEL);
			Statement st = c.createStatement();
			ResultSet rs = st.executeQuery(
				"SELECT SUM(" + quoteName(MODEL, getColumnName(field)) + ") " +
				"FROM " + quoteName(MODEL, getTableName(TYPE))))
		{
			assertTrue(rs.next());

			if(expectedIsLong)
			{
				assertEquals(expectedLong, rs.getLong(1));
			}
			else
			{
				if(mysql)
				{
					assertEquals(MAX_VALUE, rs.getLong(1)); // nasty driver
				}
				else
				{
					try
					{
						rs.getLong(1);
						fail();
					}
					catch(final SQLException e)
					{
						//System.out.println(e.getMessage());
					}
				}
			}

			assertEquals(expected, rs.getObject(1));
		}

		MODEL.startTransaction(OverflowLongSumTest.class.getName());

		assertEquals(expectedSum, query.searchSingleton().longValue()); // TODO should fail if too large
	}


	static final class AnItem extends Item
	{
		static final LongField field = new LongField().toFinal();

	/**

	 **
	 * Creates a new AnItem with all the fields initially needed.
	 * @param field the initial value for field {@link #field}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tags <tt>@cope.constructor public|package|protected|private|none</tt> in the class comment and <tt>@cope.initial</tt> in the comment of fields.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	AnItem(
				final long field)
	{
		this(new com.exedio.cope.SetValue<?>[]{
			AnItem.field.map(field),
		});
	}/**

	 **
	 * Creates a new AnItem and sets the given fields initially.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.generic.constructor public|package|protected|private|none</tt> in the class comment.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	private AnItem(final com.exedio.cope.SetValue<?>... setValues)
	{
		super(setValues);
	}/**

	 **
	 * Returns the value of {@link #field}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final long getField()
	{
		return AnItem.field.getMandatory(this);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	private static final long serialVersionUID = 1l;/**

	 **
	 * The persistent type information for anItem.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.type public|package|protected|private|none</tt> in the class comment.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	static final com.exedio.cope.Type<AnItem> TYPE = com.exedio.cope.TypesBound.newType(AnItem.class);/**

	 **
	 * Activation constructor. Used for internal purposes only.
	 * @see com.exedio.cope.Item#Item(com.exedio.cope.ActivationParameters)
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	@SuppressWarnings("unused") private AnItem(final com.exedio.cope.ActivationParameters ap){super(ap);
}}

}
