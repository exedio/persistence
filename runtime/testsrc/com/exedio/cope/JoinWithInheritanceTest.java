/*
 * Copyright (C) 2004-2015  exedio GmbH (www.exedio.com)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package com.exedio.cope;

import static java.util.Arrays.asList;

import com.exedio.cope.pattern.ListField;
import org.junit.Test;

public class JoinWithInheritanceTest extends AbstractRuntimeModelTest
{
	static final Model MODEL = new Model(ArticleContainer.TYPE,
			Article.TYPE,
			SpecificArticle.TYPE,
			ReallySpecificArticle.TYPE);

	static
	{
		MODEL.enableSerialization(JoinWithInheritanceTest.class, "MODEL");
	}

	public JoinWithInheritanceTest()
	{
		super(MODEL);
	}

	@Test
	public void testCorrectSubtypeOfJoinWillBeUsed()
	{
		final ArticleContainer productSuite = new ArticleContainer();
		productSuite.addToArticles(new SpecificArticle());

		final Query<ArticleContainer> query = ArticleContainer.TYPE.newQuery();
		query.joinOuterLeft(ArticleContainer.articles.getRelationType(), ArticleContainer.articles.getParent().equalTarget());
		final Join articleJoin = query.join(SpecificArticle.TYPE);
		articleJoin.setCondition(((ItemField<?>)ArticleContainer.articles.getElement()).equalTarget(articleJoin));
		assertEquals(asList(productSuite), query.search());
	}

	@Test
	public void testCorrectSubtypeOfJoinWillBeUsedEmptyResult()
	{
		final ArticleContainer productSuite = new ArticleContainer();
		productSuite.addToArticles(new SpecificArticle());

		final Query<ArticleContainer> query = ArticleContainer.TYPE.newQuery();
		query.joinOuterLeft(ArticleContainer.specificArticles.getRelationType(), ArticleContainer.specificArticles.getParent()
				.equalTarget());
		final Join articleJoin = query.join(ReallySpecificArticle.TYPE);
		articleJoin.setCondition(((ItemField<?>)ArticleContainer.specificArticles.getElement()).equalTarget(articleJoin));
		assertEquals(asList(), query.search());
	}

	@Test
	public void testSuperTypeCastNotAllowed()
	{
		final ArticleContainer productSuite = new ArticleContainer();
		productSuite.addToArticles(new SpecificArticle());

		final Query<ArticleContainer> query = ArticleContainer.TYPE.newQuery();
		query.joinOuterLeft(ArticleContainer.specificArticles.getRelationType(), ArticleContainer.specificArticles.getParent().equalTarget());
		final Join articleJoin = query.join(Article.TYPE);
		try
		{
			((ItemField<?>)ArticleContainer.specificArticles.getElement()).equalTarget(articleJoin);
			fail("exception expected");
		}
		catch(final ClassCastException e)
		{
			assertEquals("expected a SpecificArticle, but was a Article", e.getMessage());
		}
	}

	@Test
	public void testInvalidJoinIsBound()
	{
		final ArticleContainer productSuite = new ArticleContainer();
		productSuite.addToArticles(new SpecificArticle());

		final Query<ArticleContainer> query = ArticleContainer.TYPE.newQuery();
		final Join test = query.joinOuterLeft(ArticleContainer.articles.getRelationType(), ArticleContainer.articles.getParent()
				.equalTarget());
		query.join(SpecificArticle.TYPE);
		try
		{
			((ItemField<?>)ArticleContainer.articles.getElement()).equalTarget(test);
			fail("exception expected");
		}
		catch(final ClassCastException e)
		{
			assertEquals("expected a Article, but was a ArticleContainer-articles", e.getMessage());
		}
	}

	static class ArticleContainer extends Item
	{
		static final ListField<Article> articles = ListField.create(ItemField.create(Article.class));
		static final ListField<SpecificArticle> specificArticles = ListField.create(ItemField.create(SpecificArticle.class));

	/**

	 **
	 * Creates a new ArticleContainer with all the fields initially needed.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tags <tt>@cope.constructor public|package|protected|private|none</tt> in the class comment and <tt>@cope.initial</tt> in the comment of fields.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	ArticleContainer()
	{
		this(new com.exedio.cope.SetValue<?>[]{
		});
	}/**

	 **
	 * Creates a new ArticleContainer and sets the given fields initially.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.generic.constructor public|package|protected|private|none</tt> in the class comment.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	protected ArticleContainer(final com.exedio.cope.SetValue<?>... setValues)
	{
		super(setValues);
	}/**

	 **
	 * Returns the value of {@link #articles}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final java.util.List<Article> getArticles()
	{
		return ArticleContainer.articles.get(this);
	}/**

	 **
	 * Returns a query for the value of {@link #articles}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getQuery public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final com.exedio.cope.Query<Article> getArticlesQuery()
	{
		return ArticleContainer.articles.getQuery(this);
	}/**

	 **
	 * Returns the items, for which field list {@link #articles} contains the given element.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getDistinctParentsOf public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	static final java.util.List<ArticleContainer> getDistinctParentsOfArticles(final Article element)
	{
		return ArticleContainer.articles.getDistinctParents(ArticleContainer.class,element);
	}/**

	 **
	 * Adds a new value for {@link #articles}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.addTo public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final void addToArticles(final Article articles)
			throws
				com.exedio.cope.MandatoryViolationException,
				java.lang.ClassCastException
	{
		ArticleContainer.articles.add(this,articles);
	}/**

	 **
	 * Sets a new value for {@link #articles}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final void setArticles(final java.util.Collection<? extends Article> articles)
			throws
				com.exedio.cope.MandatoryViolationException,
				java.lang.ClassCastException
	{
		ArticleContainer.articles.set(this,articles);
	}/**

	 **
	 * Returns the parent field of the type of {@link #articles}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.Parent public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	static final com.exedio.cope.ItemField<ArticleContainer> articlesParent()
	{
		return ArticleContainer.articles.getParent(ArticleContainer.class);
	}/**

	 **
	 * Returns the value of {@link #specificArticles}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final java.util.List<SpecificArticle> getSpecificArticles()
	{
		return ArticleContainer.specificArticles.get(this);
	}/**

	 **
	 * Returns a query for the value of {@link #specificArticles}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getQuery public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final com.exedio.cope.Query<SpecificArticle> getSpecificArticlesQuery()
	{
		return ArticleContainer.specificArticles.getQuery(this);
	}/**

	 **
	 * Returns the items, for which field list {@link #specificArticles} contains the given element.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getDistinctParentsOf public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	static final java.util.List<ArticleContainer> getDistinctParentsOfSpecificArticles(final SpecificArticle element)
	{
		return ArticleContainer.specificArticles.getDistinctParents(ArticleContainer.class,element);
	}/**

	 **
	 * Adds a new value for {@link #specificArticles}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.addTo public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final void addToSpecificArticles(final SpecificArticle specificArticles)
			throws
				com.exedio.cope.MandatoryViolationException,
				java.lang.ClassCastException
	{
		ArticleContainer.specificArticles.add(this,specificArticles);
	}/**

	 **
	 * Sets a new value for {@link #specificArticles}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final void setSpecificArticles(final java.util.Collection<? extends SpecificArticle> specificArticles)
			throws
				com.exedio.cope.MandatoryViolationException,
				java.lang.ClassCastException
	{
		ArticleContainer.specificArticles.set(this,specificArticles);
	}/**

	 **
	 * Returns the parent field of the type of {@link #specificArticles}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.Parent public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	static final com.exedio.cope.ItemField<ArticleContainer> specificArticlesParent()
	{
		return ArticleContainer.specificArticles.getParent(ArticleContainer.class);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	private static final long serialVersionUID = 1l;/**

	 **
	 * The persistent type information for articleContainer.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.type public|package|protected|private|none</tt> in the class comment.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	static final com.exedio.cope.Type<ArticleContainer> TYPE = com.exedio.cope.TypesBound.newType(ArticleContainer.class);/**

	 **
	 * Activation constructor. Used for internal purposes only.
	 * @see com.exedio.cope.Item#Item(com.exedio.cope.ActivationParameters)
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	protected ArticleContainer(final com.exedio.cope.ActivationParameters ap){super(ap);
}}

	static abstract class Article extends Item
	{
		static final StringField code = new StringField().defaultTo("test");

	/**

	 **
	 * Creates a new Article with all the fields initially needed.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tags <tt>@cope.constructor public|package|protected|private|none</tt> in the class comment and <tt>@cope.initial</tt> in the comment of fields.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	Article()
	{
		this(new com.exedio.cope.SetValue<?>[]{
		});
	}/**

	 **
	 * Creates a new Article and sets the given fields initially.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.generic.constructor public|package|protected|private|none</tt> in the class comment.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	protected Article(final com.exedio.cope.SetValue<?>... setValues)
	{
		super(setValues);
	}/**

	 **
	 * Returns the value of {@link #code}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final java.lang.String getCode()
	{
		return Article.code.get(this);
	}/**

	 **
	 * Sets a new value for {@link #code}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final void setCode(final java.lang.String code)
			throws
				com.exedio.cope.MandatoryViolationException,
				com.exedio.cope.StringLengthViolationException
	{
		Article.code.set(this,code);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	private static final long serialVersionUID = 1l;/**

	 **
	 * The persistent type information for article.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.type public|package|protected|private|none</tt> in the class comment.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	static final com.exedio.cope.Type<Article> TYPE = com.exedio.cope.TypesBound.newType(Article.class);/**

	 **
	 * Activation constructor. Used for internal purposes only.
	 * @see com.exedio.cope.Item#Item(com.exedio.cope.ActivationParameters)
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	protected Article(final com.exedio.cope.ActivationParameters ap){super(ap);
}}

	static class SpecificArticle extends Article
	{
		static final StringField specificCode = new StringField().defaultTo("specificTest");

	/**

	 **
	 * Creates a new SpecificArticle with all the fields initially needed.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tags <tt>@cope.constructor public|package|protected|private|none</tt> in the class comment and <tt>@cope.initial</tt> in the comment of fields.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	SpecificArticle()
	{
		this(new com.exedio.cope.SetValue<?>[]{
		});
	}/**

	 **
	 * Creates a new SpecificArticle and sets the given fields initially.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.generic.constructor public|package|protected|private|none</tt> in the class comment.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	protected SpecificArticle(final com.exedio.cope.SetValue<?>... setValues)
	{
		super(setValues);
	}/**

	 **
	 * Returns the value of {@link #specificCode}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final java.lang.String getSpecificCode()
	{
		return SpecificArticle.specificCode.get(this);
	}/**

	 **
	 * Sets a new value for {@link #specificCode}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final void setSpecificCode(final java.lang.String specificCode)
			throws
				com.exedio.cope.MandatoryViolationException,
				com.exedio.cope.StringLengthViolationException
	{
		SpecificArticle.specificCode.set(this,specificCode);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	private static final long serialVersionUID = 1l;/**

	 **
	 * The persistent type information for specificArticle.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.type public|package|protected|private|none</tt> in the class comment.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	static final com.exedio.cope.Type<SpecificArticle> TYPE = com.exedio.cope.TypesBound.newType(SpecificArticle.class);/**

	 **
	 * Activation constructor. Used for internal purposes only.
	 * @see com.exedio.cope.Item#Item(com.exedio.cope.ActivationParameters)
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	protected SpecificArticle(final com.exedio.cope.ActivationParameters ap){super(ap);
}}

	static class ReallySpecificArticle extends SpecificArticle
	{
		static final StringField reallySpecificCode = new StringField().defaultTo("reallySpecificTest");
	/**

	 **
	 * Creates a new ReallySpecificArticle with all the fields initially needed.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tags <tt>@cope.constructor public|package|protected|private|none</tt> in the class comment and <tt>@cope.initial</tt> in the comment of fields.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	ReallySpecificArticle()
	{
		this(new com.exedio.cope.SetValue<?>[]{
		});
	}/**

	 **
	 * Creates a new ReallySpecificArticle and sets the given fields initially.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.generic.constructor public|package|protected|private|none</tt> in the class comment.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	protected ReallySpecificArticle(final com.exedio.cope.SetValue<?>... setValues)
	{
		super(setValues);
	}/**

	 **
	 * Returns the value of {@link #reallySpecificCode}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final java.lang.String getReallySpecificCode()
	{
		return ReallySpecificArticle.reallySpecificCode.get(this);
	}/**

	 **
	 * Sets a new value for {@link #reallySpecificCode}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final void setReallySpecificCode(final java.lang.String reallySpecificCode)
			throws
				com.exedio.cope.MandatoryViolationException,
				com.exedio.cope.StringLengthViolationException
	{
		ReallySpecificArticle.reallySpecificCode.set(this,reallySpecificCode);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	private static final long serialVersionUID = 1l;/**

	 **
	 * The persistent type information for reallySpecificArticle.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.type public|package|protected|private|none</tt> in the class comment.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	static final com.exedio.cope.Type<ReallySpecificArticle> TYPE = com.exedio.cope.TypesBound.newType(ReallySpecificArticle.class);/**

	 **
	 * Activation constructor. Used for internal purposes only.
	 * @see com.exedio.cope.Item#Item(com.exedio.cope.ActivationParameters)
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	protected ReallySpecificArticle(final com.exedio.cope.ActivationParameters ap){super(ap);
}}
}
