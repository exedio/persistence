/*
 * Copyright (C) 2004-2015  exedio GmbH (www.exedio.com)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package com.exedio.cope.vault;

import static com.exedio.cope.tojunit.Assert.assertFails;
import static com.exedio.cope.tojunit.Assert.readAllLines;
import static com.exedio.cope.tojunit.TestSources.single;
import static com.exedio.cope.util.Sources.cascade;
import static com.exedio.cope.vault.VaultFileToTrail.mainInternal;
import static com.exedio.cope.vault.VaultTester.serviceParameters;
import static java.io.File.separator;
import static java.nio.charset.StandardCharsets.US_ASCII;
import static java.time.ZoneOffset.UTC;
import static org.junit.jupiter.api.Assertions.assertEquals;

import com.exedio.cope.tojunit.MainRule;
import com.exedio.cope.util.Hex;
import com.exedio.cope.util.Sources;
import com.exedio.cope.vault.VaultFileToTrail.HumanReadableException;
import com.exedio.cope.vaultmock.VaultMockService;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.attribute.FileTime;
import java.time.LocalDateTime;
import java.util.HashSet;
import java.util.List;
import java.util.Properties;
import java.util.Set;
import org.junit.jupiter.api.Test;
import org.junit.rules.TemporaryFolder;

@MainRule.Tag
public class VaultFileToTrailTest
{
	protected final TemporaryFolder files = new TemporaryFolder();

	@Test void testRootMissing()
	{
		assertFails(
				() -> mainInternal(System.out, System.err, new String[]{}),
				HumanReadableException.class,
				"root directory must be specified as first parameter");
	}

	@Test void testRootNotExists()
	{
		assertFails(
				() -> mainInternal(System.out, System.err, new String[]{"NOT_EXISTS"}),
				HumanReadableException.class,
				"root directory does not exist: " + Paths.get("NOT_EXISTS").toAbsolutePath());
	}

	@Test void testRootIsRegular() throws IOException
	{
		final Path root = files.newFile().toPath();
		assertFails(
				() -> mainInternal(System.out, System.err, new String[]{root.toString()}),
				HumanReadableException.class,
				"root directory is not a directory: " + root.toAbsolutePath());
	}

	@Test void test() throws Exception
	{
		final Path root = files.newFolder().toPath();
		try(final VaultFileService s = new VaultFileService(SERVICE_PARAMETERS, new VaultFileService.Props(
				single("root", root))))
		{
			Files.createDirectory(s.tempDir);
			assertEquals("70903e79b7575e3f4e7ffa15c2608ac7", put(new byte[]{1,2,3,4,5,6,7,8,9,10}, s));
			assertEquals("8596c1af55b14b7b320112944fcb8536", put(new byte[]{1,2,3,4,5,6,7,8,9}, s));
			assertEquals("d0f2e6ab31d2601ffd1be2d5062533b2", put(new byte[]{1,2,3,4,5,6,7,8,8}, s));
			assertEquals("be62f64953dcbbd0589e8c061e10621e", put(new byte[]{1,2,3,4,5,6,7,7,7}, s));
			assertEquals("a8445619abd08f3ba0ebfcb31183f7f9", put(new byte[]{18}, s));
			assertEquals("d41d8cd98f00b204e9800998ecf8427e", put(new byte[]{}, s));
			callContractProbe(root);

			final Path skippedFile = root.resolve("be6").resolve("zack");
			Files.createFile(skippedFile);
			for(final String path : new String[]{
					"709/03e79b7575e3f4e7ffa15c2608ac7",
					"859/6c1af55b14b7b320112944fcb8536",
					"d0f/2e6ab31d2601ffd1be2d5062533b2",
					"be6/2f64953dcbbd0589e8c061e10621e",
					"a84/45619abd08f3ba0ebfcb31183f7f9",
					"d41/d8cd98f00b204e9800998ecf8427e",
			})
				Files.setLastModifiedTime(
						root.resolve(path),
						FileTime.from(LocalDateTime.of(2012, 3, 16, 8, 10, 22).toInstant(UTC)));

			final ByteArrayOutputStream out = new ByteArrayOutputStream();
			final ByteArrayOutputStream err = new ByteArrayOutputStream();
			mainInternal(
					new PrintStream(out, false, US_ASCII),
					new PrintStream(err, false, US_ASCII),
					root.toString(), "9");

			final List<String> outLines = readAllLines(out);

			assertEquals(List.of(
					"# Generated by com.exedio.cope.vault.VaultFileToTrail",
					"#   root=" + root.toAbsolutePath(),
					"#   startLimit=9"),
					outLines.subList(0, HEADER_END));

			final String pre =
					"\"";
			final String post =
					"\",\"1331885422\",\"2012-03-16 08:10:22.000\"";
			assertEquals(Set.of(
					pre + "70903e79b7575e3f4e7ffa15c2608ac7\",\"10\",\"010203040506070809" + post,
					pre + "8596c1af55b14b7b320112944fcb8536\",\"9\",\"010203040506070809" + post,
					pre + "d0f2e6ab31d2601ffd1be2d5062533b2\",\"9\",\"010203040506070808" + post,
					pre + "be62f64953dcbbd0589e8c061e10621e\",\"9\",\"010203040506070707" + post,
					pre + "a8445619abd08f3ba0ebfcb31183f7f9\",\"1\",\"12" + post),
					new HashSet<>(outLines.subList(HEADER_END, outLines.size())));

			assertEquals(Set.of(
					"Skipping non-hex directory " + root.toAbsolutePath() + separator + ".tempVaultFileService",
					"Skipping empty file " + root.toAbsolutePath() + separator + "d41" + separator + "d8cd98f00b204e9800998ecf8427e",
					"Skipping non-hex file " + skippedFile.toAbsolutePath(),
					"Skipped contract probes: 1"),
					new HashSet<>(readAllLines(err)));
		}
	}

	@Test void testDefault() throws IOException, HumanReadableException
	{
		final Path root = files.newFolder().toPath();
		try(final VaultFileService s = new VaultFileService(SERVICE_PARAMETERS, new VaultFileService.Props(
				single("root", root))))
		{
			Files.createDirectory(s.tempDir);
			assertEquals("1a68212b64dfc3cc83a13c427cad7ce0", put(new byte[]{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19}, s));
			assertEquals("4d5555e067dd97d08fef90959b1510cb", put(new byte[]{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20}, s));
			assertEquals("5e28425275cf3549645864021282b785", put(new byte[]{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21}, s));
			for(final String path : new String[]{
					"1a6/8212b64dfc3cc83a13c427cad7ce0",
					"4d5/555e067dd97d08fef90959b1510cb",
					"5e2/8425275cf3549645864021282b785",
			})
				Files.setLastModifiedTime(
						root.resolve(path),
						FileTime.from(LocalDateTime.of(2014, 8, 5, 16, 44, 55).toInstant(UTC)));

			final ByteArrayOutputStream out = new ByteArrayOutputStream();
			mainInternal(
					new PrintStream(out, false, US_ASCII),
					new PrintStream(new ByteArrayOutputStream(), false, US_ASCII),
					root.toString());

			final List<String> outLines = readAllLines(out);

			assertEquals(List.of(
					"# Generated by com.exedio.cope.vault.VaultFileToTrail",
					"#   root=" + root.toAbsolutePath(),
					"#   startLimit=20"),
					outLines.subList(0, HEADER_END));

			final String pre =
					"\"";
			final String post =
					"\",\"1407257095\",\"2014-08-05 16:44:55.000\"";

			assertEquals(Set.of(
					pre + "1a68212b64dfc3cc83a13c427cad7ce0\",\"19\",\"0102030405060708090a0b0c0d0e0f10111213"   + post,
					pre + "4d5555e067dd97d08fef90959b1510cb\",\"20\",\"0102030405060708090a0b0c0d0e0f1011121314" + post,
					pre + "5e28425275cf3549645864021282b785\",\"21\",\"0102030405060708090a0b0c0d0e0f1011121314" + post),
					new HashSet<>(outLines.subList(HEADER_END, outLines.size())));
		}
	}

	@Test void testLong() throws Exception
	{
		final Path root = files.newFolder().toPath();
		try(final VaultFileService s = new VaultFileService(SERVICE_PARAMETERS, new VaultFileService.Props(
				single("root", root))))
		{
			Files.createDirectory(s.tempDir);
			assertEquals("1a68212b64dfc3cc83a13c427cad7ce0", put(new byte[]{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19}, s));
			callContractProbe(root);
			for(final String path : new String[]{
					"1a6/8212b64dfc3cc83a13c427cad7ce0",
			})
				Files.setLastModifiedTime(
						root.resolve(path),
						FileTime.from(LocalDateTime.of(2014, 8, 5, 16, 44, 55).toInstant(UTC)));

			final ByteArrayOutputStream out = new ByteArrayOutputStream();
			final ByteArrayOutputStream err = new ByteArrayOutputStream();
			mainInternal(
					new PrintStream(out, false, US_ASCII),
					new PrintStream(err, false, US_ASCII),
					root.toString(), "1000");

			final List<String> outLines = readAllLines(out);

			assertEquals(List.of(
					"# Generated by com.exedio.cope.vault.VaultFileToTrail",
					"#   root=" + root.toAbsolutePath(),
					"#   startLimit=1000"),
					outLines.subList(0, HEADER_END));

			final String pre =
					"\"";
			final String post =
					"\",\"1407257095\",\"2014-08-05 16:44:55.000\"";

			assertEquals(Set.of(
					pre + "1a68212b64dfc3cc83a13c427cad7ce0\",\"19\",\"0102030405060708090a0b0c0d0e0f10111213" + post),
					new HashSet<>(outLines.subList(HEADER_END, outLines.size())));

			assertEquals(Set.of(
					"Skipping non-hex directory " + root.toAbsolutePath() + separator + ".tempVaultFileService",
					"Skipped contract probes: 1"),
					new HashSet<>(readAllLines(err)));
		}
	}

	private static final int HEADER_END = 3;

	private static final VaultProperties PROPERTIES =
			VaultProperties.factory().create(cascade(
					single("algorithm", "MD5"),
					single("default.service", VaultMockService.class)));

	private static final VaultServiceParameters SERVICE_PARAMETERS =
			serviceParameters(
					PROPERTIES,
					"testBucket",
					true); // writable

	private static String put(final byte[] value, final VaultFileService s)
	{
		final String hash = Hex.encodeLower(PROPERTIES.bucket("default").getAlgorithmFactory().digest(value));
		s.put(hash, value);
		return hash;
	}

	private static void callContractProbe(final Path root) throws Exception
	{
		final Properties rr = new Properties();
		rr.setProperty("default.service", VaultFileService.class.getName());
		rr.setProperty("default.service.root", root.toAbsolutePath().toString());
		VaultProperties.factory().
				create(Sources.view(rr, VaultFileToTrailTest.class.getName())).
				getProbes().
				stream().
				filter(x -> "default.Contract".equals(x.toString())).
				findFirst().
				orElseThrow().
				call();
	}
}
