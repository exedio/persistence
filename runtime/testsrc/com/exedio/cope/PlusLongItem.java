/*
 * Copyright (C) 2004-2008  exedio GmbH (www.exedio.com)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package com.exedio.cope;

import com.exedio.cope.Cope;
import com.exedio.cope.LongField;
import com.exedio.cope.Item;
import com.exedio.cope.PlusView;
import com.exedio.cope.SetValue;

public class PlusLongItem extends Item
{
	public static final LongField numA = new LongField().optional();

	public static final LongField numB = new LongField().optional();

	public static final LongField numC = new LongField().optional();
	
	public static final PlusLiteralView<Long> plusA9 = new PlusLiteralView<Long>(numA, new Long(9l));
	
	public static final PlusView<Long> plusAB = numA.plus(numB);

	public static final PlusView<Long> plusAC = numA.plus(numC);

	public static final PlusView<Long> plusBC = numB.plus(numC);

	public static final PlusView<Long> plusABC = Cope.plus(numA, numB, numC);

	public static final PlusView<Long> plusABaC = plusAB.plus(numC);
	
	public static final MultiplyLiteralView<Long> multiplyB9 = new MultiplyLiteralView<Long>(numB, new Long(9l));
	
	public static final MultiplyView<Long> multiplyBC = numB.multiply(numC);
	
	public PlusLongItem(final long initialNumA, final long initialNumB, final long initialNumC)
	{
		super(new SetValue[]{
			numA.map(initialNumA),
			numB.map(initialNumB),
			numC.map(initialNumC),
		});
	}

	/**

	 **
	 * Creates a new PlusLongItem with all the fields initially needed.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tags <tt>@cope.constructor public|package|protected|private|none</tt> in the class comment and <tt>@cope.initial</tt> in the comment of fields.
	 */
	public PlusLongItem()
	{
		this(new com.exedio.cope.SetValue[]{
		});
	}/**

	 **
	 * Creates a new PlusLongItem and sets the given fields initially.
	 * This constructor is called by {@link com.exedio.cope.Type#newItem Type.newItem}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.generic.constructor public|package|protected|private|none</tt> in the class comment.
	 */
	private PlusLongItem(final com.exedio.cope.SetValue... setValues)
	{
		super(setValues);
	}/**

	 **
	 * Reactivation constructor. Used for internal purposes only.
	 * @see com.exedio.cope.Item#Item(com.exedio.cope.util.ReactivationConstructorDummy,int)
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	@SuppressWarnings("unused") private PlusLongItem(final com.exedio.cope.util.ReactivationConstructorDummy d,final int pk)
	{
		super(d,pk);
	}/**

	 **
	 * Returns the value of {@link #numA}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	public final java.lang.Long getNumA()
	{
		return PlusLongItem.numA.get(this);
	}/**

	 **
	 * Sets a new value for {@link #numA}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	public final void setNumA(final java.lang.Long numA)
	{
		PlusLongItem.numA.set(this,numA);
	}/**

	 **
	 * Returns the value of {@link #numB}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	public final java.lang.Long getNumB()
	{
		return PlusLongItem.numB.get(this);
	}/**

	 **
	 * Sets a new value for {@link #numB}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	public final void setNumB(final java.lang.Long numB)
	{
		PlusLongItem.numB.set(this,numB);
	}/**

	 **
	 * Returns the value of {@link #numC}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	public final java.lang.Long getNumC()
	{
		return PlusLongItem.numC.get(this);
	}/**

	 **
	 * Sets a new value for {@link #numC}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	public final void setNumC(final java.lang.Long numC)
	{
		PlusLongItem.numC.set(this,numC);
	}/**

	 **
	 * Returns the value of {@link #plusA9}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	public final java.lang.Long getPlusA9()
	{
		return PlusLongItem.plusA9.get(this);
	}/**

	 **
	 * Returns the value of {@link #plusAB}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	public final java.lang.Long getPlusAB()
	{
		return PlusLongItem.plusAB.get(this);
	}/**

	 **
	 * Returns the value of {@link #plusAC}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	public final java.lang.Long getPlusAC()
	{
		return PlusLongItem.plusAC.get(this);
	}/**

	 **
	 * Returns the value of {@link #plusBC}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	public final java.lang.Long getPlusBC()
	{
		return PlusLongItem.plusBC.get(this);
	}/**

	 **
	 * Returns the value of {@link #plusABC}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	public final java.lang.Long getPlusABC()
	{
		return PlusLongItem.plusABC.get(this);
	}/**

	 **
	 * Returns the value of {@link #plusABaC}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	public final java.lang.Long getPlusABaC()
	{
		return PlusLongItem.plusABaC.get(this);
	}/**

	 **
	 * Returns the value of {@link #multiplyB9}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	public final java.lang.Long getMultiplyB9()
	{
		return PlusLongItem.multiplyB9.get(this);
	}/**

	 **
	 * Returns the value of {@link #multiplyBC}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	public final java.lang.Long getMultiplyBC()
	{
		return PlusLongItem.multiplyBC.get(this);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	private static final long serialVersionUID = 1l;/**

	 **
	 * The persistent type information for plusLongItem.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.type public|package|protected|private|none</tt> in the class comment.
	 */
	public static final com.exedio.cope.Type<PlusLongItem> TYPE = newType(PlusLongItem.class)
;}
