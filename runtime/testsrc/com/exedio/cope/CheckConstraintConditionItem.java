/*
 * Copyright (C) 2004-2012  exedio GmbH (www.exedio.com)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package com.exedio.cope;

@CopeSchemaName("Checkconstraintconditionitem")
final class CheckConstraintConditionItem extends Item
{
	static final IntegerField integer1 = new IntegerField();
	static final IntegerField integer2 = new IntegerField();
	static final ItemField<CheckConstraintConditionItemTarget> item = ItemField.create(CheckConstraintConditionItemTarget.class);
	//static final StringField string = new StringField();

	static final CheckConstraint isNull     = new CheckConstraint(integer1.isNull());
	static final CheckConstraint isNotNull  = new CheckConstraint(integer1.isNotNull());
	static final CheckConstraint compare         = new CheckConstraint(integer1.less(0));
	static final CheckConstraint compareFunction = new CheckConstraint(integer1.less(integer2));
	static final CheckConstraint not = new CheckConstraint(integer1.less(integer2).not());
	static final CheckConstraint compositeAnd = new CheckConstraint(integer1.isNull().and(integer2.isNull()));
	static final CheckConstraint compositeOr  = new CheckConstraint(integer1.isNull().or (integer2.isNull()));
	//static final CheckConstraint charSet = new CheckConstraint(new CharSetCondition(string, CharSet.ALPHA_LOWER)); TODO
	//static final CheckConstraint like = new CheckConstraint(string.like("like it")); TODO
	static final CheckConstraint instanceOf     = new CheckConstraint(item.instanceOf   (CheckConstraintConditionItemSub.TYPE));
	static final CheckConstraint instanceOfNot  = new CheckConstraint(item.notInstanceOf(CheckConstraintConditionItemSub.TYPE));
	static final CheckConstraint singleInstanceOf    = new CheckConstraint(item.instanceOf   (CheckConstraintConditionItemBottom.TYPE));
	static final CheckConstraint singleInstanceOfNot = new CheckConstraint(item.notInstanceOf(CheckConstraintConditionItemBottom.TYPE));
	static final CheckConstraint startsWith = new CheckConstraint(integer1.isNotNull());


	/**

	 **
	 * Creates a new CheckConstraintConditionItem with all the fields initially needed.
	 * @param integer1 the initial value for field {@link #integer1}.
	 * @param integer2 the initial value for field {@link #integer2}.
	 * @param item the initial value for field {@link #item}.
	 * @throws com.exedio.cope.MandatoryViolationException if item is null.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tags <tt>@cope.constructor public|package|protected|private|none</tt> in the class comment and <tt>@cope.initial</tt> in the comment of fields.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	CheckConstraintConditionItem(
				final int integer1,
				final int integer2,
				final CheckConstraintConditionItemTarget item)
			throws
				com.exedio.cope.MandatoryViolationException
	{
		this(new com.exedio.cope.SetValue<?>[]{
			CheckConstraintConditionItem.integer1.map(integer1),
			CheckConstraintConditionItem.integer2.map(integer2),
			CheckConstraintConditionItem.item.map(item),
		});
	}/**

	 **
	 * Creates a new CheckConstraintConditionItem and sets the given fields initially.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.generic.constructor public|package|protected|private|none</tt> in the class comment.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	private CheckConstraintConditionItem(final com.exedio.cope.SetValue<?>... setValues)
	{
		super(setValues);
	}/**

	 **
	 * Returns the value of {@link #integer1}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final int getInteger1()
	{
		return CheckConstraintConditionItem.integer1.getMandatory(this);
	}/**

	 **
	 * Sets a new value for {@link #integer1}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final void setInteger1(final int integer1)
	{
		CheckConstraintConditionItem.integer1.set(this,integer1);
	}/**

	 **
	 * Returns the value of {@link #integer2}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final int getInteger2()
	{
		return CheckConstraintConditionItem.integer2.getMandatory(this);
	}/**

	 **
	 * Sets a new value for {@link #integer2}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final void setInteger2(final int integer2)
	{
		CheckConstraintConditionItem.integer2.set(this,integer2);
	}/**

	 **
	 * Returns the value of {@link #item}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final CheckConstraintConditionItemTarget getItem()
	{
		return CheckConstraintConditionItem.item.get(this);
	}/**

	 **
	 * Sets a new value for {@link #item}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	final void setItem(final CheckConstraintConditionItemTarget item)
			throws
				com.exedio.cope.MandatoryViolationException
	{
		CheckConstraintConditionItem.item.set(this,item);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	private static final long serialVersionUID = 1l;/**

	 **
	 * The persistent type information for checkConstraintConditionItem.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.type public|package|protected|private|none</tt> in the class comment.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	static final com.exedio.cope.Type<CheckConstraintConditionItem> TYPE = com.exedio.cope.TypesBound.newType(CheckConstraintConditionItem.class);/**

	 **
	 * Activation constructor. Used for internal purposes only.
	 * @see com.exedio.cope.Item#Item(com.exedio.cope.ActivationParameters)
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	@javax.annotation.Generated("com.exedio.cope.instrument")
	@SuppressWarnings("unused") private CheckConstraintConditionItem(final com.exedio.cope.ActivationParameters ap){super(ap);
}}
