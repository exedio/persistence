/*
 * Copyright (C) 2004-2012  exedio GmbH (www.exedio.com)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package com.exedio.cope.pattern;

import com.exedio.cope.Item;

final class ThumbnailUrlFallbackItem extends Item
{
	static final Media any = new Media();
	static final MediaThumbnail anFilter = new MediaThumbnail(any, 20, 30);

	static final Media nonSupported = new Media().contentType(MediaType.JPEG, "image/txt");
	static final MediaThumbnail nonSupportedFilter = new MediaThumbnail(nonSupported, 20, 30);

	static final Media supported = new Media().contentType(MediaType.JPEG);
	static final MediaThumbnail supportedFilter = new MediaThumbnail(supported, 20, 30);

	/**

	 **
	 * Creates a new ThumbnailUrlFallbackItem with all the fields initially needed.
	 * @param any the initial value for field {@link #any}.
	 * @param nonSupported the initial value for field {@link #nonSupported}.
	 * @param supported the initial value for field {@link #supported}.
	 * @throws com.exedio.cope.MandatoryViolationException if any, nonSupported, supported is null.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tags <tt>@cope.constructor public|package|protected|private|none</tt> in the class comment and <tt>@cope.initial</tt> in the comment of fields.
	 */
	ThumbnailUrlFallbackItem(
				final com.exedio.cope.pattern.Media.Value any,
				final com.exedio.cope.pattern.Media.Value nonSupported,
				final com.exedio.cope.pattern.Media.Value supported)
			throws
				com.exedio.cope.MandatoryViolationException
	{
		this(new com.exedio.cope.SetValue<?>[]{
			ThumbnailUrlFallbackItem.any.map(any),
			ThumbnailUrlFallbackItem.nonSupported.map(nonSupported),
			ThumbnailUrlFallbackItem.supported.map(supported),
		});
	}/**

	 **
	 * Creates a new ThumbnailUrlFallbackItem and sets the given fields initially.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.generic.constructor public|package|protected|private|none</tt> in the class comment.
	 */
	private ThumbnailUrlFallbackItem(final com.exedio.cope.SetValue<?>... setValues)
	{
		super(setValues);
	}/**

	 **
	 * Returns a URL the content of {@link #any} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getURL public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getAnyURL()
	{
		return ThumbnailUrlFallbackItem.any.getURL(this);
	}/**

	 **
	 * Returns a Locator the content of {@link #any} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLocator public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final com.exedio.cope.pattern.MediaPath.Locator getAnyLocator()
	{
		return ThumbnailUrlFallbackItem.any.getLocator(this);
	}/**

	 **
	 * Returns the content type of the media {@link #any}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getContentType public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getAnyContentType()
	{
		return ThumbnailUrlFallbackItem.any.getContentType(this);
	}/**

	 **
	 * Returns the last modification date of media {@link #any}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLastModified public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.util.Date getAnyLastModified()
	{
		return ThumbnailUrlFallbackItem.any.getLastModified(this);
	}/**

	 **
	 * Returns the body length of the media {@link #any}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLength public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final long getAnyLength()
	{
		return ThumbnailUrlFallbackItem.any.getLength(this);
	}/**

	 **
	 * Returns the body of the media {@link #any}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getBody public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final byte[] getAnyBody()
	{
		return ThumbnailUrlFallbackItem.any.getBody(this);
	}/**

	 **
	 * Writes the body of media {@link #any} into the given stream.
	 * Does nothing, if the media is null.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getBody public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void getAnyBody(final java.io.OutputStream body)
			throws
				java.io.IOException
	{
		ThumbnailUrlFallbackItem.any.getBody(this,body);
	}/**

	 **
	 * Writes the body of media {@link #any} into the given file.
	 * Does nothing, if the media is null.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getBody public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void getAnyBody(final java.io.File body)
			throws
				java.io.IOException
	{
		ThumbnailUrlFallbackItem.any.getBody(this,body);
	}/**

	 **
	 * Sets the content of media {@link #any}.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setAny(final com.exedio.cope.pattern.Media.Value any)
			throws
				java.io.IOException
	{
		ThumbnailUrlFallbackItem.any.set(this,any);
	}/**

	 **
	 * Sets the content of media {@link #any}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setAny(final byte[] body,final java.lang.String contentType)
	{
		ThumbnailUrlFallbackItem.any.set(this,body,contentType);
	}/**

	 **
	 * Sets the content of media {@link #any}.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setAny(final java.io.InputStream body,final java.lang.String contentType)
			throws
				java.io.IOException
	{
		ThumbnailUrlFallbackItem.any.set(this,body,contentType);
	}/**

	 **
	 * Sets the content of media {@link #any}.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setAny(final java.io.File body,final java.lang.String contentType)
			throws
				java.io.IOException
	{
		ThumbnailUrlFallbackItem.any.set(this,body,contentType);
	}/**

	 **
	 * Returns a URL the content of {@link #anFilter} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getURL public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getAnFilterURL()
	{
		return ThumbnailUrlFallbackItem.anFilter.getURL(this);
	}/**

	 **
	 * Returns a Locator the content of {@link #anFilter} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLocator public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final com.exedio.cope.pattern.MediaPath.Locator getAnFilterLocator()
	{
		return ThumbnailUrlFallbackItem.anFilter.getLocator(this);
	}/**

	 **
	 * Returns a URL the content of {@link #anFilter} is available under, falling back to source if necessary.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getURLWithFallbackToSource public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getAnFilterURLWithFallbackToSource()
	{
		return ThumbnailUrlFallbackItem.anFilter.getURLWithFallbackToSource(this);
	}/**

	 **
	 * Returns the body of {@link #anFilter}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final byte[] getAnFilter()
			throws
				java.io.IOException
	{
		return ThumbnailUrlFallbackItem.anFilter.get(this);
	}/**

	 **
	 * Returns a URL the content of {@link #nonSupported} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getURL public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getNonSupportedURL()
	{
		return ThumbnailUrlFallbackItem.nonSupported.getURL(this);
	}/**

	 **
	 * Returns a Locator the content of {@link #nonSupported} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLocator public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final com.exedio.cope.pattern.MediaPath.Locator getNonSupportedLocator()
	{
		return ThumbnailUrlFallbackItem.nonSupported.getLocator(this);
	}/**

	 **
	 * Returns the content type of the media {@link #nonSupported}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getContentType public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getNonSupportedContentType()
	{
		return ThumbnailUrlFallbackItem.nonSupported.getContentType(this);
	}/**

	 **
	 * Returns the last modification date of media {@link #nonSupported}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLastModified public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.util.Date getNonSupportedLastModified()
	{
		return ThumbnailUrlFallbackItem.nonSupported.getLastModified(this);
	}/**

	 **
	 * Returns the body length of the media {@link #nonSupported}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLength public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final long getNonSupportedLength()
	{
		return ThumbnailUrlFallbackItem.nonSupported.getLength(this);
	}/**

	 **
	 * Returns the body of the media {@link #nonSupported}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getBody public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final byte[] getNonSupportedBody()
	{
		return ThumbnailUrlFallbackItem.nonSupported.getBody(this);
	}/**

	 **
	 * Writes the body of media {@link #nonSupported} into the given stream.
	 * Does nothing, if the media is null.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getBody public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void getNonSupportedBody(final java.io.OutputStream body)
			throws
				java.io.IOException
	{
		ThumbnailUrlFallbackItem.nonSupported.getBody(this,body);
	}/**

	 **
	 * Writes the body of media {@link #nonSupported} into the given file.
	 * Does nothing, if the media is null.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getBody public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void getNonSupportedBody(final java.io.File body)
			throws
				java.io.IOException
	{
		ThumbnailUrlFallbackItem.nonSupported.getBody(this,body);
	}/**

	 **
	 * Sets the content of media {@link #nonSupported}.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setNonSupported(final com.exedio.cope.pattern.Media.Value nonSupported)
			throws
				java.io.IOException
	{
		ThumbnailUrlFallbackItem.nonSupported.set(this,nonSupported);
	}/**

	 **
	 * Sets the content of media {@link #nonSupported}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setNonSupported(final byte[] body,final java.lang.String contentType)
	{
		ThumbnailUrlFallbackItem.nonSupported.set(this,body,contentType);
	}/**

	 **
	 * Sets the content of media {@link #nonSupported}.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setNonSupported(final java.io.InputStream body,final java.lang.String contentType)
			throws
				java.io.IOException
	{
		ThumbnailUrlFallbackItem.nonSupported.set(this,body,contentType);
	}/**

	 **
	 * Sets the content of media {@link #nonSupported}.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setNonSupported(final java.io.File body,final java.lang.String contentType)
			throws
				java.io.IOException
	{
		ThumbnailUrlFallbackItem.nonSupported.set(this,body,contentType);
	}/**

	 **
	 * Returns a URL the content of {@link #nonSupportedFilter} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getURL public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getNonSupportedFilterURL()
	{
		return ThumbnailUrlFallbackItem.nonSupportedFilter.getURL(this);
	}/**

	 **
	 * Returns a Locator the content of {@link #nonSupportedFilter} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLocator public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final com.exedio.cope.pattern.MediaPath.Locator getNonSupportedFilterLocator()
	{
		return ThumbnailUrlFallbackItem.nonSupportedFilter.getLocator(this);
	}/**

	 **
	 * Returns a URL the content of {@link #nonSupportedFilter} is available under, falling back to source if necessary.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getURLWithFallbackToSource public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getNonSupportedFilterURLWithFallbackToSource()
	{
		return ThumbnailUrlFallbackItem.nonSupportedFilter.getURLWithFallbackToSource(this);
	}/**

	 **
	 * Returns the body of {@link #nonSupportedFilter}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final byte[] getNonSupportedFilter()
			throws
				java.io.IOException
	{
		return ThumbnailUrlFallbackItem.nonSupportedFilter.get(this);
	}/**

	 **
	 * Returns a URL the content of {@link #supported} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getURL public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getSupportedURL()
	{
		return ThumbnailUrlFallbackItem.supported.getURL(this);
	}/**

	 **
	 * Returns a Locator the content of {@link #supported} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLocator public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final com.exedio.cope.pattern.MediaPath.Locator getSupportedLocator()
	{
		return ThumbnailUrlFallbackItem.supported.getLocator(this);
	}/**

	 **
	 * Returns the last modification date of media {@link #supported}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLastModified public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.util.Date getSupportedLastModified()
	{
		return ThumbnailUrlFallbackItem.supported.getLastModified(this);
	}/**

	 **
	 * Returns the body length of the media {@link #supported}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLength public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final long getSupportedLength()
	{
		return ThumbnailUrlFallbackItem.supported.getLength(this);
	}/**

	 **
	 * Returns the body of the media {@link #supported}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getBody public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final byte[] getSupportedBody()
	{
		return ThumbnailUrlFallbackItem.supported.getBody(this);
	}/**

	 **
	 * Writes the body of media {@link #supported} into the given stream.
	 * Does nothing, if the media is null.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getBody public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void getSupportedBody(final java.io.OutputStream body)
			throws
				java.io.IOException
	{
		ThumbnailUrlFallbackItem.supported.getBody(this,body);
	}/**

	 **
	 * Writes the body of media {@link #supported} into the given file.
	 * Does nothing, if the media is null.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getBody public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void getSupportedBody(final java.io.File body)
			throws
				java.io.IOException
	{
		ThumbnailUrlFallbackItem.supported.getBody(this,body);
	}/**

	 **
	 * Sets the content of media {@link #supported}.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setSupported(final com.exedio.cope.pattern.Media.Value supported)
			throws
				java.io.IOException
	{
		ThumbnailUrlFallbackItem.supported.set(this,supported);
	}/**

	 **
	 * Sets the content of media {@link #supported}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setSupported(final byte[] body,final java.lang.String contentType)
	{
		ThumbnailUrlFallbackItem.supported.set(this,body,contentType);
	}/**

	 **
	 * Sets the content of media {@link #supported}.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setSupported(final java.io.InputStream body,final java.lang.String contentType)
			throws
				java.io.IOException
	{
		ThumbnailUrlFallbackItem.supported.set(this,body,contentType);
	}/**

	 **
	 * Sets the content of media {@link #supported}.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setSupported(final java.io.File body,final java.lang.String contentType)
			throws
				java.io.IOException
	{
		ThumbnailUrlFallbackItem.supported.set(this,body,contentType);
	}/**

	 **
	 * Returns a URL the content of {@link #supportedFilter} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getURL public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getSupportedFilterURL()
	{
		return ThumbnailUrlFallbackItem.supportedFilter.getURL(this);
	}/**

	 **
	 * Returns a Locator the content of {@link #supportedFilter} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLocator public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final com.exedio.cope.pattern.MediaPath.Locator getSupportedFilterLocator()
	{
		return ThumbnailUrlFallbackItem.supportedFilter.getLocator(this);
	}/**

	 **
	 * Returns the body of {@link #supportedFilter}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final byte[] getSupportedFilter()
			throws
				java.io.IOException
	{
		return ThumbnailUrlFallbackItem.supportedFilter.get(this);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	private static final long serialVersionUID = 1l;/**

	 **
	 * The persistent type information for thumbnailUrlFallbackItem.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.type public|package|protected|private|none</tt> in the class comment.
	 */
	static final com.exedio.cope.Type<ThumbnailUrlFallbackItem> TYPE = com.exedio.cope.TypesBound.newType(ThumbnailUrlFallbackItem.class);/**

	 **
	 * Activation constructor. Used for internal purposes only.
	 * @see com.exedio.cope.Item#Item(com.exedio.cope.ActivationParameters)
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	private ThumbnailUrlFallbackItem(final com.exedio.cope.ActivationParameters ap){super(ap);
}}
