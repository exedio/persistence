/*
 * Copyright (C) 2004-2012  exedio GmbH (www.exedio.com)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package com.exedio.cope.sampler;

import static com.exedio.cope.SetValue.map;
import static com.exedio.cope.sampler.Util.maC;

import com.exedio.cope.EnumField;
import com.exedio.cope.IntegerField;
import com.exedio.cope.LongField;
import com.exedio.cope.SetValue;
import com.exedio.cope.StringField;
import com.exedio.cope.pattern.Composite;

final class SamplerThread extends Composite
{
	private static final long serialVersionUID = 1l;

	private static final LongField id  = new LongField().min(0);
	private static final StringField name = new StringField().optional();
	private static final IntegerField priority  = new IntegerField().range(Thread.MIN_PRIORITY, Thread.MAX_PRIORITY);
	private static final EnumField<Thread.State> state = EnumField.create(Thread.State.class);
	private static final StringField stackTrace = new StringField().optional().lengthMax(100000);

	static SamplerThread create(final Thread thread)
	{
		return thread!=null ? new SamplerThread(thread) : null;
	}

	private SamplerThread(final Thread thread)
	{
		this(
			map(id,       thread.getId()),
			maC(name,     thread.getName()),
			map(priority, thread.getPriority()),
			map(state,    thread.getState()),
			maC(stackTrace, toString(thread.getStackTrace())));
	}

	private static String toString(final StackTraceElement[] trace)
	{
		final StringBuilder bf = new StringBuilder();
		for(final StackTraceElement e : trace)
		{
			bf.
				append(e.getClassName()).
				append('.').
				append(e.getMethodName()).
				append(" (").append(e.getFileName()).
				append(':').
				append(e.getLineNumber()).append(")\n");
		}
		return bf.length()!=0 ? bf.toString() : null;
	}

	// TODO to be generated by the instrumentor
	private SamplerThread(final SetValue<?>... setValues)
	{
		super(setValues);
	}
}
