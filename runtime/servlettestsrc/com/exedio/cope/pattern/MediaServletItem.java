/*
 * Copyright (C) 2004-2012  exedio GmbH (www.exedio.com)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package com.exedio.cope.pattern;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;

import com.exedio.cope.Item;
import com.exedio.cope.StringField;
import com.exedio.cope.util.CharsetName;

final class MediaServletItem extends Item
	implements MediaUrlCatchphraseProvider
{
	/**
	 * @cope.initial
	 */
	static final StringField name = new StringField().optional();


	/**
	 * @cope.set internal
	 */
	@RedirectFrom({"contentAlt1", "contentAlt2"})
	static final Media content = new Media().optional();

	void setContent(final byte[] body, final String contentType, final int hour) throws ParseException
	{
		setContentInternal(body, contentType);
		setContentLastModified(hour);
	}

	void setContent(final InputStream body, final String contentType, final int hour) throws ParseException, IOException
	{
		setContentInternal(body, contentType);
		setContentLastModified(hour);
	}

	private void setContentLastModified(final int hour) throws ParseException
	{
		content.getLastModified().set(this,
			new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").
			parse("2010-08-11 " + new DecimalFormat("00").format(hour) + ":23:55.555"));
	}

	@SuppressWarnings("unused")
	private void suppressWarnings() throws IOException
	{
		setContentInternal((Media.Value)null);
		setContentInternal((File)null, (String)null);
	}


	@Deprecated()
	static final MediaRedirect redirect = new MediaRedirect(content);

	static final MediaThumbnail thumbnail = new MediaThumbnail(content, 150, 150);

	@Deprecated()
	static final MediaRedirect thumbnailRedirect = new MediaRedirect(thumbnail);

	static final MediaImageMagickThumbnail thumbnailMagick = new MediaImageMagickThumbnail(content, 150, 150);

	static final MediaImageMagickThumbnail thumbnailMagickPng = new MediaImageMagickThumbnail(content, 150, 150).outputContentType("image/png");

	static final MediaImageMagickThumbnail thumbnailMagickPngBlue = new MediaImageMagickThumbnail(content, 150, 150).outputContentType("image/png").flatten("blue");

	static final MediaImageMagickThumbnail thumbnailMagickSame = new MediaImageMagickThumbnail(content, 150, 150).outputContentTypeSame();

	static final TextUrlFilter html = new TextUrlFilter(
			content,
			"text/html", CharsetName.UTF8,
			"(", ")",
			new StringField(),
			new Media());

	@PreventUrlGuessing()
	static final MediaThumbnail tokened = new MediaThumbnail(content, 25, 25);

	@UrlFingerPrinting()
	static final MediaThumbnail finger = new MediaThumbnail(content, 150, 150);

	static final MediaNameServer nameServer = new MediaNameServer(name);


	static final StringField catchPhrase = new StringField().optional();

	public String getMediaUrlCatchphrase(final MediaPath path)
	{
		return getCatchPhrase();
	}


	MediaServletItem()
	{
		this((String)null);
	}

	/**

	 **
	 * Creates a new MediaServletItem with all the fields initially needed.
	 * @param name the initial value for field {@link #name}.
	 * @throws com.exedio.cope.StringLengthViolationException if name violates its length constraint.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tags <tt>@cope.constructor public|package|protected|private|none</tt> in the class comment and <tt>@cope.initial</tt> in the comment of fields.
	 */
	MediaServletItem(
				final java.lang.String name)
			throws
				com.exedio.cope.StringLengthViolationException
	{
		this(new com.exedio.cope.SetValue<?>[]{
			MediaServletItem.name.map(name),
		});
	}/**

	 **
	 * Creates a new MediaServletItem and sets the given fields initially.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.generic.constructor public|package|protected|private|none</tt> in the class comment.
	 */
	private MediaServletItem(final com.exedio.cope.SetValue<?>... setValues)
	{
		super(setValues);
	}/**

	 **
	 * Returns the value of {@link #name}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getName()
	{
		return MediaServletItem.name.get(this);
	}/**

	 **
	 * Sets a new value for {@link #name}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setName(final java.lang.String name)
			throws
				com.exedio.cope.StringLengthViolationException
	{
		MediaServletItem.name.set(this,name);
	}/**

	 **
	 * Returns a URL the content of {@link #content} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getURL public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getContentURL()
	{
		return MediaServletItem.content.getURL(this);
	}/**

	 **
	 * Returns a Locator the content of {@link #content} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLocator public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final com.exedio.cope.pattern.MediaPath.Locator getContentLocator()
	{
		return MediaServletItem.content.getLocator(this);
	}/**

	 **
	 * Returns the content type of the media {@link #content}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getContentType public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getContentContentType()
	{
		return MediaServletItem.content.getContentType(this);
	}/**

	 **
	 * Returns whether media {@link #content} is null.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.isNull public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final boolean isContentNull()
	{
		return MediaServletItem.content.isNull(this);
	}/**

	 **
	 * Returns the last modification date of media {@link #content}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLastModified public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.util.Date getContentLastModified()
	{
		return MediaServletItem.content.getLastModified(this);
	}/**

	 **
	 * Returns the body length of the media {@link #content}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLength public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final long getContentLength()
	{
		return MediaServletItem.content.getLength(this);
	}/**

	 **
	 * Returns the body of the media {@link #content}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getBody public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final byte[] getContentBody()
	{
		return MediaServletItem.content.getBody(this);
	}/**

	 **
	 * Writes the body of media {@link #content} into the given stream.
	 * Does nothing, if the media is null.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getBody public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void getContentBody(final java.io.OutputStream body)
			throws
				java.io.IOException
	{
		MediaServletItem.content.getBody(this,body);
	}/**

	 **
	 * Writes the body of media {@link #content} into the given file.
	 * Does nothing, if the media is null.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getBody public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void getContentBody(final java.io.File body)
			throws
				java.io.IOException
	{
		MediaServletItem.content.getBody(this,body);
	}/**

	 **
	 * Sets the content of media {@link #content}.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	private final void setContentInternal(final com.exedio.cope.pattern.Media.Value content)
			throws
				java.io.IOException
	{
		MediaServletItem.content.set(this,content);
	}/**

	 **
	 * Sets the content of media {@link #content}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	private final void setContentInternal(final byte[] body,final java.lang.String contentType)
	{
		MediaServletItem.content.set(this,body,contentType);
	}/**

	 **
	 * Sets the content of media {@link #content}.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	private final void setContentInternal(final java.io.InputStream body,final java.lang.String contentType)
			throws
				java.io.IOException
	{
		MediaServletItem.content.set(this,body,contentType);
	}/**

	 **
	 * Sets the content of media {@link #content}.
	 * @throws java.io.IOException if accessing <tt>body</tt> throws an IOException.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	private final void setContentInternal(final java.io.File body,final java.lang.String contentType)
			throws
				java.io.IOException
	{
		MediaServletItem.content.set(this,body,contentType);
	}/**

	 **
	 * Returns a URL the content of {@link #redirect} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getURL public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getRedirectURL()
	{
		return MediaServletItem.redirect.getURL(this);
	}/**

	 **
	 * Returns a Locator the content of {@link #redirect} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLocator public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final com.exedio.cope.pattern.MediaPath.Locator getRedirectLocator()
	{
		return MediaServletItem.redirect.getLocator(this);
	}/**

	 **
	 * Returns the content type of the media {@link #redirect}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getContentType public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getRedirectContentType()
	{
		return MediaServletItem.redirect.getContentType(this);
	}/**

	 **
	 * Returns a URL the content of {@link #thumbnail} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getURL public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getThumbnailURL()
	{
		return MediaServletItem.thumbnail.getURL(this);
	}/**

	 **
	 * Returns a Locator the content of {@link #thumbnail} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLocator public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final com.exedio.cope.pattern.MediaPath.Locator getThumbnailLocator()
	{
		return MediaServletItem.thumbnail.getLocator(this);
	}/**

	 **
	 * Returns a URL the content of {@link #thumbnail} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getURLWithFallbackToSource public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getThumbnailURLWithFallbackToSource()
	{
		return MediaServletItem.thumbnail.getURLWithFallbackToSource(this);
	}/**

	 **
	 * Returns the body of {@link #thumbnail}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final byte[] getThumbnail()
			throws
				java.io.IOException
	{
		return MediaServletItem.thumbnail.get(this);
	}/**

	 **
	 * Returns a URL the content of {@link #thumbnailRedirect} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getURL public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getThumbnailRedirectURL()
	{
		return MediaServletItem.thumbnailRedirect.getURL(this);
	}/**

	 **
	 * Returns a Locator the content of {@link #thumbnailRedirect} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLocator public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final com.exedio.cope.pattern.MediaPath.Locator getThumbnailRedirectLocator()
	{
		return MediaServletItem.thumbnailRedirect.getLocator(this);
	}/**

	 **
	 * Returns a URL the content of {@link #thumbnailMagick} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getURL public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getThumbnailMagickURL()
	{
		return MediaServletItem.thumbnailMagick.getURL(this);
	}/**

	 **
	 * Returns a Locator the content of {@link #thumbnailMagick} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLocator public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final com.exedio.cope.pattern.MediaPath.Locator getThumbnailMagickLocator()
	{
		return MediaServletItem.thumbnailMagick.getLocator(this);
	}/**

	 **
	 * Returns a URL the content of {@link #thumbnailMagick} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getURLWithFallbackToSource public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getThumbnailMagickURLWithFallbackToSource()
	{
		return MediaServletItem.thumbnailMagick.getURLWithFallbackToSource(this);
	}/**

	 **
	 * Returns the body of {@link #thumbnailMagick}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final byte[] getThumbnailMagick()
			throws
				java.io.IOException
	{
		return MediaServletItem.thumbnailMagick.get(this);
	}/**

	 **
	 * Returns a URL the content of {@link #thumbnailMagickPng} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getURL public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getThumbnailMagickPngURL()
	{
		return MediaServletItem.thumbnailMagickPng.getURL(this);
	}/**

	 **
	 * Returns a Locator the content of {@link #thumbnailMagickPng} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLocator public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final com.exedio.cope.pattern.MediaPath.Locator getThumbnailMagickPngLocator()
	{
		return MediaServletItem.thumbnailMagickPng.getLocator(this);
	}/**

	 **
	 * Returns a URL the content of {@link #thumbnailMagickPng} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getURLWithFallbackToSource public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getThumbnailMagickPngURLWithFallbackToSource()
	{
		return MediaServletItem.thumbnailMagickPng.getURLWithFallbackToSource(this);
	}/**

	 **
	 * Returns the body of {@link #thumbnailMagickPng}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final byte[] getThumbnailMagickPng()
			throws
				java.io.IOException
	{
		return MediaServletItem.thumbnailMagickPng.get(this);
	}/**

	 **
	 * Returns a URL the content of {@link #thumbnailMagickPngBlue} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getURL public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getThumbnailMagickPngBlueURL()
	{
		return MediaServletItem.thumbnailMagickPngBlue.getURL(this);
	}/**

	 **
	 * Returns a Locator the content of {@link #thumbnailMagickPngBlue} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLocator public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final com.exedio.cope.pattern.MediaPath.Locator getThumbnailMagickPngBlueLocator()
	{
		return MediaServletItem.thumbnailMagickPngBlue.getLocator(this);
	}/**

	 **
	 * Returns a URL the content of {@link #thumbnailMagickPngBlue} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getURLWithFallbackToSource public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getThumbnailMagickPngBlueURLWithFallbackToSource()
	{
		return MediaServletItem.thumbnailMagickPngBlue.getURLWithFallbackToSource(this);
	}/**

	 **
	 * Returns the body of {@link #thumbnailMagickPngBlue}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final byte[] getThumbnailMagickPngBlue()
			throws
				java.io.IOException
	{
		return MediaServletItem.thumbnailMagickPngBlue.get(this);
	}/**

	 **
	 * Returns a URL the content of {@link #thumbnailMagickSame} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getURL public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getThumbnailMagickSameURL()
	{
		return MediaServletItem.thumbnailMagickSame.getURL(this);
	}/**

	 **
	 * Returns a Locator the content of {@link #thumbnailMagickSame} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLocator public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final com.exedio.cope.pattern.MediaPath.Locator getThumbnailMagickSameLocator()
	{
		return MediaServletItem.thumbnailMagickSame.getLocator(this);
	}/**

	 **
	 * Returns the content type of the media {@link #thumbnailMagickSame}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getContentType public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getThumbnailMagickSameContentType()
	{
		return MediaServletItem.thumbnailMagickSame.getContentType(this);
	}/**

	 **
	 * Returns a URL the content of {@link #thumbnailMagickSame} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getURLWithFallbackToSource public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getThumbnailMagickSameURLWithFallbackToSource()
	{
		return MediaServletItem.thumbnailMagickSame.getURLWithFallbackToSource(this);
	}/**

	 **
	 * Returns the body of {@link #thumbnailMagickSame}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final byte[] getThumbnailMagickSame()
			throws
				java.io.IOException
	{
		return MediaServletItem.thumbnailMagickSame.get(this);
	}/**

	 **
	 * Returns a URL the content of {@link #html} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getURL public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getHtmlURL()
	{
		return MediaServletItem.html.getURL(this);
	}/**

	 **
	 * Returns a Locator the content of {@link #html} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLocator public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final com.exedio.cope.pattern.MediaPath.Locator getHtmlLocator()
	{
		return MediaServletItem.html.getLocator(this);
	}/**

	 **
	 * Returns a URL the content of {@link #html} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getURLWithFallbackToSource public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getHtmlURLWithFallbackToSource()
	{
		return MediaServletItem.html.getURLWithFallbackToSource(this);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.setRaw public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setHtmlRaw(final com.exedio.cope.pattern.Media.Value raw)
			throws
				java.io.IOException
	{
		MediaServletItem.html.setRaw(this,raw);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.addPaste public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final com.exedio.cope.pattern.TextUrlFilter.Paste addHtmlPaste(final java.lang.String key,final com.exedio.cope.pattern.Media.Value value)
	{
		return MediaServletItem.html.addPaste(this,key,value);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.modifyPaste public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void modifyHtmlPaste(final java.lang.String key,final com.exedio.cope.pattern.Media.Value value)
			throws
				java.io.IOException
	{
		MediaServletItem.html.modifyPaste(this,key,value);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.putPaste public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final com.exedio.cope.pattern.TextUrlFilter.Paste putHtmlPaste(final java.lang.String key,final com.exedio.cope.pattern.Media.Value value)
			throws
				java.io.IOException
	{
		return MediaServletItem.html.putPaste(this,key,value);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.putPastesFromZip public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void putHtmlPastesFromZip(final java.io.File file)
			throws
				java.io.IOException
	{
		MediaServletItem.html.putPastesFromZip(this,file);
	}/**

	 **
	 * Returns a URL the content of {@link #tokened} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getURL public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getTokenedURL()
	{
		return MediaServletItem.tokened.getURL(this);
	}/**

	 **
	 * Returns a Locator the content of {@link #tokened} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLocator public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final com.exedio.cope.pattern.MediaPath.Locator getTokenedLocator()
	{
		return MediaServletItem.tokened.getLocator(this);
	}/**

	 **
	 * Returns a URL the content of {@link #tokened} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getURLWithFallbackToSource public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getTokenedURLWithFallbackToSource()
	{
		return MediaServletItem.tokened.getURLWithFallbackToSource(this);
	}/**

	 **
	 * Returns the body of {@link #tokened}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final byte[] getTokened()
			throws
				java.io.IOException
	{
		return MediaServletItem.tokened.get(this);
	}/**

	 **
	 * Returns a URL the content of {@link #finger} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getURL public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getFingerURL()
	{
		return MediaServletItem.finger.getURL(this);
	}/**

	 **
	 * Returns a Locator the content of {@link #finger} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getLocator public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final com.exedio.cope.pattern.MediaPath.Locator getFingerLocator()
	{
		return MediaServletItem.finger.getLocator(this);
	}/**

	 **
	 * Returns a URL the content of {@link #finger} is available under.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.getURLWithFallbackToSource public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getFingerURLWithFallbackToSource()
	{
		return MediaServletItem.finger.getURLWithFallbackToSource(this);
	}/**

	 **
	 * Returns the body of {@link #finger}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final byte[] getFinger()
			throws
				java.io.IOException
	{
		return MediaServletItem.finger.get(this);
	}/**

	 **
	 * Returns the value of {@link #catchPhrase}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.get public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final java.lang.String getCatchPhrase()
	{
		return MediaServletItem.catchPhrase.get(this);
	}/**

	 **
	 * Sets a new value for {@link #catchPhrase}.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.set public|package|protected|private|none|non-final</tt> in the comment of the field.
	 */
	final void setCatchPhrase(final java.lang.String catchPhrase)
			throws
				com.exedio.cope.StringLengthViolationException
	{
		MediaServletItem.catchPhrase.set(this,catchPhrase);
	}/**

	 **
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	private static final long serialVersionUID = 1l;/**

	 **
	 * The persistent type information for mediaServletItem.
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 *       It can be customized with the tag <tt>@cope.type public|package|protected|private|none</tt> in the class comment.
	 */
	static final com.exedio.cope.Type<MediaServletItem> TYPE = com.exedio.cope.TypesBound.newType(MediaServletItem.class);/**

	 **
	 * Activation constructor. Used for internal purposes only.
	 * @see com.exedio.cope.Item#Item(com.exedio.cope.ActivationParameters)
	 * @cope.generated This feature has been generated by the cope instrumentor and will be overwritten by the build process.
	 */
	@SuppressWarnings("unused") private MediaServletItem(final com.exedio.cope.ActivationParameters ap){super(ap);
}}
