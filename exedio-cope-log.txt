
CHANGELOG for cope

This file lists all changes relevant for the user - especially all
API changes and new features recommended for most users. The log may
omit bug fixes.
The items are sorted inversely, i.e. the latest items are on top.

--------------------------------------------------------------------------
* access to MediaPaths via MediaServlet can be forbidden; see Media#withLocator and MediaThumbnail#withLocator
	copeconsole should be updated to version 7173 or newer - otherwise the media.html screen for MediaPaths using
	this feature will fail.
* ConnectProperties#getVaultAlgorithm() dropped.
	You may use BucketProperties#getAlgorithm() instead.
	This breaks backwards API compatibility, may cause compiler errors.
* VaultServiceParameters#getVaultProperties() dropped.
	You may use #getBucketProperties() instead.
	This breaks backwards API compatibility, may cause compiler errors.
* ConnectProperties: keys for Vault Trails can be set for each bucket individually as well.
	This affects vault.trail.[startLimit|fieldLimit|originLimit].
	Methods VaultProperties#getTrail[Start|Field|Origin]Limit() where dropped,
	may cause compiler errors.
* VaultFileService adds new properties probes:
	- AtomicMove
	- directory.AtomicMove
	- directory.AtomicMoveEmpty
	You MUST run these probes on all your deployed systems!
	That includes ALL nodes of any cluster.
* exedio-cope-instrument-annotations.jar is now available via a new Ivy configuration
  "instrument-annotations".
  You can now do the following:
  - add "instrument-annotations" to "compile-annotations" ivy configuration
  - remove any hard reference to
    "lib/instrument/exedio-cope-instrument-annotations.jar" from your build process
* VaultService interface modified.
	- getLength(String hash) dropped
	- put methods drop 3rd parameter VaultPutInfo info
	- probeGenuineServiceKey renamed to probeBucketTag
	This breaks backwards API compatibility, may cause compiler errors.
	You MUST update (if present in your project) copevault to rev>=143
	and servletvault to rev>=74.
* Vault Trails MUST be complete.
	From now on, DataField#getLength relies on the corresponding Vault Trail.
	Check in COPE Console tab "Data Vault Trail".
* Trailing spaces become significant on MySQL and hsqldb.
	Before, searching for field.equal("x ") did find "x ", but also "x  " and "x".
	The same when searching for field.equal("x   ") or field.equal("x").
	Now, field.equal("x ") finds just "x " and nothing else.
* Instrumentor enables serialAnnotation by default. Affects instrumented code.
	Use this parameter:
		<instrument serialAnnotation="false" ...
	to revert to previous default behaviour.
* servlet-api 4.0.1 required.
* Media#contentTypeSub (rarely used) stores contentType of total length 61
	by default.
	This breaks backwards API compatibility, changes semantics of this method.
	Affects database schema.
* DataField#startsWithIfSupported supports vault.
	Allows COPE Console tab "Media Types" to check medias in vault.
	Requires copeconsole rev>=7146 (recommended).
* Enum[Map|Set]Field do accept generic [Map|Set]:
	- EnumMapField implements Settable<Map> instead of Settable<EnumMap>
	- EnumSetField implements Settable<Set> instead of Settable<EnumSet>
	- EnumSetField#set accepts Set<? extends E> instead of EnumSet<E>
	This breaks backwards API compatibility, may cause compiler errors.
	Affects instrumented code.
* CompositeCondition constructors do forbid just one nested condition and
	nested CompositeConditions of the same Operator.
	This breaks backwards API compatibility, causes IllegalArgumentException.
	Constructors are deprecated since March 2015.
* Model#getTypeByItemID(String id) added.
* RangeField supports optionalFrom() and optionalTo().
* RangeField#isMandatory fixed - always returns true.
	RangeField#getInitialExceptions fixed - always contains MandatoryViolationException.
	A RangeField may store Range.valueOf(null, null), but never null.
	Affects instrumented code - constructor parameters for RangeFields with
	an optional borderTemplate change from @Nullable to @Nonnull and throw a
	MandatoryViolationException.
* Delete#delete supports paging set at parameter query (by calling Query#setPage[Unlimited]).
	This breaks backwards API compatibility, subtly changes semantics!
	So far, paging was ignored silently.
* Instrumentor uses possessive determiner "its" instead of contracted "it's" for finder javadoc.
	Affects instrumented code.
* VaultTransientService added in package com.exedio.cope.transientvault.
	Use it to replace a class VaultTestService in your project.
* StringFunction#equalIgnoreCase(StringFunction) added.
* MySQL 5.6 support dropped, new minimum requirement for MySQL is version 5.7.
	ConnectProperties keys
		- dialect.utf8mb4
		- dialect.smallIntegerTypes
		- dialect.longConstraintNames
	are no longer supported, but were forbidden to be used on MySQL 5.7
	and later anyway.

* MySQL Connector 8.2.0 required.
	- Fixes CVE-2023-22102.
	- Renames jar file from mysql-connector-java.jar to mysql-connector-j.jar.
* bugfix: CopyConstraint#check() did not report mismatches where one of the
	fields was null. Affects COPE Console tab "Copy Constraints".
* ConnectProperties: keys for a single vault bucket are dropped.
	Check your deployed systems!
	You must convert to the keys for multiple buckets. That means,
	keys "vault.service" (and their sub-keys) get a "default" between
	"vault" and "service".
	Thus:
		vault.service=com.exedio.cope.vault.VaultFileService
		vault.service.root=/var/lib/cope-vault
	becomes:
		vault.default.service=com.exedio.cope.vault.VaultFileService
		vault.default.service.root=/var/lib/cope-vault

* ConnectProperties: keys for multiple vault buckets are renamed.
	Check your deployed systems!
	* Key "vault.services" is renamed to "vault.buckets".
	* Keys "vault.service.my-bucket" (and their sub-keys) are renamed to
		"vault.my-bucket.service".
	Thus:
		vault.services=default other
		vault.service.default=com.exedio.cope.vault.VaultFileService
		vault.service.default.root=/var/lib/cope-vault
		vault.service.other=com.exedio.cope.vault.VaultFileService
		vault.service.other.root=/var/lib/other-cope-vault
	becomes:
		vault.buckets=default other
		vault.default.service=com.exedio.cope.vault.VaultFileService
		vault.default.service.root=/var/lib/cope-vault
		vault.other.service=com.exedio.cope.vault.VaultFileService
		vault.other.service.root=/var/lib/other-cope-vault

* VaultProperties#newService[s] return types narrowed from VaultService to
	VaultResilientService.
	This breaks backwards API compatibility. Causes compiler errors, if
	servletvault is used within your project. Then update servletvault to
	rev>=61.
* Ivy: dependency of servlet-api is not included in configuration 'runtime' anymore.
	To revert to previous behaviour, depend on new configuration 'servlet' instead.
* MoneyField#isCurrency[Fixed|Shared|Exclusive}() added.
* MoneyField#getAmountInt() added to replace moneyField.getAmount.getInt().
* Return type widened from LikeCondition to Condition at
	* CaseView#[startsWith|endsWith|contains]IgnoreCase
	* LikeCondition#[startsWith|endsWith|contains]
	* StringFunction#[startsWith|endsWith|contains][IgnoreCase]

	This breaks backwards API compatibility, causes compiler errors.
	You MUST update insightcope (if present in your project) to
	rev>=738 (wicket8) and rev>=1022 (wicket9).
	You MUST update copeview (if present in your project) to rev>=3086.

* class BindFunction and subclasses BindItemFunction, BindNumberFunction and
	BindStringFunction are no longer public. Therefore return type of
	Function#bind changes to super type.

	This breaks backwards API compatibility, causes compiler errors.
	You MUST update insightcope (if present in your project) to
	rev>=738 (wicket8) and rev>=1022 (wicket9).
	You MUST update copeview (if present in your project) to rev>=3086.

* @CopeCacheWeight dropped.
	Due to changes of the cache implementation, cache weighting is not required any more
	since Dec 2016. Use @CopeExternal (instead of @CopeCacheWeight(0)) to disable caching.
	This breaks backwards API compatibility, causes compiler errors.
* ConnectProperties: key "cache.item.globalLimit" no longer supported.
	Use "cache.item.limit" instead, which is supported all the while.
* bugfix: StringFunction#startsWith, #endsWith, and #contains do not
	consider special characters (percent and underscore) anymore.
	Fixes COPE-242.
	This breaks backwards API compatibility, subtly changes semantics!
* bugfix on hsqldb and MySQL 8:
	StringFunction#like (and therefore #startsWith, #endsWith, and #contains as well)
	supports escaping special characters (percent and underscore).
* StringFunction#startsWith, #endsWith, and #contains will fail for null parameter.
	Same for LikeCondition#startsWith, #endsWith, and #contains.
	This breaks backwards API compatibility, causes NullPointerException.
* Query#join[OuterLeft|OuterRight](Type,Function<Join,Condition>) added
	Code that calls Query#join[OuterLeft|OuterRight] and passes null as condition won't compile any more.
		Join j = query.joinOuterLeft(TYPE, null);
		j.setCondition(field.bind(j));
	Easiest fix is to just add a cast to Condition:
		Join j = query.joinOuterLeft(TYPE, (Condition)null);
		j.setCondition(field.bind(j));
	But in many cases you can make your code more readable by making use of the new methods:
		query.joinOuterLeft(TYPE, j -> field.bind(j));
* bugfix: Feature#getLocalizationKeys() fixes order of pattern source features.
	So far, the order of localization keys was:
		com.exedio.SomeComposite.someField
		SomeComposite.someField
		com.exedio.SomeItem.someCompositeField.someField
		SomeItem.someCompositeField.someField
		someField

	This fix moves the pattern instance before the abstract pattern:
		com.exedio.SomeItem.someCompositeField.someField
		SomeItem.someCompositeField.someField
		com.exedio.SomeComposite.someField
		SomeComposite.someField
		someField

* Instrumentor enables directSetValueMap by default. Affects instrumented code.
	Use this parameter:
		<instrument directSetValueMap="false" ...
	to enable previous behaviour.
* VaultHttpService properties: key "followRedirects" changes type from boolean
	to enum.
	Check your deployed systems! Probably this key is at its default (false),
	then you don't have to do anything. Otherwise replace:
		false -> NEVER
		true  -> ALWAYS
	Note, that ALWAYS may redirect from https to http. Consider using NORMAL
	instead.

* VaultHttpService properties: key "readTimeout" renamed to "requestTimeout".
	Check your deployed systems! Probably this key is at its default,
	then you don't have to do anything.
* VaultHttpService properties: key "useCaches" no longer supported.
	Check your deployed systems! Probably this key is at its default (false),
	then you don't have to do anything.
* VaultFileService properties: default of key "directory.posixPermissions"
	depends on the value of key "posixPermissions".

	This breaks backwards API compatibility, check your deployed systems!
	If "posixPermissions" is at its default or directory.posixPermissions
	is set explicitly you don't have to do anything.

* VaultFileService properties: key "directory.posixGroup" defaults to the value
	of key "posixGroup". Before, it defaulted to the empty string.

	This breaks backwards API compatibility, check your deployed systems!
	If both keys "posixGroup" and "directory.posixGroup" are at its default
	(probably they are) you don't have to do anything.

* ConnectProperties: key "vault.trail" no longer supported.
	Check your deployed systems! Probably this key is at its default (true),
	then you don't have to do anything.
* hsqldb 2.7.1 required.
	Fixes CVE-2022-41853, you may want to remove your dependency check suppression.
* JDK 11 required.
* Class-Path removed from jar manifest:
	- exedio-cope.jar drops "Class-Path: trove4j.jar exedio-cope-util.jar"
	- exedio-cope-instrument.jar drops "Class-Path: exedio-cope-instrument-annotations.jar exedio-cope.jar"
* ConnectProperties: key "schema.mysql.lower_case_table_names" no longer supported.
	Check your deployed systems! Probably this key is at its default,
	then you don't have to do anything.
* ConnectProperties: key cluster.listenDisableLoopback is renamed and negated.

	This breaks backwards API compatibility, check your deployed systems!
	If this property is at its default (probably it is) you don't have to do anything.

	Otherwise:
		cluster.listenDisableLoopback=true
	becomes:
		cluster.listenLoopback=false

* Info api requires micrometer registry.
	You must call io.micrometer.core.instrument.Metrics.globalRegistry.add(MeterRegistry)
	in your project (probably you do already). If you don't, counters exposed by info api
	will just stay at zero. This includes for example:
	- TransactionCounters#get*()
	- DataFieldVaultInfo#get*Count()
	- ChangeListenerInfo#getCleared(), #getRemoved(), #getFailed()
	- ChangeListenerDispatcherInfo#getOverflow(), #getException()
	- ItemCacheInfo#getHits(), #getMisses(), #getConcurrentLoads(), #getReplacementsL(),
		#getInvalidationsOrdered(), #getInvalidationsDone(), #getStampsHits(), #getStampsPurged()
	- QueryCacheInfo#getHits(), #getMisses(), #getReplacements(), #getInvalidations(),
		#getConcurrentLoads(), #getStampsHits(), #getStampsPurged()
	- ClusterSenderInfo#getInvalidationSplit()
	- ClusterListenerInfo#getException(), #getMissingMagic(), #getWrongSecret(), #getFromMyself()
	- MediaInfo#get*() except #getPath()
	- MediaPath#getNoSuchPath()
* DispatcherProperties#sessionLimit defaults to 15 instead of 100.
* Instrumentor uses activator. Affects instrumented code.
	Use this parameter:
		<instrument activator="false" ...
	to enable previous behaviour.
* bugfix: Vault Trails did not work with disableSupport.nativeDate=true.
* Schedule does not support Locale anymore.
	Constructor Schedule(TimeZone, Locale) and methods getLocale() and
	newGregorianCalendar() were dropped. Were deprecated since Jan 2017.
* ChangeEvent#getTransactionDuration() added.
* Aggregate becomes Function, Function#get becomes optional operation.
	This breaks backwards API compatibility, causes compiler errors.
* Vault Trails introduced.
	Does not affect you, if vaults are not enabled in your project.
	Otherwise, affects database schema, adds a new table for each vault service.
	To disable vault trails set ConnectProperties key:
		vault.trail=false
* Primary key columns are declared 'not null'.
	Does *not* affect database schema. Primary key columns are 'not null' regardless
	whether declared explicitly or not. You will get a huge diff in MainSchemaTestSchema.txt,
	but you don't have to patch the database schema.
* Instrumentor uses possessive determiner "its" instead of contracted "it's" for finder javadoc.
	Affects instrumented code.
* ConnectProperties: key "vault-short-key" no longer supported.
	Check your deployed systems! Probably this key is at its default,
	then you don't have to do anything.
* FeatureField#forbid(Class) added.
* [Type|Feature]Field#idLengthMax added.
* copeservletutil dependency dropped.
	Was redundant since r10333 (Mar 3 2020). You may want to drop
		<exclude org="com.exedio" module="copeservletutil" />
	from your cope dependency, if present.
* EnumMapField obeys defaults of value.
	This breaks backwards API compatibility:
	EnumMapField#create no longer drops default (defaultTo, defaultToNow,
	defaultToNext etc.) of parameter value.
* Money#compute[Double|Big] added.
	Allows arbitrary computations on amount written more concisely:
		radicand.computeDouble(Math::sqrt)
	instead of:
		Money.valueOf(Math.sqrt(radicand.doubleAmount(currency)), currency)
* EnumMapField#setMap supports maps created by Map.of available in JDK 11.
* Instrumentor supports wrapping nullable results into java.util.Optional (see Wrapper#nullableAsOptional)
* VaultFileService sets posix permissions for vault directories to rwx------.
	Check your deployed systems, whether this is what you want!
	If not, adjust the new property directory.posixPermissions. Up to now VaultFileService
	did not specify permissions, typically with laxer results.
* Use SetValue.EMPTY_ARRAY when generating code.
	Consider removing "<suppressWarnings><constructor>ZeroLengthArrayAllocation</constructor></<suppressWarnings>"
	from your build.xml.
	Affects instrumented code.
	Use this parameter:
		<instrument useConstantForEmptySetValuesArray="false" ...
	to enable previous behaviour.
* @DispatcherImmediateFinalFailure added.
	Dispatcher.Result enum gets new facet immediateFinalFailure with schema value -5.
	This affects database schema in check constraints of Dispatcher.Run.
* Choice Constraints do change their names: Customer.defaultAddressChoicecustomer
	becomes Customer.defaultAddressChoice.
* Added Contract annotations
	To get rid of compiler warnings for missing annotation classes, add dependency on cope configuration "idea" to your
	compile classpath (not runtime classpath).
* LimitedListField#create(FunctionField template, int maximumSize) makes
	list source fields optional. This allows LimitedListField to store lists
	shorter than maximumSize if template is mandatory.
	Affects database schema if and only if template is mandatory.
	If your template is currently optional, you probably want to change it to mandatory.
	Otherwise, you continue to allow the list to contain null as an element.
* Add nullability annotations to EnumSingleton.
	Affects instrumented code.
* UniqueHashedMedia promotes @Vault to Media.
	May affect database schema.
* Transaction#[is|set]QueryCacheDisabled added.
* @CopeSchemaName("") fixed for sourceTypes of Patterns.
	Affects database schema.
* MediaServlet customization methods do take Locator parameter instead of MediaPath and Item.
	This breaks backwards API compatibility. It causes compiler errors,
	if you have your @Override annotations in place.
* MediaServlet#doFlushBufferOnNotModified changes its default implementation
	from "true" to "false". This will break conditional requests on Tomcat earlier
	than version 8.5.14. In this case, override this method to return "true" again.
* MySQL 5.5 support dropped, new minimum requirement for MySQL is version 5.6.
* servlet-api 3.1.0 required (provided by Apache Tomcat 8.0.x).
* ConnectProperties: key dialect.fullSequenceColumnName no longer supported.
	This breaks backwards API compatibility on MySQL, check your deployed systems!
	Probably this key is at its default, then you don't have to do anything.
* MultiItemField#nullify() added.
* VaultFileService properties: key directory.createAsNeeded changed to
	directory.premised and *inverted its meaning*.

	This breaks backwards API compatibility, check your deployed systems!
	If this property is at its default (probably it is) you don't have to do anything.

* EnumSingleton added.
* Model#rollbackIfNotCommittedVerbosely() added.
* [Composite|Block]Type#forClass[Unchecked] and #as(Class) added.
* MultiItemField obeys @CopeName and @CopeSchemaName at classes set by #canBe(Class).
	Affects database schema.
* MediaUtil#setContentLengthLong added
* ConnectProperties: key "dataField.vault" becomes "vault".
	This applies to all sub-keys ("dataField.vault.*") as well.

	This breaks backwards API compatibility, check your deployed systems!
	If "dataField.vault" is false (thus vaults are disabled) you don't
	have to do anything.
	Set property "vault-short-key=false" to switch back to legacy key
	"dataField.vault". Then you don't have to change any other key.

* StringFunction#toLowerCase() added.
* Fix nullability annotation of DataField#getArray.
	Affects instrumented code.
* MediaUtil supports java.nio.file.Path.
	Promotes migration of client code away from java.io.File.
* ConnectProperties: key connection.isValidOnGetTimeoutSeconds accepts Duration.

	This breaks backwards API compatibility, check your deployed systems!
	If this property is at its default (probably it is) you don't have to do anything.

	Otherwise:
		connection.isValidOnGetTimeoutSeconds=5
	becomes:
		connection.isValidOnGetTimeout=PT5S

* Dispatcher#createWithSession added.
* Dispatcher#create methods do not support parameter deferrer anymore. Accordingly
	Dispatchable#isDeferred is removed. Throw a DispatchDeferredException
	from the dispatch method instead.
	This breaks backwards API compatibility, causes compiler error.
* ConnectProperties: key cluster.sendDestinationPort merged into cluster.sendAddress.
	If sendDestinationPort is at its default you don't have to do anything.

	Otherwise:
		sendAddress=224.0.0.55
		sendDestinationPort=14464
	becomes:
		sendAddress=224.0.0.55:14464

	This breaks backwards API compatibility, check your deployed systems!
* ConnectProperties: keys cluster.sendInterface, cluster.sendAddress,
	cluster.listenAddress, and cluster.listenInterface are not allowed to be
	empty anymore.
	This breaks backwards API compatibility, check your deployed systems!
	Up to now an empty value was equivalent to localhost.
* Composite supports CheckConstraints.
* Composite#set(SetValue...) added.
* Query#setSearchSizeLimit triggers a SearchSizeLimitExceededException instead of
	just an IllegalStateException. Makes it easier to catch.
	SearchSizeLimitExceededException is a subclass of IllegalStateException.
* Enum[Map|Set]Field#is[Not]Empty() added
* MediaRedirect no longer supported, use @RedirectFrom instead.
	Was deprecated since Mar 1 2010.
	You MUST update copeconsole (if present in your project) to rev>=7051.
* Query#exists() supported, is faster than #total()
* PartOf does not add order as source anymore.
	This breaks backwards API compatibility:
	Result of partOf.getOrder().getPattern() becomes null and result of
	partOf.getSourceFeatures() does not contain partOf.getOrder() anymore.
* MediaType.STL added
* ConnectProperties keys cluster.sendAddress and cluster.listenAddress change
	their default from 230.0.0.1 to 224.0.0.50.
* @com.exedio.cope.instrument.Generated replaces @javax.annotation.Generated("com.exedio.cope.instrument").
	Heavily affects instrumented code!
	Use this parameter:
		<instrument javaxAnnotationGenerated="true" ...
	to enable previous behaviour.
* Feature#getSuspicions() added.
* bugfix: for*Strict finders for fields of primitives added.
	Affects instrumented code.
	To disable the new finders, adapt your <instrument> call:
	<instrument ...>
		<disableWrap>com.exedio.cope.BooleanField#searchUniqueStrict(java.lang.Class,boolean)</disableWrap>
		<disableWrap>com.exedio.cope.IntegerField#searchUniqueStrict(java.lang.Class,int)</disableWrap>
		<disableWrap>com.exedio.cope.LongField#searchUniqueStrict(java.lang.Class,long)</disableWrap>
		<disableWrap>com.exedio.cope.DoubleField#searchUniqueStrict(java.lang.Class,double)</disableWrap>
	</instrument>
* com.exedio.cope.misc.CopeFilter removed, not used by projects anymore.
* @CopeSchemaType removed, unsupported since Aug 30 2011.
* Pattern#initialize() no longer supported, use #onMount() instead.
	Was deprecated since Dec 7 2009,
* JavaView supports method references additionally to reflection. Use JavaView#create.
* JavaView#get omits wrapping InvocationTargetException/RuntimeException if
	targetException is RuntimeException.
* Query#getSelects() added.
* The instrumentor no longer supports parameter "encoding". Use "charset" instead.
* bugfix: JavaView#getValue[Generic]Type returns wrapper classes instead of primitives.
	This fixes copaiba with primitive return type of JavaView getter method.
* SamplerProperties: keys purgeDays.* renamed to purge.* and expect
	Duration instead of integer.
	This breaks backwards API compatibility, check your deployed systems!
	If these keys are at their defaults you don't have to do anything.
* DispatcherPurgeProperties: keys retainDays.[success|finalFailure] renamed to
	retain.[success|finalFailure] and expect Duration instead of integer.
	This breaks backwards API compatibility, check your deployed systems!
	If these keys are at their defaults you don't have to do anything.
* Instrumentor handles MultiItemField (item constructor; wrappers for #get and #set).
	Affects instrumented code.
* Media#contentType(..) with >1 parameter is deprecated. Use Media#contentTypes(..) instead.
* Public constructors of UniqueConstraint are deprecated. Use UniqueConstraint#create instead.
* PartOf#getPartsQuery added.
* The instrumentor no longer supports
	<instrument suppressUnusedWarningOnPrivateActivationConstructor="true" ... />
	which is now always "false".
* The instrumentor generates body of generic constructor on a single line.
	Affects instrumented code.
	Use this parameter:
		<instrument genericConstructorOneline="false" ...
	to enable previous behaviour.
* SchemaView added.
* The instrumentor converts <tt>...</tt> to {@code ...}.
	Fixes javadoc failure on jdk 11.0.1: tag not supported in the generated HTML version: tt.
	Affects instrumented code.
	Use this parameter:
		<instrument convertTT2Code="false" ...
	to enable previous behaviour.
* ConnectProperties#getDialectUrlMappers added.
* DataField supports java.nio.file.Path getter.

	Promotes migration of client code away from java.io.File.

	Affects instrumented code.
	To disable the new setter, adapt your <instrument> call:
	<instrument ...>
		<disableWrap>com.exedio.cope.DataField#get(com.exedio.cope.Item,java.nio.file.Path)</disableWrap>
		<disableWrap>com.exedio.cope.pattern.Media#getBody(com.exedio.cope.Item,java.nio.file.Path)</disableWrap>
	</instrument>

* VaultService#get(String,OutputStream) requires sink not to be closed or flushed.
	Specifies VaultService interface more precisely.
* MediaType.WEBP added.
* SamplerProperties: key was renamed from transactionDurationSeconds to
	transactionDuration and takes a Duration instead of seconds.
	This breaks backwards API compatibility, check your deployed systems!
	Probably this key is at its default, then you don't have to do anything.
* MediaServlet#getMaximumAge added.
	If you want to change ConnectProperties key media.offsetExpires without
	reconnecting, override the new method with:

		return MainProperties.get().cope.getMediaServletMaximumAge();

* CompositeType#get(Class) and #newValue added.
* ConnectProperties#factory()#revisionTable() added.
* The instrumentor generates classWildcard inner classes.
	Affects instrumented code.
	Use this parameter:
		<instrument wildcardClass="false" ...
	to enable previous behaviour.

	The generated code may trigger findbugs warnings. Put the following snippet
	into your excludeFilter to ignore them:
		<Match>
			<!-- The class name SomeItem$classWildcard doesn't start with an upper case letter -->
			<Bug pattern="NM_CLASS_NAMING_CONVENTION" />
			<Class name="~.*\$classWildcard$" />
		</Match>

* The instrumentor does not qualify wildcard class in type constant anymore.
	Fixes idea inspection: Unnecessarily qualified inner class access.
	Affects instrumented code.
	Use this parameter:
		<instrument wildcardClassFullyQualified="true" ...
	to enable previous behaviour.
* The instrumentor makes private methods non-final.
	Fixes idea inspection: 'private' method declared 'final'.
	Affects instrumented code.
	Use this parameter:
		<instrument privateMethodFinal="true" ...
	to enable previous behaviour.
* The instrumentor makes initial constructor protected if class is abstract.
	Fixes idea inspection: 'public' constructor in 'abstract' class.
	Affects instrumented code.
	Use this parameter:
		<instrument publicConstructorInAbstractClass="true" ...
	to enable previous behaviour.
* require mysql connector 8.0.13

	BEWARE: class com.mysql.jdbc.AbandonedConnectionCleanupThread has been moved
	to package com.mysql.cj.jdbc. Probably you have to adapt your code. Since
	mysql connector 5.1.45 it is strongly recommended to call
	AbandonedConnectionCleanupThread#checkedShutdown() in
	ServletContextListener#contextDestroyed (see further down this file).

* QueryCacheInfo#getStamps[Size|Hits|Purged]() added.
* bugfix in instrumentor: 'package protected' is "more private" than 'protected'
	Affects instrumented code: constructor covering features that are 'protected'
	and 'package protected', but not 'private' will become 'package protected'
	rather than 'protected'.
* The instrumentor no longer supports
	<instrument differentSerialVersionUIDForAbstract="false" ... />
	which is now always "true".
* ColorField implements ColorFunction, amends: ColorField#bind added.
* FactoryProperties added.
* Dispatcher.Run#remaining and #limit added.
	Affects database schema, adds columns to table of Dispatcher.Run type.
	For previous behaviour use: new Dispatcher().withoutRemaining().

	When fixing database schema be aware that values for #limit must be at least 1!
	Fixing database schema for a dispatcher Mail.send could look like this on MySQL:

	ALTER TABLE `Mail_send_Run`
		ADD COLUMN `remaining` int not null DEFAULT 999 AFTER `elapsed`,
		ADD COLUMN `limit`     int not null DEFAULT   5 AFTER `remaining`

	ALTER TABLE `Mail_send_Run`
		ALTER COLUMN `remaining` DROP DEFAULT,
		ALTER COLUMN `limit`     DROP DEFAULT

	Note that value '5' for limit comes from Dispatcher.Config#failureLimit,
	you may have configured a different value.

* The instrumentor no longer supports
	<instrument serialVersionUID="false" ... />
	which is now always "true".
* com.exedio.dsmf.Schema forbids calling a number of methods after becoming
	verified via Schema#verify():
		create()
		create(StatementListener)
		drop()
		drop(StatementListener)
		tearDown()
		tearDown(StatementListener)
		createConstraints  (EnumSet<Constraint.Type>)
		createConstraints  (EnumSet<Constraint.Type>, StatementListener)
		dropConstraints    (EnumSet<Constraint.Type>)
		dropConstraints    (EnumSet<Constraint.Type>, StatementListener)
		tearDownConstraints(EnumSet<Constraint.Type>)
		tearDownConstraints(EnumSet<Constraint.Type>, StatementListener)
	Check, whether your code calls one of these methods (probably not).
* VaultPutInfo#getOrigin added.
* VaultService#purgeSchema added.
* Transaction#getInvalidationSize() added.
* bugfix: UpdateCounter (column "catch") wraps to zero after reaching maximum.
* DataField supports java.nio.file.Path.

	Promotes migration of client code away from java.io.File.

	This breaks backwards API compatibility of the Vault API.
	May cause compiler errors and/or java.lang.NoSuchMethodError on runtime,
	if vaults are used within your project.
	You MUST update copevault (if present in your project) to rev>=61.

	Affects instrumented code.
	To disable the new setter, adapt your <instrument> call:
	<instrument ...>
		<disableWrap>com.exedio.cope.DataField#set(com.exedio.cope.Item,java.nio.file.Path)</disableWrap>
		<disableWrap>com.exedio.cope.pattern.Media#set(com.exedio.cope.Item,java.nio.file.Path,java.lang.String)</disableWrap>
	</instrument>

* EnumMapField omits instrumented setters if final.
	Affects instrumented code.
* DayField constrains value range to between Jan 1st, 1600 and Dec 31st, 9999.
	This heavily affects database schema, except on MySQL.
* Jar files for dialects split off exedio-cope.jar.
	At least one of exedio-cope-[hsqldb|mysql|oracle|postgresql].jar is needed at runtime.
* ColorField#bind added.
* The instrumentor no longer uses an interpreter, but now extracts a selection of the source code (called "interim code")
	and compiles that. Interim code includes:
	* classes that inherit a @WrapType annotation (i.e. items, composites and blocks)
	* in these, static variables whose type has a @WrapFeature annotation
	* classes, variables and methods that have a @WrapInterim annotation
	* classes and enums that are part of the type of interim variables
	* interface implemenation relations where the interface has a @WrapImplementsInterim annotation
	Interim code must compile without the rest of the project code. Use @WrapInterim and @WrapImplementsInterim to add
	code.
	This removes the instrument-time dependency on bsh.core.
* Access to ignored fields (annotated with @WrapperIgnore) in feature initialization no longer supported.
	Use @Wrapper(wrap="*", visibility=NONE) instead.
* EnvironmentInfo#getDriverClass added.
* Hash#getPlainTextValidator added.
* Choice constraint added.
	Implements the "default address" scenario using copy constraints.
	Call ItemField#choice to create a choice constraint.
	Breaks backwards API compatibility of CopyConstraint#getCopy(),
	if choice constraints are present within your model.
	Then updates of copeview and outliner are required.
* drop support for instrumentor control via javadoc tags
	* to upgrade a project that uses tags, first upgrade cope to build 9741
	* these instrumentor parameters that are no longer supported:
		* configByTags (now always "ignore")
		 (the below were only supported for configByTags="support":)
		* hintFormat (now always "forAnnotations")
		* longJavadoc (now always "true")
		* finalArgs (now always "true")
		* genericSetValueArray (now always "true")
		* parenthesesOnEmptyMemberAnnotations (now always "false")
		* deprecatedFullyQualified (now always "true")
		* overrideOnSeparateLine (now always "true")
* Price and Money now offer grossToTaxPercent(double)
* Singleton creates check constraint.
	This affects database schema, except on MySQL.
* @Computed gets a new specification.
* Generate getValid*Token for PasswordRecovery to get a valid token for postponed redemption
	Affects instrumented code.
	To disable the new getter, adapt your <instrument> call:
	<instrument ...>
		<disableWrap>com.exedio.cope.pattern.PasswordRecovery#getValidToken(com.exedio.cope.Item,long)</disableWrap>
	</instrument>
* Change Javadoc of PasswordRecovery#redeem
	This affects instrumented code
* ChangeHook added.
* MySQL supports nativeDate.
	This heavily affects database schema on MySQL. Use Factory#disableNativeDate()
	or disableSupport.nativeDate=true in ConnectProperties to revert to previous
	behaviour.
	For converting a database schema use SQL like this:

		SET time_zone = '+00:00'; -- UTC needed for from_unixtime
		ALTER TABLE `SomeTable` CHANGE `someDate` `someDateOld` bigint;
		ALTER TABLE `SomeTable` ADD COLUMN `someDate` datetime(3) AFTER `someDateOld`; -- use "datetime(3) not null" if field is mandatory, but with DEFAULT clause, otherwise it fails with "Data truncation: Incorrect datetime value: '0000-00-00 00:00:00' for column 'someDate'"
		UPDATE      `SomeTable` SET `someDate`=IF(`someDateOld` IS NULL,NULL,DATE_ADD(from_unixtime(0),INTERVAL `someDateOld`/1000 SECOND));
		ALTER TABLE `SomeTable` DROP COLUMN `someDateOld`; -- you may want to omit this to keep the old data for some time

* require mysql connector 5.1.45

	BEWARE: Within a web application, the new mysql connector may cause the
	following warning on shutdown (tomcat 8.5.14):

		org.apache.catalina.loader.WebappClassLoaderBase.clearReferencesThreads
		The web application [myapp] appears to have started a thread named
		[Abandoned connection cleanup thread] but has failed to stop it.
		This is very likely to create a memory leak. Stack trace of thread:
			java.lang.Object.wait(Native Method)
			java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:143)
			com.mysql.jdbc.AbandonedConnectionCleanupThread.run(AbandonedConnectionCleanupThread.java:64)
			java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
			java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
			java.lang.Thread.run(Thread.java:748)

	This may be fixed with the following piece of code in
	javax.servlet.ServletContextListener#contextDestroyed:

		com.mysql.jdbc.AbandonedConnectionCleanupThread.checkedShutdown();

	You may want to use reflection, if mysql connector is not available on compile time:

		Class.forName("com.mysql.jdbc.AbandonedConnectionCleanupThread").
			getDeclaredMethod("checkedShutdown").
			invoke(null);

	If you update straightly to mysql connector 8.0.13 you have to use class
	com.mysql.cj.jdbc.AbandonedConnectionCleanupThread instead.

* Media#setLastModified added.
* DateField creates check constraints for value range if native dates are supported.
	This heavily affects database schema, except on MySQL.
* hsqldb 2.4.0 required, instead of 2.2.9
* DateField constrains value range to between Jan 1st, 1600 and Dec 31st, 9999.
	Affects database schema, check constraints do become stricter.
* The instrumentor now uses a directory for internal files. It is configurable as <instrument> parameter 'buildDirectory'
	and defaults to "build/<name_of_ant_target>".
	<instrument> parameter 'timestampFile' is no longer required. Please remove from your build.xml. The instrumentor
	will now always use a timestamp file.
* VaultService#put takes VaultPutInfo.
	This breaks backwards API compatibility of the Vault API.
	May cause compiler errors and/or java.lang.NoSuchMethodError on runtime,
	if vaults are used within your project.
	You MUST update copevault (if present in your project) to rev>=42.
* bugfix: EnumMapField#fallback fixes @Nonnull/@Nullable.
	Affects instrumented code.
* ivy conf "junit" dropped (for exedio-cope-junit.jar)
* Collection fields (ListField, SetField, MapField) support copy constraints on their elements
	see ListField#copyWith, SetField#copyWith, MapField#copyKeyWith, MapField#copyValueWith
	Adding copy constraints to existing collections changes the database schema.
* SchemaInfo#search/total fixed for condition==false / limit==0
* ConnectProperties: renamed several keys:

	schema.mysql.utf8mb4                -> dialect.utf8mb4
	schema.mysql.smallIntegerTypes      -> dialect.smallIntegerTypes
	schema.mysql.longConstraintNames    -> dialect.longConstraintNames
	schema.mysql.fullSequenceColumnName -> dialect.fullSequenceColumnName
	schema.mysql.rowFormat              -> dialect.rowFormat
	schema.mysql.avoidTruncate          -> dialect.avoidTruncate

	This breaks backwards API compatibility, check your deployed systems!
	Field values do affect MySQL only.

* ConnectProperties: renamed key:
	connection.postgresql.search_path -> dialect.search_path
	Field value affects Postgresql only.
* SetField supports order - SetField#ordered() added.
* Generate for*Strict finders for unique constraints and unique function fields.
	Affects instrumented code.
	To disable the new finders, adapt your <instrument> call:
	<instrument ...>
		<disableWrap>com.exedio.cope.UniqueConstraint#searchStrict(java.lang.Class,[Ljava.lang.Object;)</disableWrap>
		<disableWrap>com.exedio.cope.FunctionField#searchUniqueStrict(java.lang.Class,java.lang.Object)</disableWrap>
	</instrument>
* The instrumentor can be configured to ignore specific feature wraps.
	Example:
	<instrument ...>
		<disableWrap>com.exedio.cope.UniqueConstraint#search(java.lang.Class,[Ljava.lang.Object;)</disableWrap>
	</instrument>
* ConnectToken#setProperties(Model,Supplier) added.
* ConnectToken#removePropertiesVoid added.
* VaultNotFoundException#anonymiseHash and #getHashAnonymous added.
* VaultService#close added.
* @VaultServiceProperties replaced by @ServiceProperties.
	This extensively breaks backwards API compatibility of the recently introduced Vault API (Jun 2 2017),
	causes compiler errors.
* Fixed wrong nullability info for MoneyField#get:
	The wrapping get-methods for mandatory MoneyFields were incorrectly annotated as @Nullable, now fixed to @NonNull.
	Affects instrumented code.
* The instrumentor no longer generates deprecated wrapping methods for deprecated feature methods.
	To keep individual methods, you can whitelist them in your build.xml.
	Class and parameter type names have to be given in the syntax of Class#getName - that means an
	Object[] parameter has to be specified as "[Ljava.lang.Object;".
	Example:
	<instrument ...>
		<generateDeprecated>com.exedio.cope.pattern.PasswordRecovery#purge(com.exedio.cope.util.Interrupter)</generateDeprecated>
		<generateDeprecated>com.exedio.cope.pattern.Dispatcher#dispatch(java.lang.Class,com.exedio.cope.pattern.Dispatcher$Config,com.exedio.cope.util.Interrupter)</generateDeprecated>
	</instrument>
	Affects instrumented code.
* support @Wrapper(parameters={...}) for better control of generated code
* ListField#removeAll added.
	Affects instrumented code.
* VaultFileService changes its file layout to support a directory structure.
	Use dataField.vault.service.directory=false in ConnectProperties to
	revert to previous behaviour.
* Ivy configuration 'instrument' is applied to dependency beanshell.
* The instrumentor now assigns a different serialVersionUID to item classes that are abstract.
  To disable this feature, set <instrument ... differentSerialVersionUIDForAbstract="false">.
  Changing the serialVersionUID breaks serialization compatibility - projects might want to keep
  differentSerialVersionUIDForAbstract disabled until a release that breaks session
  serialization anyway.
* StringField#hashMatches/hashDoesNotMatch added.
* Dispatcher#purge supports restriction.
	Affects instrumented code.
* DispatcherPurgeProperties: rename keys delayDays[Success|FinalFailure] to
	retainDays[Success|FinalFailure].
	This breaks backwards API compatibility, check your deployed systems!
	If these keys are at their defaults you don't have to do anything.
* Ivy configuration 'instrument' added.
	Instrumentor is not included in configuration 'runtime' anymore.
* Return type of several methods is weakened from "List<Abc>" to "List<? extends Abc>":
	- Type#getSubtypes[Transitively]
	- Type#get[Declared]Features
	- Type#get[Declared]Fields
	- Type#get[Declared]UniqueConstraints
	- Type#get[Declared]CheckConstraints
	- Type#get[Declared]CopyConstraints
	- [Composite|Block]Field#get[Templates|Components]
	This breaks backwards API compatibility, causes compiler error.
* Enum[Set|Map]Field supports @CopeName for enum facets.
	Affects database schema if you already have such annotations.
* CompositeType and CompositeField#getValueType() added.
* UniqueHashedMedia changes its default digest from MD5 to SHA-512.
	Affects database schema - you have to recompute all hashes.
	For previous behaviour use: new UniqueHashedMedia(media, "MD5")
* StringFields with a char set allowing non-ASCII characters now get a check constraint on MySQL, verifying that the
	data does not contain forbidden ASCII characters (characters > \u007F still don't get checked).
	No impact on database schema, or Java-level checks of charsets.
	Constraint checks that are started manually from COPE console can now detect additional errors.
* MediaPathes with @PreventUrlGuessing do change their url pattern:

	/media/Product/image/Product-42.jpg?t=abcdef0123456789abcd becomes
	/media/Product/image/.tabcdef0123456789abcd/Product-42.jpg

	BEWARE: Old urls will receive a http response "404 Not Found". You may want
	to setup a rewrite rule in apache etc. From now on media urls do not use query
	strings anymore.

* @PreventUrlGuessing/@UrlFingerPrinting can be applied to types as well.
* RevisionStatistics#getExplicitTypes and #isContainedIn added.
* Attribute <instrument configByTags changes its default from "warn" to "error".
	This attribute is to be removed in the near future, so you may want to remove
	it from your build script.
* item cache is now global (rather than split into separate segments for each type)
  * @CopeCacheWeight is no longer applicable, and therefore deprecated;
    use @CopeExternal instead of @CopeCacheWeight(0) to disable caching of a type
  * reconsider cache limits:
    With the same limit, the global cache will end up having more entries (and
    using more memory) than the per-type cache.
    Cache limit is now controlled by property "cache.item.globalLimit", which falls
    back to the old "cache.item.limit".
* ConnectProperties: renamed several keys:

	changeListeners.threads     -> changeListeners.threads.initial
	changeListeners.threadsMax  -> changeListeners.threads.max
	changeListeners.prioritySet -> changeListeners.threads.priority.set
	changeListeners.priority    -> changeListeners.threads.priority.value
	cluster.listenThreads       -> cluster.listen.threads.initial
	cluster.listenThreadsMax    -> cluster.listen.threads.max
	cluster.listenPrioritySet   -> cluster.listen.threads.priority.set
	cluster.listenPriority      -> cluster.listen.threads.priority.value

	This breaks backwards API compatibility, check your deployed systems!
	Probably these keys is at their defaults, then you don't have to do anything.

* ConnectProperties: key "dialect" changes its meaning.
	This breaks backwards API compatibility, check your deployed systems!
	Probably this key is at its default, then you don't have to do anything.
* ConnectToken becomes AutoCloseable
* @CopeExternal can be used to mark types whose instances are modified by other systems;
	disables item and query cache for that type;
	consider replacing @CopeCacheWeight(0) with @CopeExternal
* ModelBuilder#name added.
* dsmf.Column#getCumulativeColor considers Column#getConstraints()
* cleaner instrument classpath handling:
  * <taskdef> classpath: COPE libs (and required libs)
  * <instrument> classpath: project-specific feature classes (and required libs)
  -> in projects, the <taskdef> usually does not depend on any compilation
* QueryCacheInfo#getConcurrentLoads added.
* instrumentor supports importing item types from classpath
* dsmf.Column#getExistingType() added.
* exedio-cope-instrument-completion.jar (get via ivy conf "completion") provides
	code completion for Netbeans IDE
* ConnectToken#returnOnFailureOf added.
* support @Wrapper(wrap="*")
* Instrumentor omits fields from initial constructor, that are completely redundant,
	because they are covered by a CopyConstraint with a mandatory target.
	Use @WrapperInitial to enforce previous behaviour.
* MoneyField#exclusive creates unison check constraint if optional.
	This requires modification of database schema where check constraints
	are supported (not MySQL), if not, check unsupported constraints in cope console.
* @WrapperInitial(false) can be used to mark features as _non_-initial
* util.CopeFilter removed, was deprecated since Dec 9 2009, use misc.CopeFilter instead.
* @WrapperIgnore can be used at class level
* exedio-cope-src.zip contains sources for exedio-cope-instrument-annotations.jar
* The hints added to generated code changed, both in content (now hint to control via
	annotations) and formatting (now add whitespace between generated elements).
	Use this parameter:
		<instrument hintFormat="forTags" ...
	to enable previous behaviour - new default is "forAnnotations".
	(Switching back from "forAnnotations" to "forTags" is not supported - adds empty lines.)
* Instrumentor is now controlled via annotations, instead of javadoc tags.

	javadoc tag                       | annotation
	----------------------------------+---------------------------------
	/**                               | @WrapperType(
	 * @cope.type none                |   type=NONE,
	 * @cope.constructor none         |   constructor=NONE,
	 * @cope.generic.constructor none |   genericConstructor=NONE,
	 * @cope.indent 2                 |   indent=2
	 */                               | )
	/**                               |
	 * @cope.ignore                   | @WrapperIgnore
	 * @cope.initial                  | @WrapperInitial
	 * @cope.methodName ...           | @Wrapper(wrap="methodName", ...)
	 */

	<instrument configByTags="support|warn|error|ignore|convertToAnnotations"> (default is "warn")
	Steps for migrating from tags to annotations:
	1. <instrument configByTags="support"> - verify that everthing works as before
	2. <instrument configByTags="convertToAnnotations"> - run once to get tags auto-transformed into annotations; review code changes
	3. <instrument configByTags="error"> - if necessary, manually convert tags that have not been auto-transformed
	Legacy support for tags and the conversion tool ends after cope build 9741.
* bugfix: in instrumentor tags "internal" together with "package", "protected",
	or "public" does work now. Before, "internal" methods always became private.
* dsmf.Column#getConstraints() added.
* dsmf.Sequence#getType() added.
* Dispatcher.Result added
	Dispatcher#getRunSuccess() replaced by getRunResult()
	This breaks backwards API compatibility, causes compiler error.
* bugfix: wrong column type for EnumField with negative @CopeSchemaValue.
	Affects database schema.
* Instrumentor parameter default changed. For previous behaviour set:
	<instrument ... parenthesesOnEmptyMemberAnnotations="true">
* @WrapFeature moved from Pattern to its subclasses.
	Add @WrapFeature to your own patterns, otherwise instrumentor will not work anymore.
	You may remove @cope.ignore from MultiItemField.
* Class com.exedio.cope.instrument.Wrapper removed.
	This breaks backwards API compatibility, causes compiler errors.
* Instrumentor determines whether an element (method or field) has been generated
  by annotation @Generated rather than javadoc tag @cope.generated.
  (makes no difference unless you still use <instrument annotateGenerated="false"/>)
* Instrumentor is now based on Javac. This allows full use of generics and
	annotation syntax in code that gets parsed.
	This disables some bugs of the old, custom implementation - noteably, Java
	source tokens after annotations without parentheses were dropped. Also, the
	old implementation tolerated javadoc between annotations and field/method
	(must be javadoc - annotations - field/method).
	The instrumentor now needs to get access to libraries and the full source
	code that's being compiled. Adapt your instrumentor call:
	Old:
		<instrument>
			<fileset dir="src/my/package">
				<include name="SomeItem.java>
			</fileset>
			<fileset dir="additionalsrc/my/otherpackage">
				<include name="Foo.java>
			</fileset>
		</instrument>
	New - easy migration:
		<instrument dir="src:additionalsrc">
			<classpath refid="compile.lib" /> <!-- same as used for compiling -->
			<dontignore>
				... <!-- move old 'fileset' configuration here -->
			</dontignore>
		</instrument>
	New - more compact form, especially since generics etc no longer have to be avoided:
		<instrument dir="src:additionalsrc">
			<classpath refid="compile.lib" /> <!-- same as used for compiling -->
			<ignore>
				<fileset dir="src" includes="my/package/shop/**/*.java"/>
			</ignore>
		</instrument>
	If using jspms, make sure the jspm compiler runs before the instrumentor.
* AverageAggregate always returns double instead source type.
	This breaks backwards API compatibility.
* ExtremumAggregate/SumAggregate/AverageAggregate move from package
	com.exedio.cope.search to com.exedio.cope.
	This breaks backwards API compatibility.
	requires copelive >= #242, copeview >= #2038
* EnumMapField#fallbackTo(K) and #fallback() added.
* bugfix: getter results became unmodifiable in com.exedio.dsmf for
	Schema#getTables(), #getSequences(), Table#getColumns(), and #getConstraints().
	This breaks backwards API compatibility.
* Constraint names can use up to 60 characters instead of just 25.
	This heavily affects database schema.
	Use schema.mysql.longConstraintNames=false in ConnectProperties to
	revert to previous behaviour on MySQL.
* EnvironmentInfo#getCatalog() added.
* <instrument annotateGenerated="false" not supported any longer.
* cojen.jar not required anymore.
* @Override generated by instrumentor is put on a separate line.
	Affects instrumented code.
	Use this parameter:
		<instrument overrideOnSeparateLine="false" ...
	to enable previous behaviour.
* <instrument serialVersionUIDSuffix="small|capital|none" supported.
	Generates either:
		private static final long serialVersionUID = 1l;
		private static final long serialVersionUID = 1L;
		private static final long serialVersionUID = 1;
	Default is small, which was also the previous behaviour.
* Settable#map gets a default implementation.
	Remove your own implementation.
* DispatchDeferrable#isDeferred moved up to Dispatchable.
	This breaks backwards API compatibility, if you do not implement
	interface DispatchDeferrable, but a method isDeferred(Dispatcher).
* Dispatchable#notifyFinalFailure gets an empty default implementation.
	You may want to remove your own implementation, if it is empty.
* requires JDK 1.8.0_60
* bugfix: RangeField setters do declare violation exceptions.
	Affects instrumented code.
* @Deprecated generated by instrumentor becomes fully qualified.
	Affects instrumented code.
	Use this parameter:
		<instrument deprecatedFullyQualified="false" ...
	to enable previous behaviour.
* Add javax.annotation.Nonnull and javax.annotation.Nullable annotations to wrapped COPE feature methods,
	and enable generation of such annotations by the instrumentor (disabled by default).
	To have the instrumentor generate nullability annotations, adapt your ant script:
	'<instrument ... nullabilityAnnotations="true">'.
	(This needs javax.annotation.Nonnull/Nullable in the instrumentor classpath, usually from findbugs-annotations.jar.)
* DateField supports precision constraint.
* @CopeSchemaValue changes semantics.
	May subtly change the semantics of your database schema - therefore
	DO A REGRESSION TEST !!!
	May allow you to use much fewer @CopeSchemaValue annotations than before.
* Add abstract method MediaPath#isMandatory()
	Implementation will have to be added to custom MediaPath subclasses: Return "true" if
	getContentType will never return null.
* Add parentheses to all method annotations generated by instrumentation.
	Affects instrumented code - disable by adapting your ant script: '<instrument ... parenthesesOnEmptyMemberAnnotations="false">'.
* Use multiple check constraints for each column.
	This heavily affects database schema, except on MySQL.
	It's strongly recommended to update cope-console as well for
		tab "Unsupported Check Constraints By Table".
* supports 63 bit primary keys instead of just 31 bit.
	Does not affect database schema unless you specify @CopeCreateLimit.
	Breaks serialization compatibility of Item, causes:
		java.io.InvalidClassException: com.exedio.cope.Item;
		local class incompatible: stream classdesc serialVersionUID = 1,
		local class serialVersionUID = 2
	Breaks cluster invalidation protocol compatibility,
		causes packets to be rejected because of Missing Magic.
* ChangeEvent#getNodeID added.
* MySQL sequence tables do change the column name:
	from 'x' to 'COPE_SEQUENCE_AUTO_INCREMENT_COLUMN'.
	This heavily affects database schema on MySQL.
	Use schema.mysql.fullSequenceColumnName=false in ConnectProperties to
	revert to previous behaviour.
* Use Servlet API 3.0 (needs Tomcat 7)
* Use small integer types (tinyint, smallint, ...) on MySQL.
	This heavily affects database schema on MySQL.
	Use schema.mysql.smallIntegerTypes=false in ConnectProperties to revert to
	previous behaviour.
* Item#beforeDeleteCopeItem added.
* Price uses long instead of int.
	This change also affects Money and PriceField/MoneyField.
	This breaks backwards API compatibility, causes compiler errors.
	Affects database schema, column types change from 32 bit integer to 64 bit.
	Affects instrumented code.
	Breaks serialization compatibility of Price and Money, causes:
		java.io.InvalidClassException: com.exedio.cope.pattern.Price;
		local class incompatible: stream classdesc serialVersionUID = 1,
		local class serialVersionUID = 2
* ConnectProperties#factory()#mediaRootUrl() added.
* ConnectProperties#factory()#primaryKeyGeneratorSequence() added.
* FeatureField#get throws FeatureField.NotFound if feature id is not found.
	NotFound extends IllegalStateException, which was thrown before.
* ConnectProperties: keys connectionPool.idleLimit and connectionPool.idleInitial
	do not support context expansion (${xxx}) anymore.
	This breaks backwards API compatibility, check your deployed systems!
* SamplerProperties supports separate purgeDays for each type to be purged.
	BEWARE: Without adapting your settings your application may fail at startup!
	Property keys and defaults changed from a single property:

		purgeDays = 8

	to a new optional nested property:

		purgeDays = true
		purgeDays.model = 57
		purgeDays.transaction = 57
		purgeDays.itemCache = 8
		purgeDays.clusterNode = 29
		purgeDays.media = 29

* Dispatcher#purge added.
	- affects database schema, adds columns to table of Dispatchable item
	- affects instrumented code
	For previous behaviour use: new Dispatcher().withoutPurge().

	Fixing database schema for a dispatcher Mail.send could look like this on MySQL:

		ALTER TABLE `Mail`
			ADD COLUMN `send_noPurge` int not null,
			ADD COLUMN `send_unpend_success` int,
			ADD COLUMN `send_unpend_date` bigint
		CREATE TABLE `DispatcherPurgeTempMail` AS (
			SELECT MAX(`this`) `this`, `parent` FROM `Mail_send_Run` GROUP BY `parent`)
		UPDATE `Mail` p
			JOIN `DispatcherPurgeTempMail` t ON p.`this`=t.`parent`
			JOIN `Mail_send_Run` r ON t.`this`=r.`this`
			SET p.`send_unpend_success`=r.`success`, p.`send_unpend_date`=r.`date`
		DROP TABLE `DispatcherPurgeTempMail`

* added ivy configuration 'changelog'
	changelog won't be included in 'runtime' config per default anymore
* Instrumentor parameter defaults changed. For previous behaviour set:
	<instrument ... annotateGenerated="false" finalArgs="false" verbose="true">
* Instrumentor can be configured to run only if source files or resources changed:
	- In taskdef for "instrument" task, add 'id="instrument.resources"' to classpath.
	- Set "timestampFile" and "resources" in calls of "instrument" task:
		<instrument ... timestampFile="build/instrument.timestamp">
			<resources refid="instrument.resources" />
* Drop support of exedio-cope-test.jar. Remove it from your project.
	Drops ivy configuration "test" as well.
* bugfix: CheckConstraints conform to Three-valued logic.
	This breaks backwards API compatibility, may subtly change behaviour!
* Dispatcher: before calling Dispatchable#notifyFinalFailure an error is logged.
	You may want to remove similar code in your implementation of notifyFinalFailure.
* ConnectProperties field schema.mysql.utf8mb4 changed its default from false to true.
	Field value affects MySQL only. Changing the value heavily affects database schema.
* ConnectProperties field disableSupport.notNull removed (defaulted to false).
	The framework now behaves as specified by the default of the field.
* Model#supportsUTF8mb4 added.
* TextUrlFilter constructor adds restrictions:
	- pasteKey must be neither optional nor unique
	- pasteValue must be neither optional nor final
	This breaks backwards API compatibility, causes model initialization to fail.
* MediaPath#is[Not]Null becomes an optional operation.
	Throws an UnsupportedOperationException if not supported.
	This breaks backwards API compatibility.
* MediaFilter#is[Not]Null(Join) becomes final as well.
	This breaks backwards API compatibility, causes compiler error.
* SchemaInfo#getColumnValue(Enum) simplified,
	prevents unchecked warnings in client code.
* ItemFunction#equalTarget(Join) does fail now, if target type does not conform to join.
	This breaks backwards API compatibility - before just Query#search did fail in such cases.
* ConnectProperties#getProbeTest added.
* MoneyField#getCurrencyClass added.
* MediaImageMagick[Filter|Thumbnail] removed.
	This breaks backwards API compatibility, causes compiler error. Was
	deprecated since 7 Feb 2014.
	- Use com.exedio.cope.im4java.MediaImageMagickFilter from exedio-cope-im4java.jar
		instead. See migration-guide.txt for instructions.
	- Remove com.exedio.cope.media.imagemagick and com.exedio.cope.media.convertcommand
		from your build environment as well.
	- You may need newer versions of copeconsole and copeview to avoid NoClassDefFoundError.
* @UrlFingerPrinting will be applied to final media as well.
	BEWARE: final media will not have Expires time of one year anymore.
	If you want this again, use @UrlFingerPrinting.
* bugfix: Price#valueOf(double) sometimes did wrong rounding in equidistant case (again)
* Switched to trove4j from mvnrepository.com.
	- replace trove.jar by trove4j.jar in your build scripts
	- file trove-src.jar will not be fetched anymore
* Schedule#newGregorianCalendar added.
* bugfix: UniqueConstraint#search(Object...) did fail for IntegerField
	with range constraint when searching out of range.
* Schedule records progress reported to JobContext.
	This affects database schema, adds a column to run table of each Schedule,
	should be initialized to 0 (zero).
* ConnectProperties field hsqldb.nullsAreSortedLow removed
* instrumentor supports type parameters of items
* @UrlFingerPrinting is ignored for final MediaPathes
* ColorField#to/fromRGB added.
* Composite fails on fields with non-constant defaults.
	This was never supported.
	This breaks backwards API compatibility, causes model initialization to fail.
* PasswordLimiter#reset added.
	Affects instrumented code.
* SetValueUtil#add added.
* ConnectToken#returnItConditionally issues warning to logger
* CopeAssert#serialize and deserialize added.
* Sampler supports storing build tag.
	Use SamplerProperties#sample(Sampler sampler, String buildTag)
* Model.checkSchema() is no longer supported.
* PartOf allows order shared by multiple parts.
* Price (and PriceField) does not support value -21474836.48 anymore.
	Now supports range from -21474836.47 to 21474836.47 (inclusive).
	This may affect database schema but not on MySQL.
	This causes cope constraints to be slightly stricter.
* TextUrlFilter#getContent and #check added.
	Affects instrumented code.
* @CopeTypeColumnMinLength added.
* Conditions#equal and #implies added.
* <instrument annotateGenerated="true" ... supported
* Model#flushConnectionPool added.
* bugfix: PartOf#get[Declared]PartOfs did consider order fields.
* bugfix: MediaPath Internal Server Errors caused by exceptions could have
	been cached.
* Model#getSchemaSavepoint() and RevisionInfo#getSavepoint() added.
* Model#removeAllChangeListeners added.
* ConnectProperties: option cluster.log replaced by slf4j logging
* MediaRequestLog#getRemoteAddr added
* Use database sequence for IntegerField#defaultToNext.
	This affects database schema when using #defaultToNext and
	schema.primaryKeyGenerator=memory.
* TransactionTry#commit([R|int]) added.
* @WrapFeature added
	You may remove @cope.ignore from CheckConstraint.
	Add @WrapFeature to your own patterns, as @WrapFeature will be removed
	from Pattern somewhere in the future.
* MxSampler is no longer supported.
	Use project mxsampler instead.
	MxSampler#getModel and #connect will fail with a NoSuchMethodError.
	This breaks backwards API compatibility for API that was deprecated for
	quite some time.
* ModificationListener is no longer supported.
	Model#addModificationListener will fail with a NoSuchMethodError.
	This breaks backwards API compatibility for API that was deprecated for
	a long time.
* bugfix: Schedule does not cover date ranges twice when changing interval,
	timezone, or locale.
* @MysqlExtendedVarchar added
* Settable#getInitialType() un-deprecated, with slightly different semantics:
	* Mandatory fields will return wrapper instead of primitive
		(Double.class instead of double.class).
	* com.exedio.cope.instrument.Wrapper.ClassVariable/TypeVariableN not used
		anymore.
	This breaks backwards API compatibility for API that was deprecated for
	a long time.
* TextUrlFilter fails on empty supportedContentType.
	This breaks backwards API compatibility, causes model initialization to fail.
* bugfix: Schedule executes all remaining runs, not just the last one.
* [Price|Money]#[less@greater]Than[OrEqual]Zero added
* Money / MoneyField added
* PriceField#minZero added
* Schedule supports typed getter for parent.
	Affects instrumented code.
* DayField#touch requires TimeZone.
	Deprecated old API.
	Affects instrumented code.
* StringField#charSet does fail with non-ASCII CharSets.
	Did not work anyway, but now an exception is thrown.
* Media.contentType() methods added
* Model#startTransactionTry added
* @CopeID added again as deprecated equivalent of @CopeName.
	This restores backwards API compatibility lost when @CopeID was renamed
	to @CopeName.
	BEWARE:
		This may affect database schema, media urls etc. especially for types
		within libraries.

* DynamicModel.FieldGroup removed again
	This affects database schema, drop a column and a table.
* DrivebyHashMigration added
* DynamicModel.FieldGroup added
	This affects database schema, requires a new column and a new table.
* CopeAssert#listg removed
	This breaks backwards API compatibility, causes compiler error.
* requires JDK 1.7u6
* HashInterface#getHash(Item) added
	This breaks backwards API compatibility, causes compiler error.
* HashInterface#set added
	This breaks backwards API compatibility, causes compiler error.
* TypeSet#getExplicitTypes() added
* RevisionStatistics added
* Price#divide(double) added.
* Revision table gets primary key instead of unique constraint.
	BEWARE: This affects database schema.
	The following revision is needed:

		new Revision(nnn, "Revision table gets primary key instead of unique constraint",
			"ALTER TABLE `while` DROP INDEX `protected`",
			"ALTER TABLE `while` MODIFY `v` int PRIMARY KEY")

* Revision constructor forbids empty comment and body strings.
	This breaks backwards API compatibility, but probably will not cause problems.
* bugfix: exception when deleting items with DeletePolicy.FORBID
* <instrument hidingWarningSuppressor="hiding" ... supported
* UniqueHashedMedia added
* ConnectProperties: option cache.item.invalidateLast renamed to cache.stamps

* bugfix: reworked invalidateLast mechanism to use AtomicLong instead of System.nanoTime
	- removed connect property cache.item.invalidateLast.margin
	- fixes rare failure of copetest:
		Testcase: testOverlappingTwice(com.exedio.cope.ItemCacheInvalidateLastPurgeTest): FAILED
		junit.framework.AssertionFailedError: invalidateLastSize expected:<0> but was:<2>
			at com.exedio.cope.ItemCacheInvalidateLastPurgeTest.assertCache(ItemCacheInvalidateLastPurgeTest.java:225)
			at com.exedio.cope.ItemCacheInvalidateLastPurgeTest.testOverlappingTwice(ItemCacheInvalidateLastPurgeTest.java:177)

* copetest bugfix: "EmptyItem-[0]> but was:<EmptyItem-[1]" in ItemTest line 228/62
* bugfix: Price#valueOf(double) sometimes did wrong rounding in equidistant case
* ConnectionFactory#isValidOnPut logs failures.
* DataField parts become none-public:
	- constructor Value()
	- class ArrayValue
	- method ArrayValue#asArray
	This breaks backwards API compatibility, causes compiler error.
* EnumSetField.toFinal() supported
* final Media and MediaFilter do get an Expires time of one year
	instead of the value configured by media.offsetExpires.
	This breaks backwards API compatibility, but probably will not cause problems.
* Model.purgeSchema added.
	It is recommended to call this method once a day to give cope the chance
	to purge sequence tables on MySQL.
* MediaPath.Locator supports getContentType
* MediaPath.Locator supports equals/hashCode
* fix deadlock in copetest on JDK 1.7
* Extend MediaType
	allow multiple extentions; first is default
		MIGRATION	MediaType.getExtension()->MediaType.getDefaultExtension() or MediaType.getExtensions()
	add ".jpeg" to JPG extensions
	new constants for JAR and fonts
	change default mime for TTF font/ttf->application/x-font-ttf
	change default mime for WOFF application/font-woff->application/x-font-woff
	add DOCX mediatype
* MediaRequestLog#isSecure() added
* HashInterface#isNull(Item) added
	This breaks backwards API compatibility, causes compiler error.
* Schedule archives interval for each run.
	BEWARE: This affects database schema. A new column is required, and must
	be initialized with meaningful values.

		alter table `SomeItem_schedule_Run` add column `interval` int not null
		update `SomeItem_schedule_Run` r join `SomeItem` s on s.`this`=r.`parent` set r.`interval`=s.`schedule_interval`

* dropped support for MySQL 5.0 and 5.1, new minimum requirement is MySQL 5.5
* Price supports toStringShort()
* MediaPath supports MediaRequestLog
* @CopeID renamed to @CopeName
	This breaks backwards API compatibility, causes compiler error.
* PriceField supports convenience methods for conditions:
	is[Not]Null, [not]Equal, less[OrEqual], greater[OrEqual], between
* ColorField added
* instrumentor omits MediaFilter#getURLWithFallbackToSource, if it makes
	no sense to call this method, because it behaves equally to #getURL.
* "batchedSequence" primary key generation mode added
  activate with schema.primaryKeyGenerator=batchedSequence
* Hash applies a default limit of 150 characters for plain texts.
	This is a precaution against DOS attacks with very long plain texts.

	BEWARE:
	This renders all passwords in your database longer than 150 characters useless.
	If you don't want this, set a higher limit via Hash#limit(int).

* @UrlFingerPrinting added
* Conditions helper class added
* MediaType.SVG added
* instrumentor removes support for old code layout of Activation Constructors.
	In build.xml, the following parameter:
		<instrument activationConstructorOnBottom="false" ...
	is no longer supported.
	The instrumentor now behaves as specified by the default (true) of the option.
* bugfix: This#checkTypeColumn did report false positives in certain
	cases of type inheritance.
* NestedHashMigration and NestedHashAlgorithm added
* ConnectProperties: option for updateCounter removed:

	schema.updateCounter (defaulted to true)

	The framework now behaves as specified by the default of the option.

* ConnectProperties: options for transactionIsolation removed:

	connection.transactionIsolation.readCommitted  (defaulted to false)
	connection.transactionIsolation.repeatableRead (defaulted to true)

	The framework now behaves as specified by the defaults of both options.

* PasswordRecovery.getPassword() and PasswordLimiter.getPassword() return
	HashInterface instead of Hash.
	This breaks backwards API compatibility, causes compiler error.
* Hash#validate and #newRandomPassword do become final.
	This breaks backwards API compatibility, causes compiler error.
* Model#deleteSchemaForTest added
* innodb_strict_mode on MySQL enabled
* DynamicModel.Field#as(Enum<?>) added
* DoubleField throws DoubleNaNException for NaN
	instead of RuntimeException
* DoubleField throws DoubleRangeViolationException for Infinity
	instead of RuntimeException
* class TransactionCounters becomes final.
	This breaks backwards API compatibility, causes compiler error.
* @PreventUrlGuessing causes response to carry Cache-Control: private
* MediaUtil added
* Media API Refactoring

	This massivly breaks backwards API compatibility. You MUST update
	exedio-cope-im4java.jar and exedio-cope-console.jar, if used.
	Affects instrumented code.

	BEWARE !!!
	Implementors of MediaPath#doGetAndCommit MUST commit the transaction
	on normal termination. Using MediaPath#commit() is recommended.

	Do the following replacements in your code:

		extends CachedMedia       -->  extends MediaPath
		Log doGet(..)             -->  void doGetAndCommit(..)
		Log doGetIfModified(..)   -->  void doGetAndCommit(..)
		return isNull;            -->  throw notFoundIsNull();
		return notComputable;     -->  throw notFoundNotComputable();
		return delivered;         -->  <nothing>
		long getLastModified      -->  Date getLastModified

* DispatchDeferrable added
* @RedirectFrom does not support ElementType.TYPE anymore, did not work properly anyway.
	This breaks backwards API compatibility, causes compiler error.
* JavaView supports private getter method
* Sampler collects differences instead of absolute values
* Type#asExtends added
* ItemField#asExtends added
* Model#deleteSchema() accelerated on hsqldb
* hsqldb 2.2.9 required, instead of 2.1.0
* bugfix: CheckConstraints referring to super class supported
* instrumentor supports referring to features of super class
* cluster network can be enabled via source of ConnectProperties as well,
	if context is null, up to now this was possible via context only.
	You need the folowing two properties:

			cluster=true
			cluster.secret=nnn

* nested properties supported by adding:
	- ConnectProperties#factory()
	- DispatcherProperties
	- SamplerProperties
* LongField#defaultToRandom added
	- supports simple value ranges only: [MIN_VALUE,MAX_VALUE] and [0,MAX_VALUE]
* PasswordRecovery constructor accepts SecureRandom
* LongField#range checks for illegal range, where maximum is less or equal to minimum
* ItemField supports copyTo as a supplement to FunctionField#copyFrom
* FunctionField#copyFrom supports multiple constraints.
	This breaks backwards API compatibility:
	- Use field.copyFrom(targetA).copyFrom(targetB) for multiple constraints,
		instead of overriding targetA with targetB.
	- field.copyFrom(null) is no longer allowed, and throws a NullPointerException

* Composite supports serialization of template features
	This breaks backwards API compatibility for Feature#mount(String, AnnotatedElement)
* Enum[Set|Map]Field supports @CopeSchemaName for enum facets
* EnumAnnotatedElement added
* Price#nullToZero added
* allow overriding between defaultTo/defaultToNow/defaultToNext
* FunctionField#hasDefault added
* EnumSetField implements Settable
* EnumMapField implements Settable
* MapField does not allow optional value fields anymore.
	This breaks backwards API compatibility.
* CopeAssert#list, #listg and #map do return unmodifiable collections.
	This breaks backwards API compatibility.
* LimitedListField#get returns unmodifiable list.
	This breaks backwards API compatibility.
* MapField#getMap returns unmodifiable map.
	This breaks backwards API compatibility.
* ConnectProperties field cluster replaced by schema.primaryKeyGenerator:

	cluster=false   ->   schema.primaryKeyGenerator=memory   (was and is the default)
	cluster=true    ->   schema.primaryKeyGenerator=sequence

* ConnectProperties changed behaviour for cluster fields:
	Up to now, with cluster=false (the default), a configuration of
	the cluster network (cluster.secret=nnn) has been silently ignored.
	From now on such a configuration will fail to connect, throwing
	an IllegalArgumentException.
* exedio-cope-test.jar calls ConnectProperties#ensureValidity, because
	ConnectProperties do not call Properties#ensureValidity anymore.
* MediaType supports image/x-png
* MediaImageMagickThumbnail#outputContentTypeSame() added
* MediaTestable added and implemented by MediaImageMagickFilter
* Price#add(Price) checks for overflow and throws ArithmeticException
* classes in package com.exedio.cope.junit moved from exedio-cope.jar to exedio-cope-junit.jar
	add ivy configuration "junit" to fetch exedio-cope-junit.jar:

		<dependency org="com.exedio" name="cope" rev="xxx" conf="default->xxx,junit" />

* Set ivy configuration "sources" for exedio-cope-src.zip
	Within your ivy.xml you need to add that configuration to keep sources up-to-date:

		<dependency org="com.exedio" name="cope" rev="xxx" conf="default->xxx,sources" />

* bugfix for @CopeCacheWeight with large numbers,
	bug could partially disable item cache.
* ConstraintViolation subclasses make constructor non-public.
	This breaks backwards API compatibility.
* bugfix for type inheritance across 3 or more levels.
* switch from log4j to slf4j
* ConnectProperties do not call Properties#ensureValidity anymore
* Visibility of generic and activation constructors created by instrumentor
	changed. In general, both constructors of any type are private. However,
	they are protected in the following condition:
	- Up to now,   if there where subtypes of that type.
	- From now on, if that type is not final.
	Affects instrumented code.
* rename key in cope.properties:
		connection.user -> connection.username
* media.url.secret can be set via source of ConnectProperties as well,
	if context is null, up to now this was possible via context only.
	Value must be at least 10 characters long, otherwise instantiation
	of ConnectProperties will fail.
* Iterables#once added
* @Computed becomes @Inherited
	This means, that for any type which is @Computed all subtypes of this are
	@Computed as well. This does not affect @Computed features.
* stricter MySQL sql_mode: STRICT_ALL_TABLES, NO_ZERO_DATE, NO_ZERO_IN_DATE
* FunctionField#copyFrom added for implicit CopyConstraints
* remove support for deprecated Wrapper#generic(Class, Class...)
	which has been replaced by @Wrap annotation for a while.
	Methods throws a NoSuchMethodError, this breaks backwards API compatibility.
	Avoids use of internal proprietary API.
* No current transaction allowed anymore during sequence checks:
	- Type#checkPrimaryKey
	- IntegerField#checkDefaultToNext
	Helps avoiding deadlocks.
* MediaType#getExtension added
* @Computed is forwarded by Pattern correctly,
	CompositeField does not make all components @Computed,
	but only as inherited from Pattern.
* SetValue array literals created by instrumentor use generics.
	Avoids compiler warnings about rawtypes on JDK 1.7.
	Affects instrumented code.
	Use this parameter:
		<instrument genericSetValueArray="false" ...
	to enable previous behaviour.
* CompositeField supports @CopeSchemaName on template fields.
	Requires modification of persistent schema in such cases.
* Price supports grossToNetPercent and grossToTaxPercent
* ServletUtil uses ServletProperties.
	Introduces dependency on exedio-cope-servletutil.jar.
* Sequence obeys @CopeSchemaName both on feature and type.
	bugfix, requires modification of persistent schema in such cases.
* ConnectToken#getID() does not start from zero on Model#disconnect anymore,
		but only on ConnectToken#removeProperties(Model).
	This breaks backwards API compatibility, but should cause no practical problems.
* CompositeField#create requires valueClass to be final, throws IllegalArgumentException otherwise.
	This breaks backwards API compatibility,
	however inheritance for Composites was never supported anyway.
* Price#splitProportionately throws IllegalArgumentException if weights is empty
	instead of returning an empty result.
	This breaks backwards API compatibility.
* Price#negative added
* Price#splitProportionately added
* Model.NotConnectedException thrown instead of the IllegalStateException used before
* MySQL5.5 support added: No current transaction allowed anymore during schema modifications:
	- Not allowed anymore when calling
		Model#createSchema
		Model#createSchemaConstraints
		Model#deleteSchema
		Model#dropSchema
		Model#dropSchemaConstraints
		Model#tearDownSchema
		Model#tearDownSchemaConstraints
		Model#getVerifiedSchema
		Model#checkUnsupportedConstraints
		Model#revise
		Model#reviseIfSupportedAndAutoEnabled
		Model#getRevisionLogs
		Model#getRevisionLogsAndMutex
		SchemaInfo#newConnection
* Hash supports validator.
	- DigitPinValidator added.
* LimitedListField gets explicit length field.
	This breaks backwards API compatibility without changing compiler signatures -
		getter will not forget null elements anymore.
	This affects database schema:
		- a new column is added
		- a new check constraint is added (where supported)
* Function#in takes Collection<? extends E>
* Composite#getTemplateName added.
* instrumentor supports /** @cope.xxx override */
* prevent selection of ungrouped fields in MySQL
* rename CountSelectable to Count
	This breaks backwards API compatibility of beta API.
* added support for "group by" in queries
* DatabaseLogListener becomes final.
	This breaks backwards API compatibility.
* moved DatabaseLogListener from cope-console to cope
* SetField#create forbids optional element fields.
	This breaks backwards API compatibility.
* MapField#create forbids optional key fields.
	This causes DynamicModel#create to forbid optional locale fields as well.
	This breaks backwards API compatibility.
* automatic revision execution can be disabled
	Model#reviseIfSupported() is replaced by Model#reviseIfSupportedAndAutoEnabled()
* MxSampler added
* ServletUtil methods do not throw ServletException any longer
* TextUrlFilter#putPaste and #putPastesFromZip and
	DataField#toValue(ZipFile,ZipEntry) added.
	Affects instrumented code.
* MediaType#forFilename added
* remove support for deprecated Wrapper API,
	which has been replaced by @Wrap annotation for a while.
	- Feature#getWrappers and Wrapper#getByAnnotations do throw a NoSuchMethodError
		this breaks backwards API compatibility.
* bugfix: SamplerTransaction#date must not be unique
* TextUrlFilter#appendKey added
* added convenience methods to Price
* FeatureField#isInvalid added
* Split exedio-cope-instrument-annotations.jar off exedio-cope.jar
	- exedio-cope-instrument-annotations.jar is needed at compile-time, but not at runtime.
	- methods "get" of StringGetter, BooleanGetter, and ThrownGetter
		change their signature from get(Feature) to get(Object).
		This breaks backwards API compatibility.
* FeatureField#unique() added.
* Activation Constructors created by instrumentor are written on bottom of the file.
	Affects instrumented code.
	Use this parameter:
		<instrument activationConstructorOnBottom="false" ...
	to enable previous behaviour.
* Schedule#run additionally requires class token (Class<P> parentClass).
	Enforces parentClass to implement Scheduleable.
	This breaks backwards API compatibility,
		but wrappers generated by the instrumentor will not change its signature.
* Dispatcher#dispatch enforces parentClass to implement Dispatchable.
	This was previously a runtime constraint.
* SchemaInfo gets methods search(Query) and total(Query).
* Sampler#differentiate added.
* CopeAssert.reserialize deduplicates strings
* Allow customization of null-handling in order-by clauses on hsqldb.
	Put hsqldb.nullsAreSortedLow=true into cope.properties,
	if you want hsqldb behave like MySQL, otherwise do nothing.
* SerializationCheck added
* MediaType#hasMagic() added
* TextUrlFilter#addPaste returns created Paste,
	affects instrumented code.
* TextUrlFilter allows pasteStop longer than one character
* TextUrlFilter#appendURL may be overridden for customizing pasted urls.
* Type#asSubtype added.
* Type#checkCompleteness added.
* SchemaInfo#getPrimaryKeyColumnValue added
* SetValue constructor is replaced (deprecated) by SetValue#map,
	which is more type-safe
* Settable.map returns SetValue<E> instead of just SetValue.
	This breaks backwards API compatibility for implementators
	(but not users) of Settable.
* SetValue constructor will throw NullPointerException if settable==null.
	This breaks backwards API compatibility.
* Dispatcher supports probing, use new dispatch method.
* use separate ivy configuration for exedio-cope-test.jar.
	If you use this file, you need to add the test configuration to your cope dependency
	in the ivy.xml:

	<dependency org="com.exedio" name="cope" rev="nnn" conf="default->hsqldb,mysql,test" />

	Otherwise exedio-cope-test.jar will not be updated with new versions of cope anymore.

* replace PasswordRecovery#issue(int) by #issue(Config),
	deprecated version is provided,
	affects instrumented code.
* rename static factory methods of many features,
	deprecated version is provided.
* add PriceField#defaultTo
* @CopeSchemaName is obeyed by type columns as well.
	Affects persistent schema when @CopeSchemaName is used on types with subtypes.
	In that case the *contents* of type columns must be adjusted.
* add com.exedio.dsmf.Column#mismatchesType and #getRequiredType
* support "not null"-clause on MySQL columns.

	This heavily affects persistent schema on MySQL, all not-null columns
	do change their column types as "not null" is appended.
	Use "disableSupport.notNull=true" in cope.properties to revert to
	previous behaviour.

	IMPORTANT NOTE:
		If you want to revise an existing MySQL database,
		using statements like
			alter table `SomeTable` modify `someColumn` someType not null
		those statements will NOT fail on null values in the column.
		Make sure, that not-null columns do actually not contain null values.
		You may want to use the "Unsupported Constraints" tab in COPE Console
		for this, but you have to do this BEFORE enabling "not null"-clauses.

* remove support for @CopeSchemaType, deprecate annotation itself
* MediaType may have multiple types for one magic number,
	replace MediaType#forMagic by #forMagics
* add LongField#rangeDigits
* use range constraint of LongField in
	* Dispatcher#runElapsed,
	* Schedule#runElapsed and
	* Sampler.
	This may affect column types in database schema, but does not on MySQL.
* add range constraint to LongField
* add DefaultStatementListener in dsmf
* add IntegerField#rangeDigits
* Model#getVerifiedSchema checks strictly for foreign key constraints
* switched from java.util.logging to Log4j
	log4j.jar needs to be on class path for instrumenting or running any code depending on cope
	- log4j is part of ivy dependencies
* add Range#contains
* Range and RangeField do support optional borders
* require mysql connector 5.1.15
* require mysql connector 5.0.8
* improve speed of Model#deleteSchema() on MySQL, typically needed for tests
* add RangeField<E>#doesContain(E)
	affects instrumented code
* add Sequence
* add MediaType#JAVASCRIPT
* add MediaType#forMagic(File)
* Make constructor of SequenceInfo non-public, was a mistake.
	This breaks backwards API compatibility.
* Introduce RevisionsFuture,
	allows late computation of Revisions, when model is already connected.
	- Model#getRevisions() works only, if model is connected, throws exception otherwise.
* add Model#getRevisionLogsAndMutex()
* deprecate Schedule#run(Interrupter),
	affects instrumented code
* deprecate Dispatcher#dispatch with Interrupter,
	affects instrumented code
* deprecate PasswordRecovery#purge(Interrupter),
	affects instrumented code
* deprecate PasswordLimiter#purge(Interrupter),
	affects instrumented code
* Scheduleable#run changes signature from Interrupter to JobContext.
	This breaks backwards API compatibility.
* instrumentor uses type erasure for constructors,
	breaks backwards API compatibility.
	- Settable adds isMandatory() and deprecates getInitialType
	- DataField requires DataField.Value instead of byte[]
	- affects instrumented code, use simple names for item/enum classes
* Range and RangeField do enforce that lower bound is not greater than upper bound.
	This breaks backwards API compatibility,
	and affects database schema where check constraints are supported.
* introduce instrumentation by @Wrap annotation:
	- Wrapper constructor is now deprecated
	- Wrapper#getReturnComment(), Wrapper.Parameter#getComment() and Wrapper#getThrowsClause()
		do return String array instead of just String,
		this breaks backwards API compatibility.
* instrumentor writes customizer hint for unique constraints across multiple fields,
	affects instrumented code
* do not support Wrapper#deprecate and related method anymore
* instrumentor supports verify mode:
		<instrument verify="true" ...
	for Continuous Integration systems.
* add TypeIterator#iterateTransactionally
* add TypeSet
* add MediaType#magicMaxLength
* add constants for media type names in MediaType
* add MediaType
* adds PartOf#getParts(Item, Condition),
	affects instrumented code.
* instrumentor wraps PartOf#getParts
* The default constructor of StringField sets a minimumLength of 1 instead of 0.
	Use "new StringField(StringField.EMPTY)" to enforce previous behaviour.
	This breaks backwards API compatibility !!!
* changed semantics: StringField#length[Min|Max] does not forget the other limit anymore
	This breaks backwards API compatibility.
* instrumentor defaults to ascii encoding, use
		<instrument encoding="utf8" ...
	to specify other encodings.
* all jdbc connections are treated with
	setTransactionIsolation(Connection.TRANSACTION_REAPEATABLE_READ)
	Use cope property connection.transactionIsolation.repeatableRead=false
	to disable.
* Enable disableSupport.uniqueViolation
	in cope.properties by default.
* Disable connection.transactionIsolation.readCommitted
	in cope.properties by default.
* Enable cache.item.invalidateLast by default, use
		cache.item.invalidateLast=false
	in cope.properties to revert to old behaviour.
* Remove invalidation buckets in item cache:
	- Was disabled by default anyway.
	- Therefore removed cache.item.invalidationBucket.millis from cope.properties
	- Has been obsoleted by cache.item.invalidateLast.
* Revisions: a new java.sql.Connection is created for executing each Revisions
	(but not each body within a Revision).
	This breaks backwards compatibility, when using connection states in Revisions
* Delete#delete is not limited to 3000 items anymore.
	If you want a limit, you need to implement it via the JobContext.
* Many methods of CompositeField will work now immediatly after construction:
	 - of(FunctionField)
	 - getTemplate(FunctionField)
	 - getTemplates(), getComponents(), getUnison(),
	 - is[Not]Null()
	This allows additional constraints on the components.
* add Dumper#[un]prepare
* fix instrumentation of Composite with [Date|Day]Field
	method touch does work now
* instrumentor does not wrap getContentType anymore,
	if there is just one possible result (apart from null),
	affects instrumented code.
* switch from jdk 1.5.0_17 to jdk 1.6.0_18
	do not forget to update your hudson job !!!
* add SchemaInfo#supportsUniqueViolation
* rename key in cope.properties:

		database.url      -> connection.url
		database.user     -> connection.user
		database.password -> connection.password

		mysql.lower_case_table_names -> schema.mysql.lower_case_table_names
		cache.item.concurrentModificationDetection -> schema.updateCounter

		database.dontSupport.preparedStatements -> disableSupport.preparedStatements
		database.dontSupport.emptyStrings       -> disableSupport.emptyStrings
		database.dontSupport.nativeDate         -> disableSupport.nativeDate

		database.tableOption.xxx -> schema.tableOption.xxx
		database.longSyntheticNames -> schema.tableInNames

* add MapField.[get|set]Map
	affects instrumented code
* '-' is dropped from JavaView getter names (allows JavaViews in patterns)
* add ItemCache[Info|Summary].getInvalidateLastPurged()
* Change ConnectToken semantics

	This breaks backwards API compatibility in almost all cases !!!
	You MUST call ConnectToken.setProperties, otherwise ConnectTokens
	will not work anymore. ConnectTokens are used by depending
	frameworks as well, such as generic backoffice and COPE Console.

	Typically you may want to have a class like this:

		public class PropertiesInitializer implements ServletContextListener
		{
			public void contextInitialized(ServletContextEvent sce)
			{
				ConnectToken.setProperties(Main.model, ServletUtil.getConnectProperties(sce.getServletContext()));
			}
			public void contextDestroyed(ServletContextEvent sce)
			{
				ConnectToken.removeProperties(Main.model);
			}
		}

	and a corresponding snippet within your web.xml:

		<listener>
			<listener-class>com.exedio.copedemo.PropertiesInitializer</listener-class>
		</listener>

	Note, that the <init-param> named "cope.properties" at the servlet
	is not supported anymore.

	You MUST update cope console as well to at least svn.19004 hudson.6368 2011-02-10_13-41-05,
	otherwise history will not work.

* remove connect property "log", has been replaced by java.util.logging
* MediaServlet can be subclassed for overriding onException
* add class ItemCacheSummary
* added invalidation buckets:
	cope property "cache.item.invalidationBucket.millis" can be set to define for how long
	after an invalidation an item will not be added to the item cache (deactivated by default)
* add class MediaSummary
* all jdbc connections are treated with
	setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED)
	Use cope property connection.transactionIsolation.readCommitted=false
	to disable.
* add MediaImageMagickFilter#test()
* changed semantics: [Integer|Double]Field#[min|max] does not forget the other limit anymore
	This breaks backwards API compatibility.
* add UniqueConstraint constructor for 6 FunctionFields
* add UniqueConstraint constructor for 5 FunctionFields
* add Item#appendCopeID
* add MediaPath.Locator#getFeature()
* abstract method CachedMedia#doGetIfModified extends signature from
	doGetIfModified(HttpServletResponse response, Item item) to
	doGetIfModified(HttpServletRequest request, HttpServletResponse response, Item item)
	This breaks backwards API compatibility.
* Make consistent visualization of cluster node id available.
	Adds the following methods
		ClusterSenderInfo#toStringNodeID
		ClusterSenderInfo#getNodeIDString
		ClusterListenerInfo#getIDString
		ChangeEvent#getRemoteNodeIDString
* add MediaUrlCatchphraseProvider
	This breaks backwards API compatibility,
	because MediaPath.getNamedURL(Item, String) changes sematics to be equals to getURL(Item)
* add Model#getClusterProperties()
* add Model#getChangeListenerDispatcherInfo()
* add ChangeListenerInfo#getFailed()
* add Model#getThreadControllers
* BUGFIX: grave bug notifying ChangeListeners
* remove connect property database.dontSupport.limit
* add Query#searchSizeLimit
	BEWARE:
		This may break your application if it
		issues queries with a result size of more than 100000.
		In this is intended, increase the default value
		using connect property query.searchSizeLimit.
* switch to hsqldb 2.0.0 for jdk 1.5 from support page (revision 3814)
	fixes noJoinParentheses
* use JobContext for Dispatcher and Schedule
	affects instrumented code
* BUGFIX: grave bug corrupting data in item cache
* bugfix: Model#deleteSchema does not delete revision table anymore
* bugfix: omit setters for final RangeField
	avoids warnings in eclipse,
	affects instrumented code
* add Range#newRange
* add NumberFunction#asString()
* add TypeIterator
* add QueryIterator
* bugfix: ClusterListener deals with offset in packets
* bugfix: recover from failing modification counter by removing the item from global cache
* cache result of Model#revise[IfSupported], so its cheap to call
* add SchemaInfo#newConnection
* fix exedio-cope-test.jar on applications in ROOT contextPath
	also contextPath.jdbc.[url|user|password] is no longer needed
* add ${contextPath} to servlet property context
	and use a value derived from that instead of com.exedio.cope.contextPrefix
	This breaks backwards configuration compatibility
	BEWARE: You must adjust your production systems!
* add SchemaInfo#isConcurrentModificationDetectionEnabled/getModificationCounterColumnName
* use less parenthesis when joining
	makes hsqldb work more often
* remove @SuppressWarnings("unused") on private activation constructors
	heavily affects instrumented code !
	use <instrument suppressUnusedWarningOnPrivateActivationConstructor="true" ...
	to enforce previous behaviour
* add ConnectToken.returnItConditionally
* replace ModificationListener mechanism by ChangeListener
	- listener receives ChangeEvent instead Collection<Item> and Transaction
	- works with remote transactions within clusters as well
	- ModificationListener deprecated, but still works as before
* add ConnectToken#wasConditional
* add ConnectToken#issueIfConnected
* add TransactionRunnable
* add ClusterListenerInfo#getReceiveBufferSize
* add ClusterSenderInfo#getSendBufferSize and #getTrafficClass
* add ClusterSenderInfo#getLocalPort()
* add ClusterSenderInfo#getNodeID()
* add SetValueUtil#getFirst
* add class Delete
* add Hash.toFinal()
* add Hash.Algorithm.compatibleTo
* add EnumMapField.defaultTo
* instrumented constructors qualify features by declaring class,
	avoids warnings in eclipse,
	affects instrumented code
* omit class token for Schedule.run
	affects instrumented code
* omit class token for a few static wrappers
	affects instrumented code
* adjust javadoc for instrumented wrapper of Hash.blind
	caused problems when check method wrapper was omitted by @cope.blind none
	affects instrumented code
* add Hash.blind
	affects instrumented code
* add salted hashes and refactoring of Hash framework
	This breaks backwards API compatibility
		- Hash#hash does not have to deterministic anymore
		- Hash#[not]Equal has been replaced by is[Not]Null
		- Hash takes Algorithm interface
	- deprecated SHAHash and MD5Hash
* add PasswordLimiter
* add Media.toFinal()
* implement fallback from MediaImageMagickFilter#get(Item) to MediaImageioFilter,
	requires MediaImageMagickFilter#fallback to be restricted to MediaImageioFilter.
	This breaks backwards API compatibility.
* method PartOf#getParts gets a class token
	This breaks backwards API compatibility.
* changed the default for option cache.item.concurrentModificationDetection
	in cope.properties from false to true.	Changing this option requires
	modification of persistent schema. Override the default if needed.
* add CheckConstraint
	- Media and CompositeField use CheckConstraints
		this requires modification of persistent schema where check constraints
		are supported (not MySQL), if not, check unsupported constraints in Console
* add byte[] MediaImageMagickFilter.get(Item)
	affects instrumented code
* bugfix: fixed file descriptor leak in MediaImageMagickFilter
* cope console is now its own independent project
	make sure, that you add cope console to your getlib configuration
* added FeatureField
* make FunctionField#defaultTo work for Composite
* added SetValueUtil
* added Dispatcher#defaultPendingTo
* added @NonGuessableUrl
* added ordered PartOf
* added Type#emptyQuery
* added SetField#getQuery
	affects instrumented code
* added ListField#getQuery
	affects instrumented code
* added Model#supportsRandom(), is true for MySQL only
* added QueryAggregator
* added Type.random(seed), works on MySQL only
* TextUrlFilter
* refactoring of Dispatcher
	This breaks backwards API compatibility
	and requires modification of persistent schema.
	- rename Dispatcher.Failure to Run
	- rename Run.cause to failure
	- move successDate/successElapsed into Run, add BooleanField Run.success
	- rename getSuccess[Date|Elapsed] to getLastSuccess[Date|Elapsed]
	- remove @Computed from pending
* added method DynamicModel.Field#getFieldEnum()
* Dispatcher accepts configuration at time of dispatching,
	not at time of feature construction.
	This breaks backwards API compatibility.
* console history allows auto purging
* bugfix: polymorphic and bound this-functions selected in queries
* bugfix: polymorphic and bound item fields selected in queries
* do not use raw type SetValue in instrumented code, avoids typical ide warnings
	heavily affects instrumented code !
* Query.setSelects does not accept one Selectable only,
	a new method setSelect is provided instead.
	This breaks backwards API compatibility.
* rename Model.getCurrentTransaction() to currentTransaction
	deprecated version is provided
* patterns must call super.onMount() in onMount()
	otherwise type initialization fails
	this breaks backwards API compatibility
* add Importer.doImport(Class<P>, E, List<? extends SetValue>) in addition to
	doImport(Class<P>, E, SetValue...)
* deprecate constructor Query(Selectable[], Type, Condition)
	in favour of type-safe factory method
* add @RedirectFrom for media
	deprecate MediaRedirect
* implement Concurrent Modification Detection, still disabled by default
* refactoring of id of types, features and items
	BEWARE !!!
	heavily affects
	- persistent schema
	- localization files of a generic backoffice
	- media urls
* MediaPath.onMount is not final anymore
* add pattern Importer
	helps implementing typical update-or-insert scenarios
* do not allow item ids with leading zeros
	protects against Denial of Service against MediaServlet caching mechanism
* allow arbitrary Feature as source of Pattern, not Field only
* make Pattern.getSource[Fields|Types] final
* allow serialization/deserialization of:
		* Model
		* Type
		* Feature and its subclasses
		* Items of unbound Types (see Type.isBound)
	To make serialization work, you need to enable it at the model. Otherwise
	a NotSerializableException is thrown when trying to deserialize.
	For any model defined like this:

		static final Model model = new Model(Aaa.TYPE, Bbb.TYPE, ...);

	add the following code immediately below:

		static
		{
			model.enableSerialization(Main.class, "model");
		}

	where "model" is the name of the static final field, the model is assigned to,
	and Main is the class of that field.

* CopeAssert.reserialize checks for exact expected size, not for maximum
	this breaks backwards API compatibility, but affects junit tests only
* instrumentor generates minimal method names for feature "defaultFeature"
* Resizing with ImageMagick works on Windows.
	On Windows, install ImageMagick, and set the system properties com.exedio.cope.media.imagemagick (to "true") and
	com.exedio.cope.media.convertcommand (to the absolute path of the convert binary).
* bugfix: Model failed on second connect, if there was a IntegerField.defaultToNext
* add MediaPath.Locator
	affects instrumented code
* allow optional EnumField on Enum with one value only
* Item implements Comparable
* Type implements Comparable
* Price implements Comparable
* add Model#isConnected()
* rename Model.getProperties() to getConnectProperties()
	deprecated version is provided
* flush sequences in checkEmptySchema, fixes CopeTest
* remove Model.flushSequences()
	deprecated version is provided
* added conditions CompositeField.is[Not]Null()
* removed key in cope.properties: database.oracle.varchar
* deprecated Pattern.annotationField
* rename keys in cope.properties:
	cache.limit      -> cache.item.limit
	cache.queryLimit -> cache.query.limit
* rename CopeTest.getProperties() to getConnectProperties()
	deprecated version is provided
* added CompositeField.getValueClass()
* move com.exedio.cope.util.CopeFilter to package com.exedio.cope.misc
	deprecated version is provided
* added generic creator method "newValue(SetValue...)" for Composite on CompositeField
* made generic getters and setter on Composite public
* added CompositeField.getTemplate(FunctionField)
* added CompositeField.getTemplates()
* move ConnectToken and ServletUtil to package com.exedio.cope.misc
	deprecated version is provided
* move TransactionSlicer to package com.exedio.cope.misc
	deprecated version is provided
* rename Pattern.initialize to onMount
	deprecated version is provided
* add @Computed
* add [Type|Feature].isAnnotationPresent
* allow annotations for types added by patterns
	this breaks backwards API compatibility of Type#getAnnotation(), but is likely to affect a generic backoffice only
* allow annotations for fields of types added by patterns
* allow annotations for fields added by patterns
* replace Model.isDatabaseLogEnabled/getDatabaseLogThreshold/getDatabaseLogSQL by getDatabaseListener
	replace setDatabaseLog by setDatabaseListener
	this breaks backwards API compatibility, but is likely to affect cope console only
* big overhauling of composites
	this breaks backwards API compatibility in a subtle way, BEWARE!
	- changed behaviour of optional composites,
		setter accepts null now for optional Composites and
		getter returns null.
	- renamed Composite to CompositeField and Composite.Value to Composite,
		making it a top-level class
	- Composite checks its values for violation of field constraints,
		such as mandatory, string length, integer range etc.
	- final fields in Composite are not supported
		and cause an exception to be thrown
	- Composites do get instrumentation
* replace AbstractListField.getElementValueClass() by getElement()
	this breaks backwards API compatibility, but is likely to affect a generic backoffice only
* LimitedListField throws ListSizeViolationException instead of IllegalArgumentException
* add AbstractListField.getMaximumSize()
* replace SchemaInfo.getColumnValue(EnumField, Enum) by getColumnValue(Enum)
	deprecated version is provided
* add @CopeSchemaValue for enum values
* add ItemCacheInfo.getConcurrentLoads()
	replaces message on System.out: warning: duplicate computation of state ...
* add SchemaInfo.quoteName
* remove automatic detection of convert in MediaImageMagickFilter
	now you need a java system property to enable:
		com.exedio.cope.media.imagemagick=true
* console history adds a column for ClusterSenderInfo.getInvalidationSplit()
	requires modification of persistent schema
* MandatoryViolation and FinalViolation for PriceField has PriceField itself as feature, not the source-Field of the PriceField
	this breaks backwards API compatibility, but is likely to affect a generic backoffice only
* MandatoryViolation for Media has Media itself as feature, not the body of the Media
	this breaks backwards API compatibility, but is likely to affect a generic backoffice only
* added Model.containsTypeSet
* move Item.newType to class TypesBound
	deprecated version is provided
* move Type.forClass[Unchecked] to a new class TypesBound
	deprecated version is provided
* renamed Type#isJavaClassExclusive to isBound
	deprecated version is provided
* fix instrumented javadoc after "Type.newItem does not invoke creation constructor anymore"
	(see below), heavily affects instrumented code !
* DynamicModel uses MapField for names
	this affects names of columns and tables in database schema,
	requires a revision
* reorganized creation and activation of items,
	breaks backwards API compatibility
	heavily affects instrumented code !
	- Type.newItem does not invoke creation constructor anymore,
		this breaks preCreate constructs
		use a static method "SetValue[] beforeNewCopeItem(SetValue[])" instead
		search for @cope.generic.constructor none
	- renamed Item.postCreate() to afterNewCopeItem()
		the compiler will help you, if you have your @Override annotations in place
	- renamed instrumentor tag @cope.reactivation.constructor to @cope.activation.constructor
		this is very rarly used
	- reactivation constructor changed
		+ new signature instead of
			Item(com.exedio.cope.util.ReactivationDummy, int[, Type]) is now
			Item(com.exedio.cope.ActivationParameters)
		+ in Item is now protected instead of public
	- removed creation constructor Item(SetValue[], Type)
		use Type.newItem instead
* make Type.This a top-level class
	this breaks backwards API compatibility, but is likely to affect a generic backoffice only
* do not use BackingItem for DynamicModel anymore
	this breaks backwards API compatibility, but is likely to affect a generic backoffice only
	affects instrumented code
* renamed Type.hasUniqueJavaClass() to isJavaClassExclusive()
* deprecated constructors of Model not using Revisions
* replaced Model.isRevisionEnabled() and getRevisionNumber() by getRevisions()
	this breaks backwards API compatibility, but is unlikely to affect normal projects
* renamed dsmf driver to dialect
	this breaks backwards API compatibility, but is unlikely to affect normal projects
* moved info classes into separate package
	this breaks backwards API compatibility, but is unlikely to affect normal projects
* removed cope live editor from exedio-cope.jar, it is now it's own project
* deprecated empty constructor of Schedule, provide a Locale instead
* subclasses of MediaPath do not get the url extension anymore
* MediaPath got new method getNamedURL, with additional parameter for setting the "name" of the media
* Console History puts date first in unique constraints
	- makes purging faster
	- affect persistent schema of the history
		you have to drop the old constraints and create the new constraints
* renamed UniqueConstraint.searchUnique to search
	affects instrumented code
* Console allows checking Media ContentType against body using magic numbers
* rename Media.contentTypeMajor to contentTypeSub
* Media with default Content-Type or major Content-Type do restrict the
	CharSet of the StringField storing the Content-Type. You may need to adjust
	the persistent schema (adding new check constraints) and/or adjust your data.
* add pattern Range
* Editor provides LOGIN_PATH_INFO
* Editor provides isBordersEnabled()
	use  this instead of isLoggedIn() for triggering css import
* Interrupter from exedio-cope-util.jar is used
	- affects Dispatcher, Schedule, PasswordRecovery
* cope now depends on new project copeutil
	- add exedio-cope-util.jar where trove.jar is used as well
* add Schedule.enabled, adds new columns to schema, should be initialized with "true"
* changed url of content editor from contentEditorLogin.html or copeContentEditor.html to copeLiveEdit.html
* in contentEditor.css remove any styles related to contentEditorBar
* for content editor, Editor.writeHead must be called in html head
* renamed EditorPreview to Draft
* added SHAHash as a replacement for MD5Hash, which is no longer secure
* field for storing hashes uses algorithm for name,
	i.e. passwordHash becomes passwordMD5
	affects instrumented methods and persistent schema
* support for
	<taskdef resource="com/exedio/cope/instrument/ant.properties" classpath="lib/exedio-cope-instrument.jar" />
* Editor
	- put classes into separate package com.exedio.cope.editor
	- make Login a top-level interface and rename it to Session
* updated cops library to build.54, do get it from cops project now
* updated jspm library to build.14, added check.version target to getlib.xml
* added Query.emptyResult()
