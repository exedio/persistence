
timestamps
{
	//noinspection GroovyAssignabilityCheck
	node('GitCloneExedio && Mysql55localhost')
	{
		try
		{
			abortable
			{
				echo("Delete working dir before build")
				deleteDir()

				def scmResult = checkout scm
				computeGitTree(scmResult)

				env.BUILD_TIMESTAMP = new Date().format("yyyy-MM-dd_HH-mm-ss");
				env.JAVA_HOME = "${tool 'jdk 1.8.0_60'}"
				env.PATH = "${env.JAVA_HOME}/bin:${env.PATH}"
				env.SCHEMA = "ci_${HOSTNAME}_${EXECUTOR_NUMBER}"

				def isRelease = env.BRANCH_NAME.toString().equals("master");

				properties([
						buildDiscarder(logRotator(
								numToKeepStr : isRelease ? '1000' : '30'
						))
				])

				sh 'echo' +
						' HOSTNAME -${HOSTNAME}-' +
						' EXECUTOR_NUMBER -${EXECUTOR_NUMBER}-' +
						' scmResult=' + scmResult +
						' BUILD_TIMESTAMP -${BUILD_TIMESTAMP}-' +
						' BRANCH_NAME -${BRANCH_NAME}-' +
						' BUILD_NUMBER -${BUILD_NUMBER}-' +
						' BUILD_ID -${BUILD_ID}-' +
						' SCHEMA=' + env.SCHEMA

				sh 'rm -f conf/environment/*.properties'

				writeEnv(
						'my55',
						''
				)
				writeEnv(
						'my55-legacy',
						'dialect.fullSequenceColumnName=false\n' +
						'dialect.longConstraintNames=false\n' +
						'dialect.smallIntegerTypes=false\n' +
						'dialect.utf8mb4=false\n'
				)
				writeEnv(
						'my55-nprep',
						'disableSupport.preparedStatements=true\n'
				)
				writeEnv(
						'my55-nprep-legacy',
						'dialect.fullSequenceColumnName=false\n' +
						'dialect.longConstraintNames=false\n' +
						'dialect.smallIntegerTypes=false\n' +
						'dialect.utf8mb4=false\n' +
						'disableSupport.preparedStatements=true\n'
				)
				writeEnv(
						'my55-nstmp',
						'cache.stamps=false\n'
				)
				writeEnv(
						'my55-nstmp-sq',
						'cache.stamps=false\n' +
						'schema.primaryKeyGenerator=sequence\n'
				)
				writeEnv(
						'my55-sq',
						'schema.primaryKeyGenerator=sequence\n'
				)
				writeEnv(
						'my55-sqb',
						'schema.primaryKeyGenerator=batchedSequence\n'
				)
				writeEnv(
						'my55-unique',
						'disableSupport.uniqueViolation=true\n'
				)

				sh 'ant/bin/ant' +
						' -f macros/resetSchema.xml' +
						' mysql' +
						' -Dfile=conf/environment/my55.properties'

				sh "ant/bin/ant clean testWithEnv" +
						' "-Dbuild.tag=git ${BRANCH_NAME} ' + scmResult.GIT_COMMIT + ' ' + scmResult.GIT_TREE + ' jenkins ${BUILD_NUMBER} ${BUILD_TIMESTAMP}"' +
						' -Dinstrument.verify=true' +
						' -Dtest-details=none' +
						' -Ddisable-ansi-colors=true'
			}
		}
		catch(Exception e)
		{
			//todo handle script returned exit code 143
			throw e;
		}
		finally
		{
			// because junit failure aborts ant
			junit(
					allowEmptyResults: false,
					testResults: 'build/testresults/**/*.xml',
			)
			archive(
					'build/testprotocol.*,' +
					'build/classes/runtime/src/com/exedio/cope/testprotocol.properties,' +
					'build/*.log,' +
					'build/testtmpdir'
			)
			def to = emailextrecipients([
					[$class: 'CulpritsRecipientProvider'],
					[$class: 'RequesterRecipientProvider']
			])
			//TODO details
			step([$class: 'Mailer',
					recipients: to,
					attachLog: true,
					notifyEveryUnstableBuild: true])

			if('SUCCESS'.equals(currentBuild.result) ||
				'UNSTABLE'.equals(currentBuild.result))
			{
				echo("Delete working dir after " + currentBuild.result)
				deleteDir()
			}
		}
	}
}

def abortable(Closure body)
{
	try
	{
		body.call();
	}
	catch(hudson.AbortException e)
	{
		if(e.getMessage().contains("exit code 143"))
			return
		throw e;
	}
}

def computeGitTree(scmResult)
{
	sh "git cat-file -p " + scmResult.GIT_COMMIT + " | grep '^tree ' | sed -e 's/^tree //' > .git/jenkins-head-tree"
	scmResult.GIT_TREE = readFile('.git/jenkins-head-tree').trim()
}

def writeEnv(name, text)
{
	writeFile(
			file: 'conf/environment/' + name + '.properties',
			text:
					'connection.url=jdbc:mysql://localhost/' + env.SCHEMA + '\n' +
					'connection.username=' + env.SCHEMA + '\n' +
					'connection.password=' + env.DATABASE_PASSWORD + '\n' +
					'x-build.schemasavepoint=' +
							/FAILS: SHOW MASTER STATUS returns empty result\\p{Punct} probably because binlog is disabled/ + '\n' +
					'x-build.dialect=mysql\n' +
					'x-build.driver=mysql-connector-java.jar\n' +
					text
	)
}
