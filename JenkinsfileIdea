
timestamps
{
	def jdk = 'openjdk-8-deb9'
	def isRelease = env.BRANCH_NAME.toString().equals("master")

	properties([
			buildDiscarder(logRotator(
					numToKeepStr         : isRelease ? '1000' : '30',
					artifactNumToKeepStr : isRelease ? '1000' :  '2'
			))
	])

	def idea = 'idea-2019.2.1'
	def confighome = '.IdeaIC2019.2'

	//noinspection GroovyAssignabilityCheck
	lock('idea') { node('GitCloneExedio && ' + jdk + ' && ' + idea)
	{
		try
		{
			abortable
			{
				echo("Delete working dir before build")
				deleteDir()

				checkout scm

				env.JAVA_HOME = tool jdk
				env.PATH = "${env.JAVA_HOME}/bin:${env.PATH}"

				sh "ant/bin/ant -noinput -f conf/idea" +
						' -Dconfig.home=' + env.HOME + '/' + confighome +
						' -Djava.home=' + env.JAVA_HOME

				sh "/" + idea + "/bin/inspect.sh " + env.WORKSPACE + " 'Project Default' idea-inspection-output"
				archiveArtifacts 'idea-inspection-output/**'
				sh "rm idea-inspection-output/SpellCheckingInspection.xml"
				recordIssues(
						enabledForFailure: true,
						ignoreFailedBuilds: false,
						qualityGates: [[threshold: 1, type: 'TOTAL', unstable: true]],
						tools: [
							ideaInspection(pattern: 'idea-inspection-output/**'),
						],
				)
			}
		}
		catch(Exception e)
		{
			//todo handle script returned exit code 143
			throw e
		}
		finally
		{
			def to = emailextrecipients([culprits(), requestor()])
			//TODO details
			step([$class: 'Mailer',
					recipients: to,
					attachLog: true,
					notifyEveryUnstableBuild: true])

			echo("Delete working dir after build")
			deleteDir()
		}
	}}
}

def abortable(Closure body)
{
	try
	{
		body.call()
	}
	catch(hudson.AbortException e)
	{
		if(e.getMessage().contains("exit code 143"))
			return
		throw e
	}
}
