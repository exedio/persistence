
timestamps
{
	def jdk = 'openjdk-8'
	def isRelease = env.BRANCH_NAME.toString().equals("master")

	properties([
			buildDiscarder(logRotator(
					numToKeepStr         : isRelease ? '1000' : '30',
					artifactNumToKeepStr : isRelease ? '1000' :  '2'
			))
	])

	def idea = '2020.1'
	def ideaSHA256 = 'fa301279ec1591ecad8758113ff22a64e82b11a583e7eae6fac0eb60ddc9f8e5'

	//noinspection GroovyAssignabilityCheck
	node('GitCloneExedio && docker')
	{
		try
		{
			abortable
			{
				echo("Delete working dir before build")
				deleteDir()

				checkout scm

				recordIssues(
						enabledForFailure: true,
						ignoreFailedBuilds: false,
						qualityGates: [[threshold: 1, type: 'TOTAL_HIGH', unstable: true]],
						tools: [
								taskScanner(
										excludePattern: 'JenkinsfileIdea,.git/**,lib/**,**/*.jar,**/*.zip,**/*.jpg,**/*.gif,**/*.png,**/*.tif,**/*.webp,**/*.pdf,**/*.eot,**/*.ttf,**/*.woff,**/*.woff2,**/keystore', // TODO do not exclude the whole JenkinsfileIdea, but just the FIXME line
										highTags: 'FIXME', // causes build to become unstable
										normalTags: 'TODO', // does not cause build to become unstable
										ignoreCase: true),
						],
				)

				def dockerName = env.JOB_NAME.replace("/", "-") + "-" + env.BUILD_NUMBER
				docker.
					build(
						'exedio-jenkins:' + dockerName + '-' + new Date().format("yyyyMMdd"),
						'--build-arg JDK=' + jdk + ' ' +
						'--build-arg IDEA=' + idea + ' ' +
						'--build-arg IDEA_SHA256=' + ideaSHA256 + ' ' +
						'conf/idea').
					inside(
						"--name '" + dockerName + "' " +
						"--cap-drop all " +
						"--security-opt no-new-privileges " +
						"--network none")
					{
						sh "/opt/idea/bin/inspect.sh " + env.WORKSPACE + " 'Project Default' idea-inspection-output"
					}
				archiveArtifacts 'idea-inspection-output/**'
				sh "rm idea-inspection-output/SpellCheckingInspection.xml"
				recordIssues(
						enabledForFailure: true,
						ignoreFailedBuilds: false,
						qualityGates: [[threshold: 1, type: 'TOTAL', unstable: true]],
						tools: [
							ideaInspection(pattern: 'idea-inspection-output/**'),
						],
				)
			}
		}
		catch(Exception e)
		{
			//todo handle script returned exit code 143
			throw e
		}
		finally
		{
			def to = emailextrecipients([culprits(), requestor()])
			//TODO details
			step([$class: 'Mailer',
					recipients: to,
					attachLog: true,
					notifyEveryUnstableBuild: true])

			echo("Delete working dir after build")
			deleteDir()
		}
	}
}

def abortable(Closure body)
{
	try
	{
		body.call()
	}
	catch(hudson.AbortException e)
	{
		if(e.getMessage().contains("exit code 143"))
			return
		throw e
	}
}
